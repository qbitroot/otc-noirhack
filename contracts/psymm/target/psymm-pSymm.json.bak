{"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"pSymm","functions":[{"name":"public_dispatch","hash":"5251889040300929090","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"approve_withdrawal","hash":"8534809747536362882","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"custody_id","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["approve_withdrawal"],"brillig_names":["discover_new_messages","random","notify_created_note_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"address_to_custody","hash":"2257015114439235796","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"custody_id","type":{"kind":"field"},"visibility":"private"},{"name":"parties","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},"visibility":"private"},{"name":"sender_idx","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"H4sIAAAAAAAA/+x9BbwUx7P1hesXuUASoiQQh0DSPWszcXd3T3Z3duPu7u7u7u7u7u7uHkgIJCSQkK8r2fuYXXrDhTk1r/p79PvVY+g/6Vunq+p0nZnZvT0a/h2FORsaXhv873UPY42VP3saG1wz1/Vn9LrZ8u96Web6WOY6LXP9LXMDjS1dMzeX5d8NtswNsczNbZlboDLXWNmXnpU/hxob1jD5/gw3dmhD9ehR+XPpyp8plU2nSzmvpFM6r7yg4GdUOlPI+trXGT8Ten4qVfLTfi4oBDkV6HSqpMuZIFVW/46ejZPWUrGGV+T0s3Ha/czVTpBvA4w1RXylfZhYuV6wYdL10Mh1Y+XfdP13TebvzcZajLU2TprvGo01e6DiDT0MuFZTIy42bbAcUopz/xYCrtUM3L92R/ZvOHCtFuD+dQD3z8YNbRFuaI9cd0SuW2u4oZf5e29jfYz1TYAbRgDX6gWMTSdzbDojMegdue4Tue5bE5t+5u/9jQ0wNoMlNj3BsVmgAbefM+L2U0d7DVp3MPM+zAjMq5mY9mGmyj401exBdPQA70uPBh7+b8D6WbStDW/0BjIdhmg/Z552P73aCRuxRRvPYZHrgRFim7mG2GYxf5/V2GzGZk+A2BYE7ucswLgT7n4NyRQvoqks/ztKFnfjrq27LqJ7MUel+xhUq7oHWU4Bzi58GpPGqySNngN4ogxq5AkkmnjmABaKrUCAsVb19kDFG0glx+bjnEwH2WQsHjehpIJOksVnbGAKFsZPK4vPVWHmwbUsTv/DxzVzgxNg9hkbcMw+F5DZBzNVIroQkZiHWDBP65pV97oruUXF2b9hUiFGB/rEmwuMpWvM3cjoMC1er9+e1vXnBoreeRqxJwjHHpKPPcB7OA+YDNC4B1dwo7Ra17rIeM8LvqnXRS607pCGf8mla752/B+9+aI592AwOJ5dY77GKQQvbiLOP+2Oa5vjtTdh5mu033iJXs9fcxNmAfP3BY0NNTbMchMGvQcLwYKnc5x+Dsclmcfp54hp9zNVO2HLqYUiuUPWdT08Mj+iJqcWNn9fxJgypis5RdazIRl5xNVBo/1cGOhnS8RPr0Jkqcqf6cqfmcqf2cZJbw7QyJm/+8YCY4saW8zY4saWMLaksaXIT2PLGFvW2HLGlje2grEVja1kbGVjqxhb1dhqxlY3toaxNY2tZWxtY+sYW9fYesbWN7aBsQ2NbWRsY2ObGNvU2GbGNje2hbEta+ViNvLIo7stvYo3dIrpxNmqkdHhrRrx627N3IareOMf3FtHjnHQuirJZEszJVu+kdHhPEOyFYQnG+EuOJ5sGaZkKzYyOlxkSLZQeLIR7pAh2Th83bpSGOhet9ToZpFlmYqs3MjocJmhyLYRXmSEextHiozIoMRQZNsmJJ7i+rndtPuZrp2wCd9UROCmI9fZyPV2NcJ3e/P3HYztaGynRv7XKIGnt94eWJs7gwmvNjY7R2KwQ+R6x8j1TjWx2cX8fVdjuxnbvbF6PWReEn9sy1CXewBj3VTZ0wjV/c9A85THxCcNUD89n29t5fWI7G3XTZc9zb7sZWxvY/sY29fYfsb2N3aAsQONHWTsYGOHGDvU2GHGDjd2hLEjjR1l7Ghjxxg71thxxo43doKxE42dZOxkY6cYO9XYacZON3aGsTONnWXsbGPnGDvX2HnGzjd2Qe1Nlz0bJ/+c016Wub0tc/tY5va1zO1nmdvfMneAZe5Ay9xBlrmDLXOHWOYOtcwdZpk73DJ3hGXuSMvcUZa5oy1zx1jmjrXMHWeZO94yd4Jl7kTL3EmWuZMtc6dY5k61zJ1mmTvdMneGZe5My9xZlrmzLXPnWObOtcydZ5k73zJ3QeMkkuwaQyt/Ll35U8UbVaQZ9+DYE7BWqfKq4F64tcK9cWsF++DW0vvC1irp/WBrFfX+sLV8fQBsLaUPRK1VUvog1FpFpQ9GreUrfQhqLVPbh4LWKpm1DgOtVTRrHQ5ayzdrHQFai7jwSMxaJVrrKMxaRVrraMxaPq11DGatf86OYyFrlf5Z6zjIWsV/1joespb/z1onQNb696w9EbFW6d+1TkKsVfx3rZMRa/n/rnUKYq1Kb3IqYK2wstZpgLUKlbVOB6xV+fC9PiP+Wv/zbvCZ8dfSXWudFXstv9y11tnx1yp0rXVO/LW6+lV9buy1cv+z1nmx18r8z1rnx15L/89aFzS68Y43Qjt0rXUhDvM/rxeib1TRDcI9GvE37i4Cxxr1qm1laHr7Z09gbCjOFzHs48UO7CMyx/dk2sdLgPtIvtXenKc4dd2Ev6Sxex8FvtT8/TJjlxu7orH+zXkVb2h6y20vhj0dOIj3YWFc/wjzpQy4Zx7Ec441geN+KfAcuxJY48C80a7EwgfG4qpGnhqWVBc2jr0ywqVXdZNjrzZ/v8bYtcauY+RYeot4bwaumUU4xxLmqxlwz+pIXV8NrMXrgRwLzBvtSiwCYCxuaOSpYUl1YePY6yNcekM3OfZG8/ebjN1s7BZGjqVPaezDwDWzCedYwnwjA+7ZHanrG4G1eCuQY4F5o12JxaLAWNzWyFPDkurCxrG3Rrj0tm5y7O3m73cYu9PYXYwcS5+C25eBa+YQzrGE+XYG3IMcqevbgbV4N5BjgXmjXYnFYsBY3NPIU8OS6sLGsXdHuPSebnLsvebv9xm739gDjBxLnzLej4Fr5hTOsYT5XgbcczlS1/cCa/FBIMcC80a7EovFgbF4qJGnhiXVhY1jH4xw6UPd5NiHzd8fMfaosccYOZa+xWF/Bq4ZLJxjCfPDDLiHOFLXDwNr8XEgxwLzRrsSiyWAsXiikaeGJdWFjWMfj3DpE93k2CfN358y9rSxZxg5lr4l5wAGrplbOMcS5icZcM/jSF0/CazFZ4EcC8wb7UoslgTG4rlGnhqWVBc2jn02wqXPdZNjnzd/f8HYi8ZeYuRY+hayAxm4Zl7hHEuYn2fAPZ8jdf08sBZfBnIsMG+0K7FYChiLVxp5alhSXdg49uUIl77STY591fz9NWOvG3uDkWOXbpz0ufnourG/+VY4xxLmVxlwL+BIXb8KrMU3gRwLzBvtSiyWBsbirUaeGpZUFzaOfTPCpW91k2PfNn9/x9i7xt5j5Fj6Ft2DGbhmQeEcS5jfZsA91JG6fhtYi+8DORaYN9qVWCwDjMUHjTw1LKkubBz7foRLP+gmx35o/v6RsY+NfcLIsfQt5YcwcM0w4RxLmD9kwL2QI3X9IbAWPwVyLDBvtCuxWBYYi88aeWpYUl3YOPbTCJd+1k2O/dz8/QtjXxr7ipFj6bdAHMrANcOFcyxh/pwB9whH6vpzYC1+DeRYYN5oV2KxHDAW3zTy1LCkurBx7NcRLv2mmxz7rfn7d8a+N/YDI8fSb9k5jIFrFhbOsYT5WwbcizhS198Ca/FHIMcC80a7EovlgbEY2chTw5LqwsaxP0a4dGQ3OXaU+ftPxn42NpqRY+m3mB3OwDVKOMcS5lEMuLUjdT0KWIu/ADkWmDfalVisAIzFmEaeGpZUFzaO/SXCpWO6ybFjzd9/NfabsXGMHEu/JfIIBq7xhHMsYR7LgDvlSF2PBdbi70COBeaNdiUWKwJj8UcjTw1Lqgsbx/4e4dI/usmx483fJxj709hfjBxLv4X3SAauSQvnWMI8ngF3xpG6Hg+sxYlAjgXmjXYlFisBY/F3I08NS6oLG8dOjHDp393kWLroYaynscYmPo6l33J+FAPXZIVzLGH+Z4/B6+YcqWtaEIW5qQnnFzBvtCuxWBnIi81NPDUsqS5sHEs52MWlzU3d49gWc9FqrM1YOyPHrtI46ffgRdeNu6e+cI4lzC0MHBs4UtctwFrsAHIsMG+0K7FYBcixvZp4alhSXdg4tiPCq726ybG9zUUfY32NdTJy7KqNk36vaHTduHu6qHCOJcy9GTh2MUfqujewFvsBORaYN9qVWKwK5Nj+TTw1LKkubBzbL8Kr/bvJsQPMxQzGZjQ2EyPHrtY46fc0R9eNu6eLC+dYwjyAgWOXcKSuBwBrcSCQY4F5o12JxWpAjp25iaeGJdWFjWMHRnh15m5y7CzmYlZjsxmbnZFjV2+c9Hvvo+vG3dMlhXMsYZ6FgWOXcqSuZwHW4hxAjgXmjXYlFqsDOXZQE08NS6oLG8fOEeHVQd3k2DnNxVzGBhsbwsixa5ifezwDxy4tnGMJ85wMHLuMI3U9J7AW5wZyLDBvtCuxWAPIsfM08dSwpLqwcezcEV6dp5scO6+5mM/Y/MYWYOTYNc3PPYGBY5cVzrGEeV4Gjl3OkbqeF1iLCwI5Fpg32pVYrAnk2KFNPDUsqS5sHLtghFeHdpNjh5mLhYwNNzaCkWPXMj/3RAaOXV44xxLmYQwcu4IjdT0MWIsLAzkWmDfalVisBeTYRZp4alhSXdg4duEIry7STY5V5kIb84ylGDl2bfNzT2Lg2BWFcyxhVgwcu5Ijda2AtZgGciwwb7QrsVgbyLGZJp4allQXNo5NR3g1002OzZqLnDHfWMDIseuYn3syA8euLJxjCXOWgWNXcaSus8h3fIAcC8wb7Uos1gFy7GJNPDUsqS5sHLtohFcX6ybHLm4uljC2pLGlGDl2XfNzT2Hg2FWFcyxhXpyBY1dzpK4XRz4bAXIsMG+0K7FYF8ixyzTx1LCkurBx7NIRXl2mmxy7rLlYztjyxlZg5Nj1zM89lYFjVxfOsYR5WQaOXcOV74VGakogxwLzRrsSi/WAHLtSE08NS6oLG8euGOHVlbrJsSubi1WMrWpsNUaOXd/83NMYOHZN4RxLmFdm4Ni1XPmMPLIWgRwLzBvtSizWB3LsGk08NSypLmwcu3qEV9foJseuaS7WMra2sXUYOXYD83NPZ+DYtYVzLGFek4Fj13HlfSFgLa4L5Fhg3mhXYrEBkGPXa+KpYUl1YePYdSO8ul43OXZ9c7GBsQ2NbcTIsRuan3sGA8euK5xjCfP6DBy7niu9E7AWNwZyLDBvtCux2BDIsZs08dSwpLqwcezGEV7dpJscu6m52MzY5sa2YOTYjczPPZOBY9cXzrGEeVMGjt3AkbreFFiLWwI5Fpg32pVYbATk2K2aeGpYUl3YOHbLCK9u1U2O3dpc5I0VjBUZOXZj83PPYuDYDYVzLGHemoFjN3KkrrcG1mII5Fhg3mhXYrExkGNLTTw1LKkubBwbRni11E2OLZuLbYxta2w7Ro7dxPzcsxk4dmPhHEuYywwcu4kjdV0G1uL2QI4F5o12JRabADl2hyaeGpZUFzaO3T7Cqzt0k2N3NBc7GdvZ2C6MHLup+bnnMHDspsI5ljDvyMCxmzlS1zsCa3FXIMcC80a7EotNgRy7WxNPDUuqCxvH7hrh1d26ybG7m4s9jO1pbC9Gjt3M/NxzGTh2c+EcS5h3Z+DYLRyp692Btbg3kGOBeaNdicVmQI7dp4mnhiXVhY1j947w6j7d5Nh9zcV+xvY3dgAjx25ufu55DBy7pXCOJcz7MnDsVo7U9b7AWjwQyLHAvNGuxGJzIMce1MRTw5LqwsaxB0Z49aBucuzB5uIQY4caO4yRY7cwP/d8Bo7dWjjHEuaDGTg270hdHwysxcOBHAvMG+1KLLYAcuwRTTw1LKkubBx7eIRXj+gmxx5pLo4ydrSxYxg5dkvzcy9g4NiCcI4lzEcycGzRkbo+EliLxwI5Fpg32pVYbAnk2OOaeGpYUl3YOPbYCK8e102OPd5cnGDsRGMnRTi2a/QEx7lfA24/j2/iye1GMOaFgbmdAq51MnD/KG/6N0w6S6IDfV4j/Y76e0oTo8OnNOHXPRVIdFy4T40wCmjdf5KNirRnA3+yRYtXxRycfqYaeYritEje4r/NBdg19agkRY+I000VS4KVkAGIJvbplQI6gzBxBOA0BmY6DXw0c+HuyYg79kdrmPdQxRuaEvNMBvl4Fvh47yIFWvfQyrrovTiDaS/OZtqLs/9jL2J/tQHTXpT+d2+nFKfgH1sOlAfJ5gE6+M5k4FJgvDVyD+k8bm6wd58NU7kHU8qp6Joc/I3ak2iDdc5/dYwq3tBnMhFi1Omp9FlP6eeQz+cwEMM2Qu7tTU0jE/v9tiaZBLPNIJ68PDdyUE9rfKa058j4nBdZS6dSpjbCnC6H5VQmF3gFnU1ls+V0OZf102E5k86HuZJO51NeUMqpsvZLpVwmVcxly0FYzJajpK3DVCodBoWiznjZfEH5YSqvyulcylP5MJULw5SfzeZTqTDrl/3A97x8OeWrTC4XqKyXCjyu+JxXiU+SSnNhJqV5fiWxLnCFwLn8O5+BrC9kOrguZFQ1tBcXMOzFRUx7cRGjquHKi+2EqxquHNheuKpZmEnVAOOtt5+uamqHPp9J1Vzsoqq5mFnVXMxADDv8H1Q1lzTJJJgdmLrmSxxTNZcCVc32QFXDFZ9LI6qm3qEg+XYUp59cB8xlLh4wlzEfMJcxHDA7Mh0wzWA/kQR2OXAt5G0z5GG1IxMZXt6Nwyrunl7RhDsUqm6bCTqsuOJzxf9Ht+CurCTWVbaXPVS8oeu99IB8iyf27x4BdsIcge/aw0ZH9jDuWlcLjwcVzNUMTcI1TA3TNYy3a69i2otrmfbiWsbbtVx5sYvw27VcObCrA7drr2a4XQuMt951+u3a2vEPf6P2JNr4Xceppq9mIsTrGNU0+XwdAzHs5sjt2quBTdH1TTIJZjcmhXV9ArdrkfG5AXi7dlegAuaKzw3/CwqY6+MON1YS6yZXCJzLvxsZyPpmpoPrZkZVQ3txE8Ne3MK0F7cwqhquvNhDuKrhyoE9HXi1nkPVAOOt95yuamqHvpFJ1dzqoqq5lVnV3MpADHv9H1Q1tzXJJJi9mLrm2xxTNbcDVc2eQFXDFZ/b/xdeQkHejuL0k+uAucPFA+YO5gPmDoYDZm9HXkJBEtidwLWQt82Qh9XeTGR4ZwIvodwFfAll10EyDyuu+NxliQ/6HQHgSyc6A/weqbuBvE45ndT3SN3NdIje08To8D1N+HXvBRIzF+57myZtMGjdRL9HKuPI90gh32yLFsV9TYzfI3UvULpGWb3L6f8fXi28v1JADzQxfI8UBeA+Bma6j/lBDQp3T0bccX18UPjDLkrMBxkk1kNMcvMhxoddDzDtxcNMe/Ew48MurrzYT/jDLq4c2N+BV/geZOBSYLz1/tMfdtWOf/gbtSfRBusRznuRDzIR4iOM9yLJ50cYiOEARx52PQhsih5tkkkwBzDdn3o0gYddyPg8BnzYtT/w/iFXfB77X3iFL8OkNB+vJNYTrhA4l3+PM5D1k0wH15OMqob24gmGvXiKaS+eYlQ1XHlxkHBVw5UDBwtXNRkmVQOMtz54uqqpHfpxJlXztIuq5mlmVfM0AzEc8n9Q1TzTJJNgDmHqmp9xTNU8C1Q1BwNVDVd8nv1feIUPeTuK00+uA+Y5Fw+Y55gPmOcYDphDHXmFD0lgzwPXQt42Qx5WhzKR4fMJvML3AvAVvv0HyTysuOLzwv9Ht+BerCTWS7aXPVS8oeu99IB8iyfuWsAXR1i+t6hrD9HviHLtYdy1XhYeDyqYlxmahFeYGqZXGG/XvsS0F68y7cWrjLdrufLiCOG3a7ly4EgHbte+zHC7FhhvfeT027W14x/+Ru1JtPF7jVNNv8xEiK8xqmny+TUGYjjKkdu1LwObotebZBLMUUwK6/UEbtci4/MG8HbtkUAFzBWfN/4XFDDXxx3erCTWW64QOJd/bzKQ9dtMB9fbjKqG9uIthr14h2kv3mFUNVx5cYxwVcOVA8c68Go9h6oBxlsfO13V1A79JpOqeddFVfMus6p5l4EYjvs/qGrea5JJMMcxdc3vOaZq3geqmmOBqoYrPu//L7yEgrwdxekn1wHzgYsHzAfMB8wHDAfM8Y68hIIksA+BayFvmyEPq+OZyPDDBF5C+Qj4EsqRg2QeVlzx+YjxDkhofsg2jXgO+pj5LhiCez62vGuh4g3kOaQ/BnLaJ8LjQd8p+AnDWfgp+B0T9PtNdBcG6WOqsl4DNq9Z7kClK76iY/4ZMNdpK5P67rnPmBrvz5sYHf68Cb/uF0Di48L9xf/xIvuSSc2iCRaZS18JP0wWMLFG+kgx/sqRPJ+vka8muwa6hr6e9lhlaifItwENk4Qb/b2n2ZOJEb+7rntErsmHiZH/7htz8a2x74x93zRpvmugG+bhwLW+Adb6D0z8ht6/EcC1vgXu34/gZqY2t39ompTDP0auv4tcf1+T2yPNxShjPxn7uWnSOy0tkbjYxtIYHOkeDZPXE5oHgWspLh97OODjcAd8HNGQzDmn4g09koNLqZBaGybdleYEMB/TFzU3gPws5dKZTFAMnAsig58zOfKl2o24tapechxdOWF+6Xpbs+s2Mv0PgxuqB/rln9HADmJME/bE6dqHMZZ9QAf3l4SKJe4ej8X5mbJ1aWMj3diCDZOuB0aUycyN1V3ar+biN2PjjP0e6dKSug33K9NtuD+aGB3+wyJ94yaHo5uuo/6O59z08Qz3Psc3YQPYZgkajQlTEiJxf/if4IjWUsufTfabG8Mj14011PIX/TfG/q6898N9c2MocK2/gInRozmZm7cq3tATgZh74jBrzpyZAKybv4H719iMPRZr65lysqtue0auGyPXDc3V9dxk/t5srMVYawL1jDylmppxsWljjk1bJAbNkeuWyHVrTWzazd87jPUy1rt5UhvX3pCMZke2cRZ3UWt7/+wp814A1/o/fcNtaANfTiFjzYF9AlM9of1sb3bDzzHM/ARvxsYAm4k+wGYsem+H1h3c8O9BM6DB/lTn/+ZB4/GtrSfd56A/B1eu+5pYdBrrZ6y/sQHGZjA2o7GZjA00NrOxWYzNamw2Y7Mbm8PYIGNzGpuL4mlsiLG5jc1jbF5j8xmb39gCxhY0NtTYMGMLGRtubERzQ/XNT3KmrWau0zLXzzLX3zI3wDI3g2VuRsvcTJa5gZa5mS1zs1jmZrXMzWaZm90yN4dlbpBlbk7L3FyWucGWuSGWubktc/NY5ua1zM1nmZvfMreAZW5By9xQy9wwy9xClrnhlrkRzdW3XWgMqfy5dOVPFW9UkU5cMu4LUCKlMg2lO0FrEcZ+kLX+3a/+8dfyuj7dOyDuWulJnxSeId5aKvqp4xnjrOVVf4J5pmlfS9V+GnrgNK6VLU/+yeqZp20t3/Yp7VmmZS3f/onvWad+rVy9T4/PNrVr5ep/En32qVvL+69Ptc8xNWvl/vsT8oO6v9YUv8Fhzu6ulZsiF+q5ureW6gav6sHdWUt1i6P1kCmvlekm3+u5p7RWuttnh57nP9dKl6fiHNLz/tdauak60/R89dfyp/J81PPXWSsoT/VZqxewr6Wm4dzWC9rWUtPUA+ihk6+lp7Gf0MNq1wqnuTfRC1WvlYrR5+jhkbW8cqyeSY8A3mVI8jnrCFivF1Y9Z124mdFhWrz2bkZc5xfGBVAvAthUzs+r0B6Sj6hHvF17uAi4CPo1JPNNDLjiDVnvqkT3QlUKTNfe2VDNk17q75rTFgUKf/EcqBoVsIA0OLjo5KOiUcBi7MKtHD2RhsPyKAij/nrNjA578BMpCD3giZQSfiLRHqbgJ1IQphw9kYbD/A6KFndZTqR0pcAytSdS2nIiZRI4kYYDT6Q0sIAyTMFFEVCXn0jMWSCZNTTgT8tFKgSEfkiKlAI5IJnZ9lDFG5pinGPoZHKOdjILwfinkIr66zczOuzDO5lCygcWfyC8k6E9DOCdTCEVMBc/gkBzwgl0UfAedg30wYvM8cWAtZdkB7wQzO+CZ3GXpQNevELMS9R2wItbOuAlEuiAcSeQ0osDk3IJpuCiCxGJeUnmDljFG5rIcTGG7m0p4V0rxWUpB3Bz5fhSwBxfWniO12tSEM0Paq1lwAd2UmpnGOys8ctRf5dtZnR4Wbja8cvLAgO4nHC1Q3u4HFzt+OXlhKsdIrplmmWT8fJgMu4aaMzIHF/BUbUzDOa3X7K4y6J2VqwQ80q1amdFi9pZKQG1gzuBlF4RmJQrMQUXXYhIzCsL7wSJHFdg6PpXEa52KC6rOICbK8dXAeb4qsJzvF6TouINjWxSVnP02c5Q2FnjVX0p0OrNjA6vDlc7nlodWARrCFc7tIdrwNWOp9YQrnaI6FZrlk3GazqidpA5vpajamcozG9dtrjLonbWrhDzOrVqZ22L2lknAbWDO4GUXhuYlOswBRddiEjM6wrvBIkc12Lo+tcTrnYoLus5gJsrx9cD5vj6wnO8XpOi4g2NbFI2cFTtLAg7a8IqtbNhM6PDG8LVTqg2BBbBRsLVDu3hRnC1E6qNhKsdIroNmmWT8caOqB1kjm/iqNpZEOZ3MTG1s2mFmDerVTubWtTOZgmoHdwJpPSmwKTcjCm46EJEYt5ceCdI5LgJQ9e/hXC1Q3HZwgHcXDm+BTDHtxSe4/WaFBVvaGSTspWjamcB2FmTrfpOjK2bGR3eGq52snprYBHkhasd2sM8XO1kq3CrmMOGG0F0WzXLJuOCI2oHmeNFR9XOAjC/s4l9l0pYIeZSrdoJLWqnlIDawZ1ASofApCwxBRddiEjMZeGdIJFjkaHr30a42qG4bOMAbq4c3waY49sKz/F6TYqKNzSySdnOUbUzP+7Zjh/1d/tmRoe3xz/b8bcHFsEOwtUO7eEO+Gc7/g7C1Q4R3XbNssl4R0fUDjLHd3JU7cwP8zvMWdxlUTs7V4h5l1q1s7NF7eySgNrBnUBK7wxMyl2YgosuRCTmXYV3gkSOOzF0/bsJVzsUl90cwM2V47sBc3x34Tler0lR8YZGNil7OKp25oOdNekg6u+ezYwO7wlXO+lgT2AR7CVc7dAe7gVXO+lgL+Fqh4huj2bZZLy3I2oHmeP7OKp25oP5nfYt7rKonX0rxLxfrdrZ16J29ktA7eBOIKX3BSblfkzBRRciEvP+wjtBIsd9GLr+A4SrHYrLAQ7g5srxA4A5fqDwHK/XpKh4QyOblIMcVTvzws6aQtWbbAc3Mzp8MFztFPTBwCI4RLjaoT08BK52ClW4Vcxhw40guoOaZZPxoY6oHWSOH+ao2pkX5nchsTfZDq8Q8xG1audwi9o5IgG1gzuBlD4cmJRHMAUXXYhIzEcK7wSJHA9j6PqPEq52KC5HOYCbK8ePAub40cJzvF6TouINjWxSjnFU7cyDUzvFqL/HNjM6fCxe7RSPBRbBccLVDu3hcXi1UzxOuNohojumWTYZH++I2kHm+AmOqp15cA1xweIui9o5sULMJ9WqnRMtauekBNQO7gRS+kRgUp7EFFx0ISIxnyy8EyRyPIGh6z9FuNqhuJziAG6uHD8FmOOnCs/xek2Kijc0skk5zVG1MzfuTbZC1N/TmxkdPh3/JlvhdGARnCFc7dAenoF/k61whnC1Q0R3WrNsMj7TEbWDzPGzHFU7c+Nedspb3GVRO2dXiPmcWrVztkXtnJOA2sGdQEqfDUzKc5iCiy5EJOZzhXeCRI5nMXT95wlXOxSX8xzAzZXj5wFz/HzhOV6vSVHxhkY2KRc4qnaGwM4av+obqC9sZnT4Qrja8dWFwCK4SLjaoT28CK52fHWRcLVDRHdBs2wyvtgRtYPM8UscVTtDYH7nEvsG6ksrxHxZrdq51KJ2LktA7eBOIKUvBSblZUzBRRciEvPlwjtBIsdLGLr+K4SrHYrLFQ7g5srxK4A5fqXwHK/XpKh4QyOblKscVTuDmdTO1c2MDl/NoHauBhbBNcLVDu3hNQxq5xrhaoeI7qpm2WR8rSNqB5nj1zmqdgY7qHaurxDzDbVq53qL2rkhAbWDO4GUvh6YlDc4onaQmG8U3gkSOV7H0PXfJFztUFxucgA3V47fBMzxm4XneL0mRcUbGtmk3OKo2pkLdtbkq76T7dZmRodvhaudfHArsAhuE652aA9vg6udfHCbcLVDRHdLs2wyvt0RtYPM8TscVTtzwfzOJ/adbHdWiPmuWrVzp0Xt3JWA2sGdQErfCUzKu5iCiy5EJOa7hXeCRI53MHT99whXOxSXexzAzZXj9wBz/F7hOV6vSVHxhkY2Kfc5qnbmxKmddNTf+5sZHb4fr3bS9wOL4AHhaof28AG82kk/IFztENHd1yybjB90RO0gc/whR9XOnLiGOGVxl0XtPFwh5kdq1c7DFrXzSAJqB3cCKf0wMCkfYQouuhCRmB8V3gkSOT7E0PU/JlztUFwecwA3V44/Bszxx4XneL0mRcUbGtmkPOGo2hkEO2vCqmc7TzYzOvwkXO2EwZPAInhKuNqhPXwKrnbC4CnhaoeI7olm2WT8tCNqB5njzziqdgbB/A4Te7bzbIWYn6tVO89a1M5zCagd3Amk9LPApHyOKbjoQkRifl54J0jk+AxD1/+CcLVDcXnBAdxcOf4CMMdfFJ7j9ZoUFW9oZJPykqNqZw7YWVMsRf19uZnR4ZfhaqdYehlYBK8IVzu0h6/A1U6x9IpwtUNE91KzbDJ+1RG1g8zx1xxVO3PA/C6GFndZ1M7rFWJ+o1btvG5RO28koHZwJ5DSrwOT8g2m4KILEYn5TeGdIJHjawxd/1vC1Q7F5S0HcHPl+FvAHH9beI7Xa1JUvKGRTco7jqqd2WFnja56tvNuM6PD78LVjg7eBRbBe8LVDu3he3C1o4P3hKsdIrp3mmWT8fuOqB1kjn/gqNqZHea3TuzZzocVYv6oVu18aFE7HyWgdnAnkNIfApPyI6bgogsRiflj4Z0gkeMHDF3/J8LVDsXlEwdwc+X4J8Ac/1R4jtdrUlS8oZFNymeOqp3ZYGdNoUrtfN7M6PDncLVTCD4HFsEXwtUO7eEXcLVTCL4QrnaI6D5rlk3GXzqidpA5/pWjamc2mN+FxNTO1xVi/qZW7XxtUTvfJKB2cCeQ0l8Dk/IbpuCiCxGJ+VvhnSCR41cMXf93wtUOxeU7B3Bz5fh3wBz/XniO12tSVLyhkU3KD46qnVlhZ43vR/39sZnR4R/hasf3fwQWwUjhaof2cCRc7fj+SOFqh4juh2bZZDzKEbWDzPGfHFU7s8L89nMWd1nUzs8VYh5dq3Z+tqid0QmoHdwJpPTPwKQczRRcdCEiMf8ivBMkcvyJoesfI1ztUFzGOICbK8fHAHN8rPAcr9ekqHhDI5uUXx1VO7PAzpp0ldr5rZnR4d/gaift/wYsgnHC1Q7t4Ti42kn744SrHSK6X5tlk/HvjqgdZI7/4ajamQXmdzoxtTO+QswTatXOeIvamZCA2sGdQEqPByblBKbgogsRiflP4Z0gkeMfDF3/X8LVDsXlLwdwc+X4X8Acnyg8x+s1KSre0Mgm5W9H1c7MsLMm0FX+tjA6TItj1U6gaU2Ujz1aZKsd2kPyEat2gircKuaw4UYQ3d/Nssm4ZwuWjLsGGjMyxxuBmJNUOzPDSD9QFndZ1E5ThZibWxqqlU1Ty+Rqh/4Rt9qZGah2moBJ2dzCE1x0ISIxt4DJB11wRI6NLfiDoZX54FLxhqa4tDqAmyvHW4E53iY8x+s1KSre0MgmpR2YN0mqnYGwsyanov52tDA63AFXOznVASyCXsLVDu1hL7jayalewtUOEV17i2wy7u2I2kHmeB9H1c5AmNrJli3usqidvhVi7qxVO30taqczAbUzEKh2+gKTsrOFJ7joQkRi7ie8EyRy7MPQ9fcXrnYoLv0dwM2V4/2BOT5AeI7Xa1JUvKGRTcoMjqqdmXDfUlD1DdQztjA6PCNc7RRKMwKLYCbhaof2cCa42imUZhKudojoZmiRTcYDHVE7yByf2VG1MxPug+yJfQP1LBVinrVW7cxiUTuzJqB2ZgKqnVmASTlrC09w0YWIxDyb8E6QyHFmhq5/duFqh+IyuwO4uXJ8dmCOzyE8x+s1KSre0MgmZZCjamdG2FnjVT3bmbOF0eE54WrHU3MCi2Au4WqH9nAuuNrx1FzC1Q4R3aAW2WQ82BG1g8zxIY6qnRlhakeXLe6yqJ25K8Q8T63amduiduZJQO3MCFQ7cwOTcp4WnuCiCxGJeV7hnSCR4xCGrn8+4WqH4jKfA7i5cnw+YI7PLzzH6zUpKt7QyCZlAUfVzgy4s6YY9XfBFkaHF4SrHVVcEFgEQ4WrHdrDoXC1o4pDhasdIroFWmST8TBH1A4yxxdyVO3MgPuwZsHiLovaGV4h5hG1ame4Re2MSEDtAE8gPRyYlCNaeIKLLkQk5oWFd4JEjgsxdP2LCFc7FJdFHMDNleOLAHNcCc/xek2Kijc0sknRjqqdAbCzJlv1JpvXwuiwB1c72ZIHLIKUcLVDe5iCq51sKSVc7RDR6RbZZJx2RO0gczzjqNoZgPvcTmJvsmUrxJyrVTtZi9rJJaB2BgDVThaYlLkWnuCiCxGJ2RfeCRI5Zhi6/kC42qG4BA7g5srxAJjjiwrP8XpNioo3NLJJWcxRtdMfdtboqu9kW7yF0eHF4WpH68WBRbCEcLVDe7gEXO3oKtwq5rDhRhDdYi2yyXhJR9QOMseXclTt9Me9yZbYd7ItXSHmZWrVztIWtbNMAmqnP1DtLA1MymVaeIKLLkQk5mWFd4JEjksxdP3LCVc7FJflHMDNlePLAXN8eeE5Xq9JUfGGRjYpKziqdvoBvzk76u+KLYwOr9iCX3cl4QqFcK/UMmmDQeuyqAoilBVaZJPeyo6oCmRersJM9IiYrMKQ40kSaicToa7awujwqgyEuppwQiXcq00nVNhaqztCqMi8XEM4oVJM1nCcUPsCvzk56u+aLYwOr8lQrGsCk20t4eRMe7gWg7xfS/j9eBeIfm1HiB6Z4+sIv0VCMVmHoV7WFX4bkHhiXaYmjisv1wXm5XrC87Ien6l4QyP5bH3hOU4xXp9BoCHzkBrCAQ2THoVFB9pv4Fp8zxiVx/r8skdkbwdXrjcw8dzQ2EbGNja2ibFNjW1mbHNjWxjb0thWxrY2ljdWMFY0FhorGSsb28bYtsa2M7a9sR2M7WhsJ2M7G9vF2K7GdjO2u7E9jO1Z++x0g8pz0ujchpa5jSxzG1vmNrHMbWqZ28wyt7llbgvL3JaWua0sc1tb5vKWuYJlrmiZCy1zJctc2TK3jWVuW8vcdpa57S1zO1jmdrTM7WSZ29kyt4tlblfL3G6Wud0tc3tY5vZsmfyZ/JDKn0tX/lTxRhXpxCXLDQDE2/V8f0PQWoRxI8ha/+7XxvHX8ir7pTeJu1b6f/ZebxpvLRWJo94szlpeVU7ozad9LVWTX3qLaVwrW54sV/WW07aWb8l7vdW0rOVba0hvPfVr5erUo85P7Vq5urWtC1O3lvcfPKGLU7NW7j85R4fdX6s4Bf7Spe6ulZsiF+py99ZS3eBVvU131lLd4mi97ZTXynST7/V2U1or3e2zQ2//n2uly1NxDukd/mut3FSdaXrH+mv5U3k+6p3qrBWUp/qs1Tvb11LTcG7rXWxrqWnqAfSuk6+lp7Gf0LvVrhVOc2+id69eKxWjz9F7RNbyyrF6Jr0nUKQn+fRiT1ivF1Z9mmCvFkaH92pBf5og1HvhAqj3Bmwq59ML2sO9gXdju/Zwb3ARJPVWOK54w8TeCt+nUmD71t7Z2Kdl8rfC923hfyscxyRK7wMsoH3BwUUnHxXNPsBi7MK9j6Mn0h6wPArCqL/7tTA6vB/8RArC/YAn0v7CTyTaw/3hJ1IQ7u/oibQHzO+gaHGX5UQ6oFJgB9aeSAdYTqQDEziR9gCeSAcAC+hApuCiHwQjMR8EJLOGBvxpuXeFgNAPgpFS4GAgmdn2UMUbmmJ8MEMnc7CjnczuMP4ppKL+HtLC6PAh8E6mkDoEWPyHCu9kaA8PhXcyhdShzMWPINCDhRPoYeA97BrogxeZ44cDay/JDnh3mN8Fz+IuSwd8RIWYj6ztgI+wdMBHJtAB404gpY8AJuWRTMFFFyIS81HMHbCKNzSR4+EM3dvRwrtWisvRDuDmyvGjgTl+jPAcr9ekIJof1FrHgg/spNTObrCzxi9H/T2uhdHh4+Bqxy8fBwzg8cLVDu3h8XC145ePF652iOiObZFNxieAybhroDEjc/xER9XObjC//ZLFXRa1c1KFmE+uVTsnWdTOyQmoHdwJpPRJwKQ8mSm46EJEYj5FeCdI5HgiQ9d/qnC1Q3E51QHcXDl+KjDHTxOe4/WaFBVvaGSTcrqjz3Z2hZ01XtW3PpzRwujwGXC146kzgEVwpnC1Q3t4JlzteOpM4WqHiO70FtlkfJYjageZ42c7qnZ2hfld/SvnG5B+1qidcyrEfG6t2jnHonbOTUDt4E4gpc8BJuW5TMFFFyIS83nCO0Eix7MZuv7zhasdisv5DuDmyvHzgTl+gfAcr9ekqHhDI5uUCx1VO7vAzpqwSu1c1MLo8EVwtROqi4BFcLFwtUN7eDFc7YTqYuFqh4juwhbZZHyJI2oHmeOXOqp2doH5XUxM7VxWIebLa9XOZRa1c3kCagd3Ail9GTApL2cKLroQkZivEN4JEjleytD1Xylc7VBcrnQAN1eOXwnM8auE53i9JkXFGxrZpFztqNrZGXbWZKu+E+OaFkaHr4Grnay+BlgE1wpXO7SH18LVTrYKt4o5bLgRRHd1i2wyvs4RtYPM8esdVTs7w/zOJvZdKjdUiPnGWrVzg0Xt3JiA2sGdQErfAEzKG5mCiy5EJOabhHeCRI7XM3T9NwtXOxSXmx3AzZXjNwNz/BbhOV6vSVHxhkY2Kbc6qnZ2wj3b8aP+3tbC6PBt+Gc7/m3AIrhduNqhPbwd/2zHv1242iGiu7VFNhnf4YjaQeb4nY6qnZ1gfoc5i7ssaueuCjHfXat27rKonbsTUDu4E0jpu4BJeTdTcNGFiMR8j/BOkMjxToau/17haoficq8DuLly/F5gjt8nPMfrNSkq3tDIJuV+R9XOjrCzJh1E/X2ghdHhB+BqJx08ACyCB4WrHdrDB+FqJx08KFztENHd3yKbjB9yRO0gc/xhR9XOjjC/077FXRa180iFmB+tVTuPWNTOowmoHdwJpPQjwKR8lCm46EJEYn5MeCdI5PgwQ9f/uHC1Q3F53AHcXDn+ODDHnxCe4/WaFBVvaGST8qSjamcH2FlTqHqT7akWRoefgqudgn4KWARPC1c7tIdPw9VOoQq3ijlsuBFE92SLbDJ+xhG1g8zxZx1VOzvA/C4k9ibbcxVifr5W7TxnUTvPJ6B2cCeQ0s8Bk/J5puCiCxGJ+QXhnSCR47MMXf+LwtUOxeVFB3Bz5fiLwBx/SXiO12tSVLyhkU3Ky46qne1xaqcY9feVFkaHX8GrneIrwCJ4VbjaoT18Fa92iq8KVztEdC+3yCbj1xxRO8gcf91RtbM9riEuWNxlUTtvVIj5zVq184ZF7byZgNrBnUBKvwFMyjeZgosuRCTmt4R3gkSOrzN0/W8LVzsUl7cdwM2V428Dc/wd4Tler0lR8YZGNinvOqp2tsO9yVaI+vteC6PD7+HfZCu8ByyC94WrHdrD9/FvshXeF652iOjebZFNxh84onaQOf6ho2pnO9zLTnmLuyxq56MKMX9cq3Y+sqidjxNQO7gTSOmPgEn5MVNw0YWIxPyJ8E6QyPFDhq7/U+Fqh+LyqQO4uXL8U2COfyY8x+s1KSre0Mgm5XNH1c62sLPGr/oG6i9aGB3+Aq52fPUFsAi+FK52aA+/hKsdX30pXO0Q0X3eIpuMv3JE7SBz/GtH1c62ML9zZYu7LGrnmwoxf1urdr6xqJ1vE1A7uBNI6W+ASfktU3DRhYjE/J3wTpDI8WuGrv974WqH4vK9A7i5cvx7YI7/IDzH6zUpKt7QyCblR0fVzjZMamdkC6PDIxnUzkhgEYwSrnZoD0cxqJ1RwtUOEd2PLbLJ+CdH1A4yx392VO1s46DaGV0h5l9q1c5oi9r5JQG1gzuBlB4NTMpfHFE7SMxjhHeCRI4/M3T9Y4WrHYrLWAdwc+X4WGCO/yo8x+s1KSre0Mgm5TdH1U4Zdtbkq76TbVwLo8Pj4GonH4wDFsHvwtUO7eHvcLWTD34XrnaI6H5rkU3GfziidpA5Pt5RtVOG+Z1P7DvZJlSI+c9atTPBonb+TEDt4E4gpScAk/JPpuCiCxGJ+S/hnSCR43iGrn+icLVDcZnoAG6uHJ8IzPG/hed4vSZFxRsa2aQ0tLqpdko4tZOO+tujldFhWhysdtI9cAHUPVtlqx3aQ/IRrHbSPVt5Dw0E0TW0yibjxlYsGXcNNGZkjjcBMSepdkq4hjhlcZdF7TRXiLmltaFa2TS3Tq526B9xq50SUO00A5OypZUnuOhCRGJuBZMPuuCIHJta8QdDG/PBpeINTXFpcwA3V463AXO8XXiO12tSVLyhkU1Kh6NqJ4SdNWHVs51erYwO94KrnTDoBSyC3sLVDu1hb7jaCYPewtUOEV1Hq2wy7uOI2kHmeF9H1U4IUzthYs92OivE3K9W7XRa1E6/BNROCFQ7ncCk7NfKE1x0ISIx9xfeCRI59mXo+gcIVzsUlwEO4ObK8QHAHJ9BeI7Xa1JUvKGRTcqMjqqdIuysKZai/s7UyujwTHC1UyzNBCyCgcLVDu3hQLjaKZYGClc7RHQztsom45kdUTvIHJ/FUbVThKmdYmhxl0XtzFoh5tlq1c6sFrUzWwJqpwhUO7MCk3K2Vp7gogsRiXl24Z0gkeMsDF3/HMLVDsVlDgdwc+X4HMAcHyQ8x+s1KSre0MgmZU5H1U4Bdtboqmc7c7UyOjwXXO3oYC5gEQwWrnZoDwfD1Y4OBgtXO0R0c7bKJuMhjqgdZI7P7ajaKcDUjk7s2c48FWKet1btzGNRO/MmoHYKQLUzDzAp523lCS66EJGY5xPeCRI5zs3Q9c8vXO1QXOZ3ADdXjs8PzPEFhOd4vSZFxRsa2aQs6KjaycPOmkKV2hnayujwULjaKQRDgUUwTLjaoT0cBlc7hWCYcLVDRLdgq2wyXsgRtYPM8eGOqp08TO0UElM7IyrEvHCt2hlhUTsLJ6B28kC1MwKYlAu38gQXXYhIzIsI7wSJHIczdP1KuNqhuCgHcHPluALmuBae4/WaFBVvaGST4jmqdrbGfQO1H/U31crocAqudnw/BSyCtHC1Q3uYhqsd308LVztEdF6rbDLOOKJ2kDmedVTtbA1TO37O4i6L2slViNmvVTs5i9rxE1A7WwPVTg6YlH4rT3DRhYjEHAjvBIkcswxd/6LC1Q7FZVEHcHPl+KLAHF9MeI7Xa1JUvKGRTcrijqqdrWBnTbpK7SzRyujwEnC1k/aXABbBksLVDu3hknC1k/aXFK52iOgWb5VNxks5onaQOb60o2pnK5jaSSemdpapEPOytWpnGYvaWTYBtbMVUO0sA0zKZVt5gosuRCTm5YR3gv+QI0PXv7xwtUNxWd4B3Fw5vjwwx1cQnuP1mhQVb2hkk7Kio2pnS9hZE+iovyu1Mjq8ElztBHolYBGsLFzt0B6uDFc7QRVuFXPYcCOIbsVW2WS8iiNqB5njqzqqdraEqZ1AWdxlUTurVYh59Vq1s5pF7ayegNrZEqh2VgMm5eqtPMFFFyIS8xrCO0Eix1UZuv41hasdisuaDuDmyvE1gTm+lvAcr9ekqHhDI5uUtR1VO1vAzpqcivq7Tiujw+vA1U5OrQMsgnWFqx3aw3Xhaien1hWudojo1m6VTcbrOaJ2kDm+vqNqZwuY2smWLe6yqJ0NKsS8Ya3a2cCidjZMQO1sAVQ7GwCTcsNWnuCiCxGJeSPhnSCR4/oMXf/GwtUOxWVjB3Bz5fjGwBzfRHiO12tSVLyhkU3Kpo6qnc1x31JQ9Q3Um7UyOrwZXO0USpsBi2Bz4WqH9nBzuNoplDYXrnaI6DZtlU3GWziidpA5vqWjamdz3LcUJPYN1FtViHnrWrWzlUXtbJ2A2tkcqHa2Aibl1q08wUUXIhJzXngnSOS4JUPXXxCudiguBQdwc+V4AZjjReE5Xq9JUfGGRjYpoaNqZzPYWeNVPdsptTI6XIKrHU+VgEVQFq52aA/LcLXjqbJwtUNEF7bKJuNtHFE7yBzf1lG1sxnuG6gTe7azXYWYt69VO9tZ1M72CaidzYBqZztgUm7fyhNcdCEiMe8gvBMkctyWoevfUbjaobjs6ABurhzfEZjjOwnP8XpNioo3NLJJ2dlRtbMp7qwpRv3dpZXR4V3gakcVdwEWwa7C1Q7t4a5wtaOKuwpXO0R0O7fKJuPdHFE7yBzf3VG1sylM7aiCxV0WtbNHhZj3rFU7e1jUzp4JqB3gCaT3ACblnq08wUUXIhLzXsI7QSLH3Rm6/r2Fqx2Ky94O4ObK8b2BOb6P8Byv16SoeEMjm5R9HVU7m8DOmmzVm2z7tTI6vB9c7WRL+wGLYH/haof2cH+42smW9heudojo9m2VTcYHOKJ2kDl+oKNqZxPc53YSe5PtoAoxH1yrdg6yqJ2DE1A7mwDVzkHApDy4lSe46EJEYj5EeCdI5HggQ9d/qHC1Q3E51AHcXDl+KDDHDxOe4/WaFBVvaGSTcrijamdj2Fmjq76T7YhWRoePgKsdrY8AFsGRwtUO7eGRcLWjq3CrmMOGG0F0h7fKJuOjHFE7yBw/2lG1szHuTbbEvpPtmAoxH1urdo6xqJ1jE1A7GwPVzjHApDy2lSe46EJEYj5OeCdI5Hg0Q9d/vHC1Q3E53gHcXDl+PDDHTxCe4/WaFBVvaGSTcqKjamcj3MsYVZ/bOamV0eGTWvHrnixcoRDuk1snbTBoXRZVQYRyYqts0jvFEVWBzMtTmYkeEZNTGXI8SULdkIlQT2tldPg0BkI9XTihEu7TpxMqbK0zHCFUZF6eKZxQKSZnOk6oG7Tg9iPq71mtjA6fxVCsZwGT7Wzh5Ex7eDaDvD9b+P14F4j+HEeIHpnj5wq/RUIxOZehXs4TfhuQeOI8piaOKy/PA+bl+cLzsh6fqXhDI/nsAuE5TjG+gEGgIfOQGsIBDZMehUUH2u/hDTx13gD102N9ftkjsreDK9cXmnheZOxiY5cYu9TYZcYuN3aFsSuNXWXsamPXGLvW2HXGrjd2g7Ebjd1k7GZjtxi71dhtxm43doexO43dZexuY/cYu9fYfcbuN/ZA7bPTCyvPSaNzF1nmLrbMXWKZu9Qyd5ll7nLL3BWWuSstc1dZ5q62zF1jmbvWMnedZe56y9wNlrkbLXM3WeZutszdYpm71TJ3m2XudsvcHZa5Oy1zd1nm7rbM3WOZu9cyd59l7n7L3AOtkz+TH1L5c+nKnyreqCKduGR5IYB4u57vXwRaizBeDFnr3/26JP5aXmW/9KVx10r/z97ry+KtpSJx1JfHWcurygl9xbSvpWryS185jWtly5Plqr5q2tbyLXmvr56WtXxrDelrpn6tXJ161NdO7Vq5urWtr5u6tbz/4Al9/dSslftPztE3dH+t4hT4S9/Y3bVyU+RCfVP31lLd4FV9c3fWUt3iaH3LlNfKdJPv9a1TWivd7bND3/afa6XLU3EO6dv/a63cVJ1p+o76a/lTeT7qO+usFZSn+qzVd9nXUtNwbuu7bWupaeoB9D2Tr6Wn8nz8n7XurV0rnObeRN9XvVYqRp+j74+s5ZVj9Uz6AaBIT/LpxQOwXi+s+jTBg62MDj/Yiv40QagfxAVQPwTYVM6nF7SHDwHvxnbt4UPgIkjqrXBc8YaJvRX+cKXAHqm9s/Fw6+RvhT/Syv9WOI5JlH4YWECPgIOLTj4qmoeBxdiF+2FHT6T7YXkUhFF/H21ldPhR+IkUhI8CT6THhJ9ItIePwU+kIHzM0RPpfpjfQdHiLsuJ9HilwJ6oPZEet5xITyRwIt0PPJEeBxbQE0zBRT8IRmJ+EkhmDQ340/KhCgGhHwQjpcBTQDKz7aGKNzTF+CmGTuYpRzuZ+2D8U0hF/X26ldHhp+GdTCH1NLD4nxHeydAePgPvZAqpZ5iLH0GgTwkn0GfBe9g10AcvMsefA9Zekh3wfTC/C57FXZYO+PkKMb9Q2wE/b+mAX0igA8adQEo/D0zKF5iCiy5EJOYXmTtgFW9oIsfnGLq3l4R3rRSXlxzAzZXjLwFz/GXhOV6vSUE0P6i1XgEf2EmpnXthZ41fjvr7aiujw6/C1Y5ffhUYwNeEqx3aw9fgascvvyZc7RDRvdIqm4xfB5Nx10BjRub4G46qnXthfvsli7ssaufNCjG/Vat23rSonbcSUDu4E0jpN4FJ+RZTcNGFiMT8tvBOkMjxDYau/x3haofi8o4DuLly/B1gjr8rPMfrNSkq3tDIJuU9R5/t3AM7a7yqb314v5XR4ffhasdT7wOL4APhaof28AO42vHUB8LVDhHde62yyfhDR9QOMsc/clTt3APzu/pXzjcg/axROx9XiPmTWrXzsUXtfJKA2sGdQEp/DEzKT5iCiy5EJOZPhXeCRI4fMXT9nwlXOxSXzxzAzZXjnwFz/HPhOV6vSVHxhkY2KV84qnbuhp01YZXa+bKV0eEv4WonVF8Ci+Ar4WqH9vAruNoJ1VfC1Q4R3Retssn4a0fUDjLHv3FU7dwN87uYmNr5tkLM39WqnW8taue7BNQO7gRS+ltgUn7HFFx0ISIxfy+8EyRy/Iah6/9BuNqhuPzgAG6uHP8BmOM/Cs/xek2Kijc0skkZ6ajauQt21mSrvhNjVCujw6PgaierRwGL4Cfhaof28Ce42slW4VYxhw03guhGtsom458dUTvIHB/tqNq5C+Z3NrHvUvmlQsxjatXOLxa1MyYBtYM7gZT+BZiUY5iCiy5EJOaxwjtBIsfRDF3/r8LVDsXlVwdwc+X4r8Ac/014jtdrUlS8oZFNyjhH1c6duGc7ftTf31sZHf4d/2zH/x1YBH8IVzu0h3/gn+34fwhXO0R041plk/F4R9QOMscnOKp27oT5HeYs7rKonT8rxPxXrdr506J2/kpA7eBOIKX/BCblX0zBRRciEvNE4Z0gkeMEhq7/b+Fqh+LytwO4uXL8b2RD1SY7x+s1KSre0MgmpQduDxNVO3fAzpp0EPW3Zxujw7Q4Vu2kg57AImhsk612aA/JR6zaSQeNbbyHBoLoerTJJuMmMBn/T0GCMSNzvBmIOUm1cwesWUj7FndZ1E5LhZhba38rW0vb5GqH/hG32rkDqHZagEnZ2sYTXHQhIjG3Ce8EiRyb2/AHQzvzwaXiDU1xaXcAN1eOtwNzvEN4jtdrUlS8oZFNSi9H1c7tsLOmUPUmW+82Rod7w9VOQfcGFkEf4WqH9rAPXO0UqnCrmMOGG0F0vdpkk3FfR9QOMsc7HVU7t8PUTiGxN9n6VYi5f63a6WdRO/0TUDu3A9VOP2BS9m/jCS66EJGYBwjvBIkcOxm6/hmEqx2KywwO4ObK8RmAOT6j8Byv16SoeEMjm5SZHFU7t+HUTjHq78A2RocH4tVOcSCwCGYWrnZoD2fGq53izMLVDhHdTG2yyXgWR9QOMsdndVTt3IZTOwWLuyxqZ7YKMc9eq3Zms6id2RNQO7cB1c5swKScvY0nuOhCRGKeQ3gnSOQ4K0PXP0i42qG4DHIAN1eODwLm+JzCc7xek6LiDY1sUuZyVO3cinuTrRD1d3Abo8OD8W+yFQYDi2CIcLVDezgE/yZbYYhwtUNEN1ebbDKe2xG1g8zxeRxVO7fi3mTLW9xlUTvzVoh5vlq1M69F7cyXgNq5Fah25gUm5XxtPMFFFyIS8/zCO0Eix3kYuv4FhKsdissCDuDmyvEFgDm+oPAcr9ekqHhDI5uUoY6qnVtgZ41f9Q3Uw9oYHR4GVzu+GgYsgoWEqx3aw4XgasdXCwlXO0R0Q9tkk/FwR9QOMsdHOKp2boGpnVxi30C9cIWYF6lVOwtb1M4iCaidW4BqZ2FgUi7SxhNcdCEiMSvhnSCR4wiGrl8LVzsUF+0Abq4c18Ac94TneL0mRcUbGtmkpBxVOzczqZ10G6PDaQa1kwYWQUa42qE9zDConYxwtUNEl2qTTcZZR9QOMsdzjqqdmx1UO36FmINateNb1E6QgNq5Gah2fGBSBo6oHSTmRYV3gkSOOYaufzHhaofispgDuLlyfDFgji8uPMfrNSkq3tDIJmUJR9XOTbCzJl/1nWxLtjE6vCRc7eSDJYFFsJRwtUN7uBRc7eSDpYSrHSK6Jdpkk/HSjqgdZI4v46jauQmmdvKJfSfbshViXq5W7SxrUTvLJaB2bgKqnWWBSblcG09w0YWIxLy88E6QyHEZhq5/BeFqh+KyggO4uXJ8BWCOryg8x+s1KSre0MgmZSVH1c6NOLWTjvq7chujwyvj1U56ZWARrCJc7dAeroJXO+lVhKsdIrqV2mST8aqOqB1kjq/mqNq5Ead2UhZ3WdTO6hViXqNW7axuUTtrJKB2bgSqndWBSblGG09w0YWIxLym8E6QyHE1hq5/LeFqh+KylgO4uXJ8LWCOry08x+s1KSre0MgmZR1H1c4NuN8uWvVsZ902RofXhaudMFgXWATrCVc7tIfrwdVOGKwnXO0Q0a3TJpuM13dE7SBzfANH1c4NuF9AmdiznQ0rxLxRrdrZ0KJ2NkpA7dwAVDsbApNyozae4KILEYl5Y+GdIJHjBgxd/ybC1Q7FZRMHcHPl+CbAHN9UeI7Xa1JUvKGRTcpmjqqd62FnTbEU9XfzNkaHN4ernWJpc2ARbCFc7dAebgFXO8XSFsLVDhHdZm2yyXhLR9QOMse3clTtXA9TO8XQ4i6L2tm6Qsz5WrWztUXt5BNQO9cD1c7WwKTMt/EEF12ISMwF4Z0gkeNWDF1/UbjaobgUHcDNleNFYI6HwnO8XpOi4g2NbFJKjqqd62Bnja56tlNuY3S4DFc7OigDi2Ab4WqH9nAbuNrRwTbC1Q4RXalNNhlv64jaQeb4do6qnetgakcn9mxn+wox71Crdra3qJ0dElA71wHVzvbApNyhjSe46EJEYt5ReCdI5LgdQ9e/k3C1Q3HZyQHcXDm+EzDHdxae4/WaFBVvaGSTsoujauda3G8XrVI7u7YxOrwrXO0Ugl2BRbCbcLVDe7gbXO0Ugt2Eqx0iul3aZJPx7o6oHWSO7+Go2rkW99tFE1M7e1aIea9atbOnRe3slYDauRaodvYEJuVebTzBRRciEvPewjtBIsc9GLr+fYSrHYrLPg7g5srxfYA5vq/wHK/XpKh4QyOblP0cVTvX4L6B2o/6u38bo8P7w9WO7+8PLIIDhKsd2sMD4GrH9w8QrnaI6PZrk03GBzqidpA5fpCjaucamNrxcxZ3WdTOwRViPqRW7RxsUTuHJKB2rgGqnYOBSXlIG09w0YWIxHyo8E6QyPEghq7/MOFqh+JymAO4uXL8MGCOHy48x+s1KSre0Mgm5QhH1c7VsLMmXaV2jmxjdPhIuNpJ+0cCi+Ao4WqH9vAouNpJ+0cJVztEdEe0ySbjox1RO8gcP8ZRtXM1TO2kE1M7x1aI+bhatXOsRe0cl4DauRqodo4FJuVxbTzBRRciEvPxwjtBIsdjGLr+E4SrHYrLCQ7g5srxE4A5fqLwHK/XpKh4QyOblJMcVTtXwc6aQEf9PbmN0eGT4Won0CcDi+AU4WqH9vAUuNoJqnCrmMOGG0F0J7XJJuNTHVE7yBw/zVG1cxVM7QTK4i6L2jm9Qsxn1Kqd0y1q54wE1M5VQLVzOjApz2jjCS66EJGYzxTeCRI5nsbQ9Z8lXO1QXM5yADdXjp8FzPGzhed4vSZFxRsa2aSc46jauRJ21uRU1N9z2xgdPheudnLqXGARnCdc7dAengdXOzl1nnC1Q0R3TptsMj7fEbWDzPELHFU7V8LUTrZscZdF7VxYIeaLatXOhRa1c1ECaudKoNq5EJiUF7XxBBddiEjMFwvvBIkcL2Do+i8RrnYoLpc4gJsrxy8B5vilwnO8XpOi4g2NbFIuc1TtXIH7loKqb6C+vI3R4cvhaqdQuhxYBFcIVzu0h1fA1U6hdIVwtUNEd1mbbDK+0hG1g8zxqxxVO1fgvqUgsW+gvrpCzNfUqp2rLWrnmgTUzhVAtXM1MCmvaeMJLroQkZivFd4JEjlexdD1Xydc7VBcrnMAN1eOXwfM8euF53i9JkXFGxrZpNzgqNq5HHbWeFXPdm5sY3T4Rrja8dSNwCK4SbjaoT28Ca52PHWTcLVDRHdDm2wyvtkRtYPM8VscVTuX476BOrFnO7dWiPm2WrVzq0Xt3JaA2rkcqHZuBSblbW08wUUXIhLz7cI7QSLHWxi6/juEqx2Kyx0O4ObK8TuAOX6n8Byv16SoeEMjm5S7HFU7l+HOmmLU37vbGB2+G652VPFuYBHcI1zt0B7eA1c7qniPcLVDRHdXm2wyvtcRtYPM8fscVTuXwdSOKljcZVE791eI+YFatXO/Re08kIDaAZ5A+n5gUj7QxhNcdCEiMT8ovBMkcryPoet/SLjaobg85ABurhx/CJjjDwvP8XpNioo3NLJJecRRtXMp7KzJVr3J9mgbo8OPwtVOtvQosAgeE652aA8fg6udbOkx4WqHiO6RNtlk/LgjageZ4084qnYuxX1uJ7E32Z6sEPNTtWrnSYvaeSoBtXMpUO08CUzKp9p4gosuRCTmp4V3gkSOTzB0/c8IVzsUl2ccwM2V488Ac/xZ4Tler0lR8YZGNinPOap2LoGdNbrqO9meb2N0+Hm42tH6eWARvCBc7dAevgBXO7oKt4o5bLgRRPdcm2wyftERtYPM8ZccVTuX4N5kS+w72V6uEPMrtWrnZYvaeSUBtXMJUO28DEzKV9p4gosuRCTmV4V3gkSOLzF0/a8JVzsUl9ccwM2V468Bc/x14Tler0lR8YZGNilvOKp2Lsa9jFH1uZ032xgdfrMNv+5bwhUK4X4r0nmA1mVRFUQob7TJJr23HVEVyLx8h5noETF5hyHHkyTUi5gI9d02RoffZSDU94QTKuF+bzqhwtZ63xFCReblB8IJlWLygeOEemErbj+i/n7YxujwhwzF+iEw2T4STs60hx8xyPuPhN+Pd4HoP3aE6JE5/onwWyQUk08Y6uVT4bcBiSc+ZWriuPLyU2BefiY8L+vxmYo3NJLPPhee4xTjzxkEGjIPqSEc0DDpUVh0oP0e2sBT5w1QPz3W55c9Ins7uHL9hYnnl8a+Mva1sW+MfWvsO2PfG/vB2I/GRhobZewnYz8bG23sF2NjjI019qux34yNM/a7sT+MjTc2wdifxv4yNtHY38S77cYHYz3bG6qfk35ReU4anfvSMveVZe5ry9w3lrlvLXPfWea+t8z9YJn70TI30jI3yjL3k2XuZ8vcaMvcL5a5MZa5sZa5Xy1zv1nmxlnmfrfM/WGZG2+Zm2CZ+9My95dlbqJl7m/LHCVX7VwPy1zP9smfyQ+p/Ll05U8Vb1SRTlyy/AJAvF3P978ErUUYv4Ks9e9+fR1/La+yX/qbuGul/2fv9bfx1lKROOrv4qzlVeWE/n7a11I1+aV/mMa1suXJclX/OG1r+Za81yOnZS3fWkN61NSvlatTj/qnqV0rV7e29c9Tt5b3HzyhR0/NWrn/5Bz9S/fXKk6Bv/SY7q6VmyIX6rHdW0t1g1f1r91ZS3WLo/VvU14r002+1+OmtFa622eH/v0/10qXp+Ic0n/811q5qTrT9Pj6a/lTeT7qCXXWCspTfdbqP+1rqWk4t/VftrXUNPUAeuLka+lp7Cf037VrhdPcm2jquSJrpWL0ObpHZC2vHKtn0j3b3Xx60bMd1euFVZ8maGxndJgWR9316nK+ERdA3QTYVM6nF7SH5CP20wRhFW4VcyT5VjiueMPE3gpvrhRYS+2djeb2yd8Kb2nnfyscxyRKNwMLqAUcXHTyUdE0A4uxC3ezoydSD1geBWHU39Z2Rodb4SdSELYCT6Q24SfSP7fN4CdSELY5eiL1gPkdFC3uspxI7ZUC66g9kdotJ1JHAidSD+CJ1A4soA6m4KIfBCMx9wKSWUMD/rRsqhAQ+kEwUgr0BpKZbQ9VvKEpxr0ZOpnejnYyDTD+KaSi/vZpZ3S4D7yTKaT6AIu/r/BOhvawL7yTKaT6Mhc/gkB7CyfQTvAedg30wYvM8X7I+1oNyXXADTC/C57FXZYOuH+FmAfUdsD9LR3wgAQ6YNwJpHR/YFIOYAouuhCRmGdg7oBVvKGJHPsxdG8zCu9aKS4zOoCbK8dnBOb4TMJzvF6Tgmh+UGsNBB/YSamdv2FvjfnlqL8ztzM6PDNc7fjlmYEBnEW42qE9nAWudvzyLMLVDhHdwHbZZDwrmIy7BhozMsdnc1Tt/A37jIdfsrjLonZmrxDzHLVqZ3aL2pkjAbWDO4GUnh2YlHO08wQXXYhIzIOEd4JEjrMxdP1zClc7FJc5HcDNleNzAnN8LuE5Xq9JUfGGRjYpgx19tjMRdtZ4Vd/6MKSd0eEhcLXjqSHAIphbuNqhPZwbrnY8NbdwtUNEN7hdNhnP44jaQeb4vI6qnYkwtVP9K+cbkH7WqJ35KsQ8f63amc+iduZPQO1MBKqd+YBJOX87T3DRhYjEvIDwTpDIcV6Grn9B4WqH4rKgA7i5cnxBYI4PFZ7j9ZoUFW9oZJMyzFG18xfsrAmr1M5C7YwOLwRXO6FaCFgEw4WrHdrD4XC1E6rhwtUOEd2wdtlkPMIRtYPM8YUdVTt/wdROMTG1s0iFmFWt2lnEonZUAmrnL6DaWQSYlKqdJ7joQkRi1sI7QSLHhRm6fk+42qG4eA7g5spxD5jjKeE5Xq9JUfGGRjYpaUfVzp+wsyZb9Z0YmXZGhzNwtZPVGWARZIWrHdrDLFztZKtwq5jDhhtBdOl22WScc0TtIHPcd1Tt/AlTO9nEvkslqBDzorVqJ7ConUUTUDt/AtVOAEzKRdt5gosuRCTmxYR3gkSOPkPXv7hwtUNxWdwB3Fw5vjgwx5cQnuP1mhQVb2hkk7Kko2pnAu7Zjh/1d6l2RoeXwj/b8ZcCFsHSwtXOP0HHP9vxlxaudojolmyXTcbLOKJ2kDm+rKNqZwJM7YQ5i7ssame5CjEvX6t2lrOoneUTUDsTgGpnOWBSLt/OE1x0ISIxryC8EyRyXJah619RuNqhuKzoAG6uHF8RmOMrCc/xek2Kijc0sklZ2VG1Mx521qSDqL+rtDM6vApc7aSDVYBFsKpwtUN7uCpc7aSDVYWrHSK6ldtlk/FqjqgdZI6v7qjaGQ9TO2nf4i6L2lmjQsxr1qqdNSxqZ80E1M54oNpZA5iUa7bzBBddiEjMawnvBIkcV2fo+tcWrnYoLms7gJsrx9cG5vg6wnO8XpOi4g2NbFLWdVTt/AE7awpVb7Kt187o8HpwtVPQ6wGLYH3haof2cH242ilU4VYxhw03gujWbZdNxhs4onaQOb6ho2rnD5jaKST2JttGFWLeuFbtbGRROxsnoHb+AKqdjYBJuXE7T3DRhYjEvInwTpDIcUOGrn9T4WqH4rKpA7i5cnxTYI5vJjzH6zUpKt7QyCZlc0fVzu84tVOM+rtFO6PDW+DVTnELYBFsKVzt0B5uiVc7xS2Fqx0ius3bZZPxVo6oHWSOb+2o2vkdp3YKFndZ1E6+QsyFWrWTt6idQgJq53eg2skDk7LQzhNcdCEiMReFd4JEjlszdP2hcLVDcQkdwM2V4yEwx0vCc7xek6LiDY1sUsqOqp1xuDfZClF/t2lndHgb/JtshW2ARbCtcLVDe7gt/k22wrbC1Q4RXbldNhlv54jaQeb49o6qnXG4N9nyFndZ1M4OFWLesVbt7GBROzsmoHbGAdXODsCk3LGdJ7joQkRi3kl4J0jkuD1D17+zcLVDcdnZAdxcOb4zMMd3EZ7j9ZoUFW9oZJOyq6Nq5zfcbxet+gbq3doZHd4NrnZ8tRuwCHYXrnZoD3eHqx1f7S5c7RDR7doum4z3cETtIHN8T0fVzm8wtZNL7Buo96oQ8961amcvi9rZOwG18xtQ7ewFTMq923mCiy5EJOZ9hHeCRI57MnT9+wpXOxSXfR3AzZXj+wJzfD/hOV6vSVHxhkY2Kfs7qnZ+ZVI7B7QzOnwAg9o5AFgEBwpXO7SHBzKonQOFqx0iuv3bZZPxQY6oHWSOH+yo2vnVQbVzSIWYD61VO4dY1M6hCaidX4Fq5xBgUh7qiNpBYj5MeCdI5HgwQ9d/uHC1Q3E53AHcXDl+ODDHjxCe4/WaFBVvaGSTcqSjamcs7KzJV30n21HtjA4fBVc7+eAoYBEcLVzt0B4eDVc7+eBo4WqHiO7IdtlkfIwjageZ48c6qnbGwtROPrHvZDuuQszH16qd4yxq5/gE1M5YoNo5DpiUx7fzBBddiEjMJwjvBIkcj2Xo+k8UrnYoLic6gJsrx08E5vhJwnO8XpOi4g2NbFJOdlTtjMGpnXTU31PaGR0+Ba920qcAi+BU4WqH9vBUvNpJnypc7RDRndwum4xPc0TtIHP8dEfVzhic2klZ3GVRO2dUiPnMWrVzhkXtnJmA2hkDVDtnAJPyzHae4KILEYn5LOGdIJHj6Qxd/9nC1Q7F5WwHcHPl+NnAHD9HeI7Xa1JUvKGRTcq5jqqdX3C/XbTq2c557YwOnwdXO2FwHrAIzheudmgPz4ernTA4X7jaIaI7t102GV/giNpB5viFjqqdX3C/XTSxZzsXVYj54lq1c5FF7VycgNr5Bah2LgIm5cXtPMFFFyIS8yXCO0EixwsZuv5LhasdisulDuDmyvFLgTl+mfAcr9ekqHhDI5uUyx1VO6NhZ02xFPX3inZGh6+Aq51i6QpgEVwpXO3QHl4JVzvF0pXC1Q4R3eXtssn4KkfUDjLHr3ZU7YyGqZ1iaHGXRe1cUyHma2vVzjUWtXNtAmpnNFDtXANMymvbeYKLLkQk5uuEd4JEjlczdP3XC1c7FJfrHcDNlePXA3P8BuE5Xq9JUfGGRjYpNzqqdn6GnTW66tnOTe2MDt8EVzs6uAlYBDcLVzu0hzfD1Y4ObhaudojobmyXTca3OKJ2kDl+q6Nq52eY2tGJPdu5rULMt9eqndssauf2BNTOz0C1cxswKW9v5wkuuhCRmO8Q3gkSOd7K0PXfKVztUFzudAA3V47fCczxu4TneL0mRcUbGtmk3O2o2vkJ99tFq9TOPe2MDt8DVzuF4B5gEdwrXO3QHt4LVzuF4F7haoeI7u522WR8nyNqB5nj9zuqdn7C/XbRxNTOAxVifrBW7TxgUTsPJqB2fgKqnQeASflgO09w0YWIxPyQ8E6QyPF+hq7/YeFqh+LysAO4uXL8YWCOPyI8x+s1KSre0Mgm5VFH1c4o3DdQ+1F/H2tndPgxuNrx/ceARfC4cLVDe/g4XO34/uPC1Q4R3aPtssn4CUfUDjLHn3RU7YyCqR0/Z3GXRe08VSHmp2vVzlMWtfN0AmpnFFDtPAVMyqfbeYKLLkQk5meEd4JEjk8ydP3PClc7FJdnHcDNlePPAnP8OeE5Xq9JUfGGRjYpzzuqdkbCzpp0ldp5oZ3R4RfgaiftvwAsgheFqx3awxfhaiftvyhc7RDRPd8um4xfckTtIHP8ZUfVzkiY2kknpnZeqRDzq7Vq5xWL2nk1AbUzEqh2XgEm5avtPMFFFyIS82vCO0Eix5cZuv7XhasdisvrDuDmyvHXgTn+hvAcr9ekqHhDI5uUNx1VOz/CzppAR/19q53R4bfgaifQbwGL4G3haof28G242gmqcKuYw4YbQXRvtssm43ccUTvIHH/XUbXzI0ztBMriLovaea9CzO/Xqp33LGrn/QTUzo9AtfMeMCnfb+cJLroQkZg/EN4JEjm+y9D1fyhc7VBcPnQAN1eOfwjM8Y+E53i9JkXFGxrZpHzsqNr5AXbW5FTU30/aGR3+BK52cuoTYBF8Klzt0B5+Clc7OfWpcLVDRPdxu2wy/swRtYPM8c8dVTs/wNROtmxxl0XtfFEh5i9r1c4XFrXzZQJq5weg2vkCmJRftvMEF12ISMxfCe8EiRw/Z+j6vxaudiguXzuAmyvHvwbm+DfCc7xek6LiDY1sUr51VO18j/uWgqpvoP6undHh7+Bqp1D6DlgE3wtXO7SH38PVTqH0vXC1Q0T3bbtsMv7BEbWDzPEfHVU73+O+pSCxb6AeWSHmUbVqZ6RF7YxKQO18D1Q7I4FJOaqdJ7joQkRi/kl4J0jk+CND1/+zcLVDcfnZAdxcOf4zMMdHC8/xek2Kijc0skn5xVG18x3srPGqnu2MaWd0eAxc7XhqDLAIxgpXO7SHY+Fqx1NjhasdIrpf2mWT8a+OqB1kjv/mqNr5DvcN1Ik92xlXIebfa9XOOIva+T0BtfMdUO2MAybl7+08wUUXIhLzH8I7QSLH3xi6/vHC1Q7FZbwDuLlyfDwwxycIz/F6TYqKNzSySfnTUbXzLe6sKUb9/aud0eG/4GpHFf8CFsFE4WqH9nAiXO2o4kThaoeI7s922WT8tyNqB5rjHW6qnW9hakcVLO6yqJ0eHZV86GioVjb0P9SqHfpH3GoHeALpHh24pOzZwRNcdCEiMTd2YMkHXXBEjg0d+IOhqYP34FLxhqa4NDmAmyvHm4A53iw8x+s1KSre0MgmpQWYN0mqnW9gZ0226k221g5Gh2lxrNrJllqBRdAGLE6uPWzrQKudbKmN+dBAEF1Lh2wybgeTcddAY0bmeIejaucb3Od2EnuTrVeFmHvXqp1eFrXTOwG18w1Q7fQCJmXvDp7gogsRibmP8E6QyLGDoevvK1ztUFz6OoCbK8f7AnO8U3iO12tSVLyhkU1KP0fVztews0ZXfSdb/w5Gh/vD1Y7W/YFFMEC42qE9HABXO7oKt4o5bLgRRNevQzYZz+CI2kHm+IyOqp2vcW+yJfadbDNViHlgrdqZyaJ2Biagdr4Gqp2ZgEk5sIMnuOhCRGKeWXgnSOQ4I0PXP4twtUNxmcUB3Fw5Pgswx2cVnuP1mhQVb2hkkzKbo2rnK9zLGFWf25m9g9Hh2Tvw684hXKEQ7jk6Jm0waF0WVUGEMluHbNIb5IiqQOblnMxEj4jJnAw5niShfslEqHN1MDo8FwOhDhZOqIR78HRCha01xBFCRebl3MIJlWIyt+OE+kUbbj+i/s7TwejwPAzFOg8w2eYVTs60h/MyyPt5hd+Pd4Ho53OE6JE5Pr/wWyQUk/kZ6mUB4bcBiScWYGriuPJyAWBeLig8L+vxmYo3NJLPhgrPcYrxUAaBhsxDaggHNEx6FBYd8Ff9m3jqvAHqp8f6/LJHZG8HV66HmXguZGy4sRHGFja2iDFlTBvzjKWMpY1ljGWN5Yz5xgJjixpbzNjixpYwtqSxpShHjC1jbFljyxlb3tgKxlY0tpKxlY2tUvvsdFjlOWl0biHL3HDL3AjL3MKWuUUsc8oypy1znmUuZZlLW+YylrmsZS5nmfMtc4FlblHL3GKWucUtc0tY5pa0zC1lmVvaMreMZW5Zy9xylrnlLXMrWOZWtMytZJlb2TK3Ssfkz+SHVP5cuvKnijeqSCcuWQ4DEG/X8/2FQGsRxuGQtf7drxHx1/Iq+6UXjrtW+n/2Xi8Sby0ViaNWcdbyqnJC62lfS9Xkl/amca1sebJc1alpW8u35L1OT8tavrWGdGbq18rVqUedndq1cnVrW+embi3vP3hC+1OzVu4/OUcH3V+rOAX+0ot2d63cFLlQL9a9tVQ3eFUv3p21VLc4Wi8x5bUy3eR7veSU1kp3++zQS/3nWunyVJxDeun/Wis3VWeaXqb+Wv5Uno962TprBeWpPmv1cva11DSc23p521pqmnoAvcLka+lp7Cf0irVrhdPcm+iVqtdKxehz9MqRtbxyrJ5JrwIU6Uk+vVgF1uuFVZ8mWLWD0eFVO9CfJgj1qrgA6tUAm8r59IL2cDXg3diuPVwNXARJvRWOK94wsbfCV68U2Bq1dzZW75j8rfA1OvjfCscxidKrAwtoDXBw0clHRbM6sBi7cK/u6Im0MiyPgjDq75odjA6vCT+RgnBN4Im0lvATifZwLfiJFIRrOXoirQzzOyha3GU5kdauFNg6tSfS2pYTaZ0ETqSVgSfS2sACWocpuOgHwUjM6wLJrKEBf1quViEg9INgpBRYD0hmtj1U8YamGK/H0Mms52gnsxKMfwqpqL/rdzA6vD68kymk1gcW/wbCOxnaww3gnUwhtQFz8SMIdD3hBLoheA+7BvrgReb4RsDaS7IDXgnmd8GzuMvSAW9cIeZNajvgjS0d8CYJdMC4E0jpjYFJuQlTcNGFiMS8KXMHrOINTeS4EUP3tpnwrpXispkDuLlyfDNgjm8uPMfrNSmI5ge11hbgAzsptbMi7Kzxy1F/t+xgdHhLuNrxy1sCA7iVcLVDe7gVXO345a2Eqx0iui06ZJPx1mAy7hpozMgczzuqdlaE+e2XLO6yqJ1ChZiLtWqnYFE7xQTUDu4EUroATMoiU3DRhYjEHArvBIkc8wxdf0m42qG4lBzAzZXjJWCOl4XneL0mRcUbGtmkbOPos50VYGeNV/WtD9t2MDq8LVzteGpbYBFsJ1zt0B5uB1c7ntpOuNohotumQzYZb++I2kHm+A6Oqp0VYH5X/8r5BqSfNWpnxwox71Srdna0qJ2dElA7uBNI6R2BSbkTU3DRhYjEvLPwTpDIcQeGrn8X4WqH4rKLA7i5cnwXYI7vKjzH6zUpKt7QyCZlN0fVzvKwsyasUju7dzA6vDtc7YRqd2AR7CFc7dAe7gFXO6HaQ7jaIaLbrUM2Ge/piNpB5vhejqqd5WF+FxNTO3tXiHmfWrWzt0Xt7JOA2sGdQErvDUzKfZiCiy5EJOZ9hXeCRI57MXT9+wlXOxSX/RzAzZXj+wFzfH/hOV6vSVHxhkY2KQc4qnaWg5012arvxDiwg9HhA+FqJ6sPBBbBQcLVDu3hQXC1k63CrWIOG24E0R3QIZuMD3ZE7SBz/BBH1c5yML+ziX2XyqEVYj6sVu0calE7hyWgdnAnkNKHApPyMKbgogsRiflw4Z0gkeMhDF3/EcLVDsXlCAdwc+X4EcAcP1J4jtdrUlS8oZFNylGOqp1lcc92/Ki/R3cwOnw0/tmOfzSwCI4RrnZoD4/BP9vxjxGudojojuqQTcbHOqJ2kDl+nKNqZ1mY32HO4i6L2jm+Qswn1Kqd4y1q54QE1A7uBFL6eGBSnsAUXHQhIjGfKLwTJHI8jqHrP0m42qG4nOQAbq4cPwmY4ycLz/F6TYqKNzSySTnFUbWzDOysSQdRf0/tYHT4VLjaSQenAovgNOFqh/bwNLjaSQenCVc7RHSndMgm49MdUTvIHD/DUbWzDMzvtG9xl0XtnFkh5rNq1c6ZFrVzVgJqB3cCKX0mMCnPYgouuhCRmM8W3gkSOZ7B0PWfI1ztUFzOcQA3V46fA8zxc4XneL0mRcUbGtmknOeo2lkadtYUqt5kO7+D0eHz4WqnoM8HFsEFwtUO7eEFcLVTqMKtYg4bbgTRndchm4wvdETtIHP8IkfVztIwvwuJvcl2cYWYL6lVOxdb1M4lCagd3Amk9MXApLyEKbjoQkRivlR4J0jkeBFD13+ZcLVDcbnMAdxcOX4ZMMcvF57j9ZoUFW9oZJNyhaNqZymc2ilG/b2yg9HhK/Fqp3glsAiuEq52aA+vwqud4lXC1Q4R3RUdssn4akfUDjLHr3FU7SyFa4gLFndZ1M61FWK+rlbtXGtRO9cloHZwJ5DS1wKT8jqm4KILEYn5euGdIJHjNQxd/w3C1Q7F5QYHcHPl+A3AHL9ReI7Xa1JUvKGRTcpNjqqdJXFvshWi/t7cwejwzfg32Qo3A4vgFuFqh/bwFvybbIVbhKsdIrqbOmST8a2OqB1kjt/mqNpZEveyU97iLovaub1CzHfUqp3bLWrnjgTUDu4EUvp2YFLewRRcdCEiMd8pvBMkcryNoeu/S7jaobjc5QBurhy/C5jjdwvP8XpNioo3NLJJucdRtbME7Kzxq76B+t4ORofvhasdX90LLIL7hKsd2sP74GrHV/cJVztEdPd0yCbj+x1RO8gcf8BRtbMEzO9cYt9A/WCFmB+qVTsPWtTOQwmoHdwJpPSDwKR8iCm46EJEYn5YeCdI5PgAQ9f/iHC1Q3F5xAHcXDn+CDDHHxWe4/WaFBVvaGST8pijamdxJrXzeAejw48zqJ3HgUXwhHC1Q3v4BIPaeUK42iGie6xDNhk/6YjaQeb4U46qncUdVDtPV4j5mVq187RF7TyTgNrBnUBKPw1MymccUTtIzM8K7wSJHJ9i6PqfE652KC7POYCbK8efA+b488JzvF6TouINjWxSXnBU7SwGO2vyVd/J9mIHo8MvwtVOPngRWAQvCVc7tIcvwdVOPnhJuNohonuhQzYZv+yI2kHm+CuOqp3FYH7nE/tOtlcrxPxardp51aJ2XktA7eBOIKVfBSbla0zBRRciEvPrwjtBIsdXGLr+N4SrHYrLGw7g5srxN4A5/qbwHK/XpKh4QyOblLccVTuL4tROOurv2x2MDr+NVzvpt4FF8I5wtUN7+A5e7aTfEa52iOje6pBNxu86onaQOf6eo2pnUVxDnLK4y6J23q8Q8we1aud9i9r5IAG1gzuBlH4fmJQfMAUXXYhIzB8K7wSJHN9j6Po/Eq52KC4fOYCbK8c/Aub4x8JzvF6TouINjWxSPnFU7QSwsyaserbzaQejw5/C1U4YfAosgs+Eqx3aw8/gaicMPhOudojoPumQTcafO6J2kDn+haNqJ4D5HSb2bOfLCjF/Vat2vrSona8SUDu4E0jpL4FJ+RVTcNGFiMT8tfBOkMjxC4au/xvhaofi8o0DuLly/Btgjn8rPMfrNSkq3tDIJuU7R9WODztriqWov993MDr8PVztFEvfA4vgB+Fqh/bwB7jaKZZ+EK52iOi+65BNxj86onaQOT7SUbXjw/wuhhZ3WdTOqAox/1SrdkZZ1M5PCagd3Amk9ChgUv7EFFx0ISIx/yy8EyRyHMnQ9Y8WrnYoLqMdwM2V46OBOf6L8Byv16SoeEMjm5QxjqqdHOys0VXPdsZ2MDo8Fq52dDAWWAS/Clc7tIe/wtWODn4VrnaI6MZ0yCbj3xxRO8gcH+eo2snB/NaJPdv5vULMf9Sqnd8tauePBNQO7gRS+ndgUv7BFFx0ISIxjxfeCRI5jmPo+icIVzsUlwkO4ObK8QnAHP9TeI7Xa1JUvKGRTcpfjqqdLOysKVSpnYkdjA5PhKudQjARWAR/C1c7tId/w9VOIfhbuNohovurQzYZN/RyQ+0gc7wHEHOSaicLy/dCYmqnZ69//2zs1VCtbOh/qFU79I+41Q7uBFK6Zy9cUjb24gkuuhCRmJvA5IMuOCLHHr3wB0NzL96DS8UbmuLS7ABurhxvBuZ4i/Acr9ekqHhDI5uUVmDeJKl2MrCzxvej/rb1YnSYFseqHd9vAxZBO7A4ufawvRda7fh+O/OhgSC61l6yybjDEbWDzPFejqqdDEzt+DmLuyxqp3eFmPvUqp3eFrXTJwG1kwGqnd7ApOzTiye46EJEYu4rvBMkcuzF0PV3Clc7FJdOB3Bz5XgnMMf7Cc/xek2Kijc0sknp76jaScPOmnSV2hnQi9HhAXC1k/YHAItgBuFqh/ZwBrjaSfszCFc7RHT9e8km4xkdUTvIHJ/JUbWThqmddGJqZ2CFmGeuVTsDLWpn5gTUThqodgYCk3LmXjzBRRciEvMswjtBIseZGLr+WYWrHYrLrA7g5srxWYE5PpvwHK/XpKh4QyOblNkdVTsp2FkT6Ki/c/RidHgOuNoJ9BzAIhgkXO3QHg6Cq52gCreKOWy4EUQ3ey/ZZDynI2oHmeNzOap2UjC1EyiLuyxqZ3CFmIfUqp3BFrUzJAG1kwKqncHApBzSiye46EJEYp5beCdI5DgXQ9c/j3C1Q3GZxwHcXDk+DzDH5xWe4/WaFBVvaGSTMp+jaseDnTU5FfV3/l6MDs8PVzs5NT+wCBYQrnZoDxeAq52cWkC42iGim6+XbDJe0BG1g8zxoY6qHQ+mdrJli7ssamdYhZgXqlU7wyxqZ6EE1I4HVDvDgEm5UC+e4KILEYl5uPBOkMhxKEPXP0K42qG4jHAAN1eOjwDm+MLCc7xek6LiDY1sUhZxVO1o3LcUVH0DterF6LCCq51CSQGLQAtXO7SHGq52CiUtXO0Q0S3SSzYZe46oHWSOpxxVOxr3LQWJfQN1ukLMmVq1k7aonUwCakcD1U4amJSZXjzBRRciEnNWeCdI5Jhi6PpzwtUOxSXnAG6uHM8Bc9wXnuP1mhQVb2hkkxI4qnYU7Kzxqp7tLNqL0eFF4WrHU4sCi2Ax4WqH9nAxuNrx1GLC1Q4RXdBLNhkv7ojaQeb4Eo6qHYX7kuLEnu0sWSHmpWrVzpIWtbNUAmpHAdXOksCkXKoXT3DRhYjEvLTwTpDIcQmGrn8Z4WqH4rKMA7i5cnwZYI4vKzzH6zUpKt7QyCZlOUfVziK4s6YY9Xf5XowOLw9XO6q4PLAIVhCudmgPV4CrHVVcQbjaIaJbrpdsMl7REbWDzPGVHFU7i+C+cb1gcZdF7axcIeZVatXOyha1s0oCagd4AumVgUm5Si+e4KILEYl5VeGdIJHjSgxd/2rC1Q7FZTUHcHPl+GrAHF9deI7Xa1JUvKGRTcoajqqdhWFnTbbqTbY1ezE6vCZc7WRLawKLYC3haof2cC242smW1hKudojo1uglm4zXdkTtIHN8HUfVzsK4z+0k9ibbuhViXq9W7axrUTvrJaB2FgaqnXWBSbleL57gogsRiXl94Z0gkeM6DF3/BsLVDsVlAwdwc+X4BsAc31B4jtdrUlS8oZFNykaOqp0RsLNGV30n28a9GB3eGK52tN4YWASbCFc7tIebwNWOrsKtYg4bbgTRbdRLNhlv6ojaQeb4Zo6qnRG4N9kS+062zSvEvEWt2tncona2SEDtjACqnc2BSblFL57gogsRiXlL4Z0gkeNmDF3/VsLVDsVlKwdwc+X4VsAc31p4jtdrUlS8oZFNSt5RtTMc9zJG1ed2Cr0YHS70wq9bFK5QCHex16QNBq3LoiqIUPK9ZJNe6IiqQOZliZnoETEpMeR4koS6EBOhlnsxOlxmINRthBMq4d5mOqHC1trWEUJF5uV2wgmVYrKd44Q6rAO3H1F/t+/F6PD2DMW6PTDZdhBOzrSHOzDI+x2E3493geh3dITokTm+k/BbJBSTnRjqZWfhtwGJJ3ZmauK48nJnYF7uIjwv6/GZijc0ks92FZ7jFONdGQQaMg+pIYw+Fos2WrtRfTZVLImOcTdgQHtG/Ny9QjR71D4opP/h0Jq5PSpz0YF+ULgbMIK7d3+t4hTW0nuAb4Y3N9ifXjdM5X5Oye8GxqTcHbgn0SLaszYZ9+w1eZXVJh4yWabgq54SmD2BSbxXL1gyqOie7tWNYo7r+x7AfUDu6d5TsadT+lnRPd07Qpptkf2M7qmKN/TE/17PK5Z1KlPKZVQ2n86E2ZQXejkVpjNlbRz2grTZmnIx7Ye+lyp7Oa84EevfPznWRWxdB8nEhkkHCF3vY/7c19h+vf49QZO677JvJO7aT3leLkX54YdKp0NzBHheWEirosoXvVKQ1kE57aVTxbBYMLmU12VVzheDsv/vWlF/9+/F6PD+ll4zrvP7A3vsA4Tfd6E9PMDSa8bdwwPAHUFjQzLvs+3L9DpIA3Z/qzqCA6MNAPqGADCQOnoaRJ2eSp+L3Um+A6dBhE5p0w8EFvNB4Pawa18PinQuU5sLml6L0KqsAk/lVa6YzRWC0Cv4+XKqnEmFqWnd1yklO3JfD2ba14Mr+5qkrkWSUZQ8D6mcyIdSDXIQxoEMdy8OFH4nf1qLQ00F7rg+Hib8zhcl5mEMd7UPZyKFw/+DbFW8oQ9l2osjmPbiiBgHz5R85sqLDwf9r3LKFO+rceXAR4Nk88C+FdxoLgXGWyP38P+Xe56HMN3zPPK/FI6KN/RhTIR45H8onCksM8V7qOTzkQzE8DGYGLpG01TGbGoambiYj+olk2CQsYjm5VGWe9tTG58p7TkyPkdH70umUqY2wpwuh+VUJhd4BZ1NZbPldDmX9dNhOZPOh7mSTudTXlDKqbL2S+Zub6qYy5aDsJgtR0lbh6lUOgwKRZ3xsvmC8sNUXpXTuZQRv2EqF4YpP5vNp1Jh1i/7gRGsRgb7KpPLBSrrpQKPKz5HR5Qm6lCY0p2N6JquHArHuHgoHMN8KBzDcCh8IuRQqJvEuX8++1pGks6xQg+FT5hI51jAoTCl23zI+Bwn9FDgis9x/x/dfjy+cvvxBNvtRxVv1L33j3wOEnct4K1Mlpf4uvYQ/cYD1x7GXetE4fGggjmR4WA/ianJOYnxtugJTHtxMtNenMx4W5QrLz4TfluUKwc+d+C26IkMt0WB8dafT78tWjv+4W/UnkQbv1M4FfCJTIR4CqMCJp9PYSCGLxy5LXoisCk6tZdMgvmCSWGdmsBtUWR8TgMq4M+BCpgrPqdZ4oN+wQsZn9OZ+PN0wD5M6U4Nch/OYNqHM7pxm1zyQW5xF5bH0SbhTBebhDOZm4QzGZqELxNqEmK+HQslubOAayGbhC+ZDqGzutEkxH3LFhmfs3vhDnZkk8AVn7MZ7zwNNWsMbcDzxjnCX8okzOcw8OW5gDz/91tvyyy4yb9zGXCfJzzehPk8BtznC8dN/p3PgPsC4bjJvwsYcF8oHDf5dyED7ouE4yb/LmLAfbFw3OTfxQy4LxGOm/y7hAH3pQ6cY5cy4L5MOG7y7zIG3Jc7EO/LGXBfIRw3+XcFA+4rheMm/65kwH2VcNzk31UMuK92oL6vZsB9jXDc5N81DLivFY6b/LuWAfd1wnGTf9cx4L5eOG7y73oG3Dc4wGs3MOC+UThu8u9GBtw3CcdN/t3EgPtm4bjJv5sZcN/iQH3fwoD7VuG4yb9bGXDf5kC8b2PAfbtw3OTf7Qy473Ag3ncw4L5TOG7y704G3HcJx03+3cWA+27huMm/uxlw3+NAfd/DgPte4bjJv3sZcN/nQLzvY8B9v3Dc5N/9DLgfcCDeDzDgflA4bvLvQQbcDwnHTf49xID7YeG4yb+HGXA/4kB9P8KA+1HhuMm/RxlwPyYcN/n3GAPuxx3I88cZcD8hHDf59wQD7icdiPeTDLifEo6b/HuKAffTDsT7aQbczwjHTf49w4D7WeG4yb9nGXA/Jxw3+fccA+7nheMm/55nwP2CcNzk3wsMuF90gM9fZMD9knDc5N9LDLhfFo6b/HuZAfcrwnGTf68w4H7Vgfp+lQH3a8Jxk3+vMeB+3YF4v86A+w3huMm/NxhwvykcN/n3JgPut4TjJv/eYsD9tnDc5N/bDLjfcYDX3mHA/a5w3OTfuwy433Mg3u8x4H5fOG7y730G3B8Ix03+fcCA+0MH8vxDBtwfCcdN/n3EgPtj4bjJv48ZcH8iHDf59wkD7k+F4yb/PmXA/Zlw3OTfZwy4PxeOm/z7nAH3F8Jxk39fMOD+Ujhu8u9LBtxfOdC3fMWA+2vhuMm/rxlwfyMcN/n3DQPubx3I828ZcH8nHDf59x0D7u+F4yb/vmfA/YNw3OTfDwy4f3Sgvn9kwD1SOG7ybyQD7lEOxHsUA+6fhOMm/35iwP2zcNzk388MuEc7kOejGXD/Ihw3+fcLA+4xDsR7DAPuscJxk39jGXD/6kC8f2XA/Ztw3OTfbwy4xwnHTf6NY8D9u3Dc5N/vDLj/EI6b/PuDAfd44bjJv/EMuCc4wOcTGHD/KRw3+fcnA+6/hOMm//5iwD3RgTyfyID7b+G4yb+/GXA39JaNm/wjQ+PuIRw3+deDAXdP4bjJv54MuBuF4yb/GhlwNwnHTf41MeBuFo6bzrFmBtwtwnGTfy0MuFuF4yb/WhlwtwnHTf61MeBuF46b/GtnwN3hAK91MODuJRw3+deLAXdv4bjJv94MuPs4kOd9GHD3FY6b/OvLgLvTgXh3MuDuJxw3+dePAXd/4bjJv/4MuAc4kOcDGHDPIBw3+TcDA+4ZHYj3jAy4ZxKOm/ybiQH3QOG4yb+BDLhndiDPZ2bAPYtw3OTfLAy4Z3Ug3rMy4J5NOG7ybzYG3LMLx03+zc6Aew4H8nwOBtyDhOMm/wYx4J5TOG7yb04G3HMJx03+zcWAe7Bw3OTfYAbcQ4TjJv+GMOCeWzhu8m9uBtzzCMdN/s3DgHteB87veRlwzyccN/k3HwPu+R2I9/wMuBcQjpv8W4AB94LCcZN/CzLgHiocN/k3lAH3MOG4yb9hDLgXEo6b/FuIAfdw4bjJv+EMuEcIx03+jWDAvbAD5/fCDLgXEY6b/FuEAbcSjpv8Uwy4tQN5rhlwe8Jxk38eA+6UcNzkX4oBd9qBPE8z4M4Ix03+ZRhwZx2Id5YBd044bvIvx4DbF46b/PMZcAfCcZN/AQPuRYXjJv8WZcC9mHDc5N9iDLgXd4DPF2fAvYRw3OTfEgy4lxSOm/xbkgH3Ug7k+VIMuJcWjvsf/xhwL+NAvJdhwL2scNzk37IMuJdzIN7LMeBeXjhu8m95BtwrCMdN/q3AgHtFB/J8RQbcKwnHTf6txIB7ZeG4yb+VGXCvIhw3+bcKA+5VHajvVRlwryYcN/m3GgPu1YXjJv9WZ8C9hgN5vgYD7jWF4yb/1mTAvZZw3OTfWgy41xaOm/xbmwH3OsJxk3/rMOBeVzhu8m9dBtzrCcdN/q3HgHt9B86x9RlwbyAcN/m3AQPuDR2I94YMuDcSjpv824gB98bCcZN/GzPg3kQ4bvJvEwbcmzpQ35sy4N5MOG7ybzMG3Js7EO/NGXBvIRw3+bcFA+4tHYj3lgy4txKOm/zbigH31g7Ee2sG3HnhuMm/PAPuggPxLjDgLgrHTf4VGXCHwnGTfyED7pIDeV5iwF0Wjpv8KzPg3kY4bvJvGwbc2wrHTf5ty4B7O+G4yb/tGHBvLxw3+bc9A+4dHODzHRhw7ygcN/m3IwPunYTjJv92YsC9s3Dc5N/ODLh3caC+d2HAvatw3OTfrgy4dxOOm/zbjQH37sJxk3+7M+DeQzhu8m8PBtx7CsdN/u3JgHsvB/h8LwbcewvHTf7tzYB7HwfivQ8D7n2F4yb/9mXAvZ8D8d6PAff+wnGTf/sz4D7AgXgfwID7QOG4yb8DGXAfJBw3+XcQA+6DheMm/w5mwH2IA/V9CAPuQ4XjJv8OZcB9mAPxPowB9+HCcZN/hzPgPkI4bvLvCAbcRzqQ50cy4D5KOG7y7ygG3Ec7EO+jGXAfIxw3+XcMA+5jHYj3sQy4jxOOm/w7jgH38cJxk3/HM+A+QThu8u8EBtwnOlDfJzLgPkk4bvLvJAbcJwvHTf6dzID7FAfy/BQG3KcKx03+ncqA+zQH4n0aA+7TheMm/05nwH2GA/E+gwH3mcJxk39nMuA+Szhu8u8sBtxnC8dN/p3NgPsc4bjJv3MYcJ8rndeMf+cy4D7PAT4/jwH3+cJxk3/nM+C+QDhu8u8CBtwXCsdN/l3IgPsiB+r7IgbcFwvHTf5dzID7EuG4yb9LGHBfKhw3+XcpA+7LhOMm/y5jwH25A7x2OQPuK4TjJv+uYMB9pXDc5N+VDLivciDPr2LAfbVw3OTf1Qy4rxGOm/y7hgH3tcJxk3/XMuC+Tjhu8u86BtzXC8dN/l3PgPsGB/j8BgbcNwrHTf7dyID7JgfifRMD7puF4yb/bmbAfYsD8b6FAfetwnGTf7cy4L7NgXjfxoD7duG4yb/bGXDf4UC872DAfadw3OTfnQy47xKOm/y7iwH33cJxk393M+C+Rzhu8u8eBtz3CsdN/t3LgPs+B/j8Pgbc9wvHTf7dz4D7AQfi/QAD7geF4yb/HmTA/ZAD8X6IAffDwnGTfw8z4H7EgXg/woD7UeG4yb9HGXA/5kC8H2PA/bhw3OTf4wy4nxCOm/x7ggH3kw7k+ZMMuJ8Sjpv8e4oB99PCcZN/TzPgfsaBPH+GAfezwnGTf88y4H7OgXg/x4D7eeG4yb/nGXC/IBw3+fcCA+4XheMm/15kwP2SA/X9EgPul4XjJv9eZsD9inDc5N8rDLhfFY6b/HuVAfdrDtT3awy4XxeOm/x7nQH3Gw7E+w0G3G8Kx03+vcmA+y0H4v0WA+63heMm/95mwP2OA/F+hwH3u8Jxk3/vMuB+z4F4v8eA+33huMm/9xlwf+BAvD9gwP2hcNzk34cMuD8Sjpv8+4gB98fCcZN/HzPg/kQ4bvLvEwbcnwrHTf59yoD7M+G4yb/PGHB/Lhw3+fc5A+4vhOMm/75gwP2lcNzk35cMuL8Sjpv8+4oB99fCcZN/XzPg/kY4bvLvGwbc3wrHTf59y4D7O+G4yb/vGHB/Lxw3+fc9A+4fhOMm/35gwP2jcNzk348MuEcKx03+jWTAPUo4bvJvFAPun4TjJv9+YsD9s3Dc5N/PDLhHC8dN/o1mwP2LcNzk3y8MuMcIx03+jWHAPVY4bvJvLAPuX4XjJv9+ZcD9W2/cWk1mjf4R7NGB3o/fgPGK+juuN6PD43rj1/0dGEAu3L/3nrTBoHXZHkpyPIz9A0wuXaNnLf6s56fTvpcq5HOezqcLuWw5CIv5sucXvDCvSr7Khjkvn/LzfloXinlfFcK8l8mF+XQpqz1kLo2PrGV+YlEFZZXP+PlcySykSspcFPxSOevlC8W08kKtdSlt/p9XCtNBIczqQtb89ExBm//OFmuvUAyyuZz5L4thIZ3WmcDLhwWd0wQ+XfZzqYIupIyrqVym7JXKaRWYzTAwy2YLUoXSh5W8nGwP00G+ZJYtpLKpUsE4W/Yy2Xxg/qtitpTKpgu0v5mUV86mU2bfPJVK58vFdMZXgecX0+kPgXs4QfihRP5NYKiXP4XjJv/+ZMD9l3Dc5N9fDLgnCsdN/k1kwP23cNzk398MuBv6yMZN/pGhcfcQjpv868GAu6dw3ORfTwbcjcJxk3+NDLibhOMm/5oYcDcLx03+NTPgbhGOm/xrYcDdKhw3+dfKgLtNOG7yr40Bd7tw3ORfOwPuDuG4yb8OBty9hOMm/3ox4O4tHDf515sBdx/huMm/Pgy4+wrHTf71ZcDdKRw3+dfJgLufcNzkXz8G3P2F4yb/+jPgHiAcN/k3gAH3DMJxk38zMOCesY+bD3VnBMYr6u9MfRgdnqkPft2BwABy4R7YZ9IGg9Zl8ZUevo5nuIk9M5hcukbtA8m4DzqRuTRLH9yDUlusdblcLOfCXKmc8rxiLlfIpYqZTKFYNA+sCwVtpkI/MBtgZlXO/BQvl/VTfqpYVAWdDcv/PDAlvLV7qFU2l8kG+bL5AWZPPKV1qlQuG/xmvTCdz6pMIeMVsqkw65cNLF00OxBmcl45XQo87U0APtSdVfihRP7NynAozSYcN/k3GwPu2YXjJv9mZ8A9h3Dc5N8cDLgHCcdN/g1iwD2ncNzk35wMuOcSjpv8m4sB92DhuMm/wQy4hwjHTf4NYcA9t3Dc5N/cDLjnEY6b/JuHAfe8wnGTf/My4J5POG7ybz4G3PMLx03+zc+AewHhuMm/BRhwLygcN/m3IAPuocJxk39DGXAPE46b/BvGgHsh4bjJv4UYcA8Xjpv8G86Ae4Rw3OTfCAbcCwvHTf4tzIB7EeG4yb9FGHAr4bjJP8WAWzv6cFMzPdz0+jA67DE83EwJf7hJuFN9Jm0waF0WX+kh5CwMRZZO6OFm3Ad+yFzK9ME9MLTGOlNW5XIhly8VS5lSKq+zhUzay6TzfraULvh+PlRhyvyLUqHsBSXPy+S0+UGZTCrn54rFkj9rJS8ne0Ccz6XSpUIh5WVTaV0q53VQUKmsDgOdUsUwnSt42UIu7fvmwWzoZUulopksm2e2fs7siM7PCtzDrPBDifzLMtRLTjhu8i/HgNsXjpv88xlwB8Jxk38BA+5FheMm/xZlwL2YcNzk32IMuBcXjpv8W5wB9xLCcZN/SzDgXlI4bvJvSQbcSwnHTf4txYB7aeG4//GPAfcywnGTf8sw4F5WOG7yb1kG3MsJx03+LceAe3nhuMm/5RlwryAcN/m3AgPuFYXjJv9WZMC9knDc5N9KDLhXFo6b/FuZAfcqwnGTf6sw4F5VOG7yb1UG3KsJx03+rcaAe3XhuMm/1Rlwr+HoQ741mB7yrdmH0eE1GR7yrSX8IR/hXqvPpA0GrcviKz2MyzAU2doJPeSL++ALmUvr9ME9OLPF2jypTOe9fCFj/mm6nMmlzHNNbX6EKpvHmeRMKsyE+UClC6lsOigXvFyhqFIFRT+vXMjnspW8nGwPi0E5Xyjm/HQmzCgDM+OVvLxK5XTRbIgu63SmpMKC75V8AyfI6qKXKetSyjwyLfyzQcA9XFf4oUT+rctQL+sJx03+rceAe33huMm/9RlwbyAcN/m3AQPuDYXjJv82ZMC9kXDc5N9GDLg3Fo6b/NuYAfcmwnGTf5sw4N5UOG7yb1MG3JsJx03+bcaAe3PhuMm/zRlwbyEcN/m3BQPuLYXjJv+2ZMC9lXDc5N9WDLi3Fo6b/NuaAXdeOG7yL8+AuyAcN/lXYMBdFI6b/Csy4A6F4yb/QgbcJeG4yb8SA+6ycNzkX5kB9zbCcZN/2zDg3tbRh13bMj3s2q4Po8PbMTzs2l74wy7CvX2fSRsMWpfFV3ootQ5Dke2Q0MOuuA+AkLm0Yx/cAyRbrL1SJpUx55WfzRVD85QsTQ/NsulMMZMJCzkvFWrzbM1TfiYbFsJcTvulIF1QvtmYXDllnvCtW8nLyR52eVqVS9lUJl9IF3Pp0DyFKxTLOVUoeubpYSrIZH1lvFaeF4ZBoMvmcWKYzqhsvmDmM0G4LnAPdxJ+KJF/OzHUy87CcZN/OzPg3kU4bvJvFwbcuwrHTf7tyoB7N+G4yb/dGHDvLhw3+bc7A+49hOMm//ZgwL2ncNzk354MuPcSjpv824sB997CcZN/ezPg3kc4bvJvHwbc+wrHTf7ty4B7P+G4yb/9GHDvLxw3+bc/A+4DhOMm/w5gwH2gcNzk34EMuA8Sjpv8O4gB98HCcZN/BzPgPkQ4bvLvEAbchwrHTf4dyoD7MOG4yb/DGHAf7uhDn8OZHvoc0YfR4SMYHvocKfyhD+E+ss+kDQaty+IrPZzZkaHIjkrqoU/MByHIXDq6D+5Bii3WxomCLntFr5zyi8arUj5fzmXL5XImr8JsOpcq6qAYpFPmoVLeT4eZwPxgnUuF6bCULRT89E6VvKzdQ50PA6+czprF/TDIm43Mq2LJ4C6UlO/pTKmo87qszEYHpVKhQJ+VCsNSJpv3dGD2sbQTcA+PEX4okX/HMNTLscJxk3/HMuA+Tjhu8u84BtzHC8dN/h3PgPsE4bjJvxMYcJ8oHDf5dyID7pOE4yb/TmLAfbJw3OTfyQy4TxGOm/w7hQH3qcJxk3+nMuA+TThu8u80BtynC8dN/p3OgPsM4bjJvzMYcJ8pHDf5dyYD7rOE4yb/zmLAfbZw3OTf2Qy4zxGOm/w7hwH3ucJxk3/nMuA+Tzhu8u88BtznC8dN/p3PgPsCRx9+XMD08OPCPowOX8jw8OMi4Q8/CPdFfSZtMGhdFl/pIcXRDEV2cUIPP+I+EEDm0iV9cA8UbLHWXi5bTJe9VEpliillcHqllMrnyoWSnymEqlhOlUpeqPLlTFmnjANaB7lQheWU8SQflo+p5OVkexiWQj/wVb7kFcJQ59OeZzxUZtHALxf9YsYvZ1QmlyvmM/lMsZQqeEU/5/uZcjFUhYyXOga4h5cKP5TIv0sZ6uUy4bjJv8sYcF8uHDf5dzkD7iuE4yb/rmDAfaVw3OTflQy4rxKOm/y7igH31cJxk39XM+C+Rjhu8u8aBtzXCsdN/l3LgPs64bjJv+sYcF8vHDf5dz0D7huE4yb/bmDAfaNw3OTfjQy4bxKOm/y7iQH3zcJxk383M+C+RThu8u8WBty3CsdN/t3KgPs24bjJv9sYcN8uHDf5dzsD7jscfQhwB9NDgDv7MDp8J8NDgLuEPwQg3Hf1mbTBoHVZfKWb9ZcwFNndST0EiHljHJlL9/TB3Vi3xjqfMc8NQh3mPK9YLmYD+u02+XIxRw8+MpkgVzAump8ShMViqlA2/zYw/2MpHxSLZvF84dJKXtbuoZfVXibMa5VXpVBlU14uo/x8Ia+yoTabmcoXszprpsNCKUylg3ImZdCE+SCTSqVyfiZ3KXAP7xV+KJF/9zLUy33CcZN/9zHgvl84bvLvfgbcDwjHTf49wID7QeG4yb8HGXA/JBw3+fcQA+6HheMm/x5mwP2IcNzk3yMMuB8Vjpv8e5QB92PCcZN/jzHgflw4bvLvcQbcTwjHTf49wYD7SeG4yb8nGXA/JRw3+fcUA+6nheMm/55mwP2McNzk3zMMuJ8Vjpv8e5YB93PCcZN/zzHgft7Rm+HPM90Mf6EPo8MvMNwMf1H4zXDC/WKfSRsMWpfFV7ppfQ9Dkb2U0M3wuDeIkbn0ch/cDWZrrEsqlc2lS+bmeSbMhLlsthgWPHP3P182jwHSuXKupAOlsuVs1vOCTLaUK6aDok77paIKUunMvZW8nOxmuJdVBnbaT6cL5ua8l9G+F6QyqSDrl9KBzpjnDF7GT2s/lcmlcylz816HZmfLWZ0qZ4uF8F7gHr4i/FAi/15hqJdXheMm/15lwP2acNzk32sMuF8Xjpv8e50B9xvCcZN/bzDgflM4bvLvTQbcbwnHTf69xYD7beG4yb+3GXC/Ixw3+fcOA+53heMm/95lwP2ecNzk33sMuN8Xjpv8e58B9wfCcZN/HzDg/lA4bvLvQwbcHwnHTf59xID7Y+G4yb+PGXB/Ihw3+fcJA+5PHb0p/CnTTeHP+jA6/BnDTeHPhd8UJtyf95m0waB1WXylm7cvMxTZF0ndFI55oxSZS1/2wd1otcVaZ/1soIupfDafzpiFMsV0qVgq5IuFYq6cV+WsV0xlyukga/6HwNxrNvfAC6lMybiR8lJlz3ulkpe1e6iDMDROllN5P0xnizpTVDqXLRcKmUKQKaXDYianfL9cNq6lQ10I/XQxWyjnM7mwGBZNAF4B7uFXwg8l8u8rhnr5Wjhu8u9rBtzfCMdN/n3DgPtb4bjJv28ZcH8nHDf59x0D7u+F4yb/vmfA/YNw3OTfDwy4fxSOm/z7kQH3SOG4yb+RDLhHCcdN/o1iwP2TcNzk308MuH8Wjpv8+5kB92jhuMm/0Qy4fxGOm/z7hQH3GOG4yb8xDLjHCsdN/o1lwP2rozdHf2W6OfpbH0aHf2O4OTpO+M1Rwj3OkZujdBPzS4Yi+z2hm6Nxbxgic+mPPrgbjrZYa7OQp/xcKsiYf+hlzX9ZLvilcpDPeebmb95AUuVCUPZSBkfZT+mi+acGsqdzKp/T4VeVvJxsDwtl3wvNpuXCXDpQZseMb8WiuZGsSlltbjJntFcq5s2t5UzG06rk5bIlsx9+seSXM34p8xVwD8cLP5TIv/EM9TJBOG7ybwID7j+F4yb//mTA/Zdw3OTfXwy4JwrHTf5NZMD9t3Dc5N/fDLgb+srGTf6RoXH3EI6b/OvBgLuncNzkX08G3I3CcZN/jQy4m4TjJv+aGHA3C8dN/jUz4G4Rjpv8a2HA3SocN/nXyoC7TThu8q+NAXd7XzdvErYD4xX1t6Mvo8MdffHr9gIGkAt3r76TNhi0LouvdDPvDwZx0BtMLl1jshtcMW+cIXOpT1/cjTdbrL1yLhOYFf1cvlzwSulMqpDxs2Xf3Ast5wqZktbZgu97ZlE/XfZ0KuflytmgrHXG/MtiukA3twhvz8lyqFQqeMVCJvB1KUxnsukgXygVwpLydVg0NzKzRT+rdFhKp9K5Ui4MddbzC3kvzOeL6VQhNx54k7Cv8EOJ/OvLcCh1CsdN/nUy4O4nHDf5148Bd3/huMm//gy4BwjHTf4NYMA9g3Dc5N8MDLhnFI6b/JuRAfdMwnGTfzMx4B4oHDf5N5AB98zCcZN/MzPgnkU4bvJvFgbcswrHTf7NyoB7NuG4yb/ZGHDPLhw3+Tc7A+45HL1ZNgfTzbJBfRkdHsRws2xO4TfLCPecjtwso5tafRiKbK6EbpbFvYGEzKXBfXE3oKyxTqX9vK9Sfq5ULqYCv5AN6R3Bos4FGa/oh15WBYWSLqT8fCo0NxCDfD4MikE2r8NAp1SubyUvJ9vDUBfy2ayBkja+BVrpnPm/cj4blIpeIVTK8/Lm/8K02bW8UkGePqftl8N0ycuWiuVCX+AeDhF+KJF/QxjqZW7huMm/uRlwzyMcN/k3DwPueYXjJv/mZcA9n3Dc5N98DLjnF46b/JufAfcCwnGTfwsw4F5QOG7yb0EG3EOF4yb/hjLgHiYcN/k3jAH3QsJxk38LMeAeLhw3+TecAfcI4bjJvxEMuBd29KbRwkw3jRbpy+jwIgw3jZTwm0aEWzly04hu7gxmKDKd0E2juDdSkLnk9cXdiLHG2iuGZd/TOpXJFQp5PwiULqfKpVwqnza3zNI5AzIfZHPK3KkqZugylSunQu2X/FSgc+GQSl5OftMoyGayGV0Mw6CU9rUup0sZXfBVGBbzZncLaeNdqaRzaU/l86Vs3tzZUrroZXWumC35mSHAPUwJP5TIvxRDvaSF4yb/0gy4M8Jxk38ZBtxZ4bjJvywD7pxw3ORfjgG3Lxw3+ecz4A6E4yb/AgbciwrHTf4tyoB7MeG4yb/FGHAvLhw3+bc4A+4lhOMm/5ZgwL2kcNzk35IMuJdy9ObJUkw3T5buy+kww82TZYTfPCHcyzhy84RucngMRbZsUjdPYt5QQObScn1xNyRssfbK5XQ+5QWeX8yVdTFX8FNeJl8qKb9YKuuSzmR0rpzOZkoF84eBUA5Sobkzk82k0/Qrcb1UJS8n20OVLecLaYM3GxhXPEVvAuWLfs4veNlsrhCmdKGcKnl+KWVu9+Sy6Xye/nEYFAqh+d+qbnjE3cPlhR9K5N/yDPWygnDc5N8KDLhXFI6b/FuRAfdKwnGTfysx4F5ZOG7yb2UG3KsIx03+rcKAe1XhuMm/VRlwryYcN/m3GgPu1YXjJv9WZ8C9hnDc5N8aDLjXFI6b/FuTAfdajt5EWIvpJsLafRkdXpvhJsI6wm8iEO51HLmJQGJ/OYYiWzehmwhxhTUyl9brixPmtlh7uZSX88OiSpnbDWWdL2RzXi6T9vy0lzXIUwWd9nIlX6t8IROmQ9/LBXlfebpULoReoegvX8nLyW4iBCn6FYXZsOSVQ63KxtUwVLlU2exUoPJBLlvW2aBo/lAp41+gi+lcLpMzmNJemE7llwfu4frCDyXyb32GetlAOG7ybwMG3BsKx03+bciAeyPhuMm/jRhwbywcN/m3MQPuTYTjJv82YcC9qXDc5N+mDLg3E46b/NuMAffmwnGTf5sz4N5COG7ybwsG3Fs6Kqa3ZBLTW/VldHgrBjG9tXAxTbi3dkRMk+hdj6HI8kmJ6ZgCE5lLhb44gWqLtWfkuPZLpXQuWwwK5ZJK02+nCkthMV0o50uFbDlnIBklnvHSuXIxm0uFuaAY5HNBNhNq7x+hurVNTHu5fCrjp4OgaAB7hULazJTDXD6TymTCnC74Re0VdS6XDtJlVcyHJrwZv2wwBHmvVPLWB+5hUfihRP4VGeolFI6b/AsZcJeE4yb/Sgy4y8Jxk39lBtzbCMdN/m3DgHtb4bjJv20ZcG8nHDf5tx0D7u2F4yb/tmfAvYNw3OTfDgy4d3RUVO7IJCp36svo8E4MonJn4aKScO/siKgk8VdgKLJdkhKVMYUWMpd27YsTarZYe4FxP13QOa2DcpF+qUmg/cA3/205KGVzQalkUJX8XKhK2cAvZVO65GfKBS+VCnXeqNdiJS8nE5VZo3sD44zSuXzaU6VCoVQoGp+Vn8vpUipF31wZFFXeD83D5HxB63IQZEra/JtSJjAwgHu4m/BDifzbjaFedheOm/zbnQH3HsJxk397MODeUzhu8m9PBtx7CcdN/u3FgHtv4bjJv70ZcO8jHDf5tw8D7n2F4yb/9mXAvZ+j4mo/JnG1f19Gh/dnEFcHCBdXhPsAR8QViaBdGYrswKTEVUzBgcylg/riBIst1p5OZ7M6kyrl0/mcKoYFP1Da6MR8qpTN6FIurVSqUFLZXJg2vulCIZ83TwHLXt4vl/J+Kr1bJS8nE1dlbdSoeYiZNeDLmULZbKRXVKUwDApmtUzJTykvn9blYs43zmb8IJXPlfM6bcBlcsXSbsA9PFj4oUT+HcxQL4cIx03+HcKA+1DhuMm/QxlwHyYcN/l3GAPuw4XjJv8OZ8B9hHDc5N8RDLiPFI6b/DuSAfdRjoqMo5hExtF9GR0+mkFkHCNcZBDuYxwRGSQGDmIosmOTEhkxG29kLh3XF9e422Lt+YWUH2idKuhQF710MVfMe5lsoeSlzdOffLGYNegy5bT2sn6ulFW5QroU0JOjQiZPv6L+4EpeTiYycgVVzGSN6NJpP63MEyU/66l0PiinsuWycVfngrSXSRu3VdlLqaJxNqsDnTM/NpfPZQ8G7uHxwg8l8u94hno5QThu8u8EBtwnCsdN/p3IgPsk4bjJv5MYcJ8sHDf5dzID7lOE4yb/TmHAfaqjzfapTM32aX0ZHT6Nodk+XXizTbhPd6TZpqb4OIYiOyOpZjtmA4rMpTP74hpYW6x1kAu1ymVSRkEEWfMX3yyW1kEQeL7p0kOVz/qBV0oVvWLOS5snCdkwlTdPM1KZrFfKlf9pFE+3NNvaCIJUWA7z9E0aQaDDcqZYMo8jzLOPwGBUOiwWMplsupAt0wYHgXk8YkRBsZAPQrM1+njgHp4l/FAi/85iqJezheMm/85mwH2OcNzk3zkMuM8Vjpv8O5cB93nCcZN/5zHgPt/RpvN8pqbzgr6MDl/A0HReKLzpJNwXOtJ0UnN4JkORXZRQ0xm3EUPm0sV9cY2cLda6mC6mTEtt2tcgUBlz91ilsvm0SuXMdD6bL2k/1KGXznihWTg0bXa6WM77pbCUU+Ww6J9VycvJ9jBtfmI6HWYKylflYp5697CQy6aDgvHf+JfNZ4sFL+1lSykvXSiFhSBt+uaM1n5Zean8WcA9vET4oUT+XcJQL5cKx03+XcqA+zLhuMm/yxhwXy4cN/l3OQPuKxxtvq5gar6u7Mvo8JUMzddVwpsvwn2VI80XNUkXMxTZ1Uk1XzEbEmQuXdMX19DYYu1lg7Iu5IvmXmLW3E7MeTr0vUw+SNG7wBlz57OoCzrlFctZz9zNzNF9RnOLMa0K6XS+FKa8Syp5Odnj9aCYMf9Z1uAvBKmQXov2PaXCdK6oCl4+CIpmE+mX+KT8UsncWU2VSmHa/CepQiGjvbCqYYq7h9cKP5TIv2sZ6uU64bjJv+sYcF8vHDf5dz0D7hscbUJuYGpCbuzL6PCNDE3ITcKbEMJ9kyNNCDUL1zAU2c1JPXaMeTAjc+mWvriD3RprcxfJ4FPFfDZTUqZtKZifn82pUtF0XeZml18qZkrFbC7rZfO5dNnc+SoWS4Wi+Q/KxuNy7tpKXk62h1r5nnlaq01bVCinS7qYLZltMreqwjCj/GIQZMOy+VnmmWipXAj8gtYZg8+0T2bDsqpwLXAPbxV+KJF/tzLUy23CcZN/tzHgvt3Rw/h2psP4jr6MDt/BcBjfKfwwJtx3OnIY06F5C0OR3ZXQYRz3gELm0t19cQecNdaZlArNz9V+ztw6ULRyOp/zs6V8qLOBlw0zIS1nvM172ayfzZcz6bSfNk+j0l5e+96tlbyc7DAupFK50LhoOpd02fNKRQOw5JUDs0LJPN3KeFkvl8pmy77OqbwyvYxv7mqk86bPCTMlv+oAjbuH9wg/lMi/exjq5V5HD6V7mQ6l+/oyOnwfw6F0v/BDiXDf78ihRIfH3QxF9kBSh1JMokbm0oN9cUTfnVgXUsV0mAvCtM4HOpfxi4V0UExldK5ojrV0PuOZk7esvVRW+eViUCzeU8nLnlOItUr7hWxJG2Chn9ZmC4qlvJcuZ8uh8bhQKnop7al0zqyaM88EUtl7gHv4kKPk/BATOT/cl9HhhxnI+RHh5Ey4H3GEnIlEH2Qg50eTIueaMbWEhcylx/riCM8Wa0RMHmOI9ePRZ6d+yjOnDv07P1Q6HRY93/PCQlqZ26lFrxSkdVBOe+lUMSwWzJp5XVblfDEo+/+ulSShPs5EqE/0ZXT4CQZCfVI4oRLuJxkIlZKtsWESqdhG18+Km9gc+9JV0Oh9iSbzU5F8gzPHk7gK1D0qwewRcbqpYlFArgQhmpRPV9Z/hnBxBOEpBlZ5ivnmDwr3lFqKqRxVuOP6+KzwG2iUmM8ytBTPgY/mLmKgdQ+trIvei2eY9uJ5pr14nnEvuFrNF4RzClc9fDXofxV3cQr+seX+14Nk8x9hfoHhDAHGWyP3kJqp5obudcxTWmtKORVdk+PcQu1JtLl88b+6ZRVv6GeZDoKo01Pps57SzyGfX2Qghm/BxNA1mqYyZlPTwMXF/FJfmQSDjEU0L1+KNCjTGp8p7TkyPi9H74OlUqY2wpwuh+VUJhd4BZ2lZzHpci7rp0PziCgf5ko6nU95AX2cgX5RVC6Tol/lG4TFbDlK2jpMpdJhUChq80gnX1B+mMqrcjqX8lQ+NI+AwpSfzeZTqTDrl/3A3JXIl1O+yuRygcp6qcDjis/LlvhM7UE4pdsmyPi8wsSfrwD2YUq3l5D78CrTPrxa2Yf/ahIkH+QWd2F5HG0SXnOxSXiNuUl4jaFJ+C6hJmFK6ilJknsduBaySfiO6RB6vRtNwpT2QdOvZNeqrAJzoqpcMZsrBKFX8M05Ws6kwhQyPm/0xR3syCaBKz5vxLjLNKW66bqD24itx6l5HjbFtZB3g9/siz2QumL0ZowYTalxmcYYTbEmp+aZ5ZTWQsborb64vYvG6K1Ic1X7SKthGmM3JfeQd1ujzeDblcdZ79geZ6l4Q9d7rIN8Vhl3LeCjMetX/ah4Q09r0f5v7WHctd4VHg8qmHcZGuT3mMTCe4yPlt5h2ov3mfbi/f/Yi7g+c+XFD8IfN3HlwI/CHze9UMGNftwEjLf+cfrjptrxD3+j9iTa+H3AeSfpXSZC/IDxThL5/AEDMYx05HHTu8Cm6MO+MglmJNOdig8TeNyEjM9HwMdNPwLvJHHF56NuPF5omMp4deet3a7hyqHwsYuHwsfMh8LHDIfCKCGHQt0kzpX/GUjS+UTooTCKiXQ+ARwKU7rNh4zPp0IPBa74fBo5FJL63FD0tmjMj4XoqL+f9WV0+DOLbIzr/GdAMvgcWARce/i55RCJu4efM7/RrOKNfw78zxluBSNJD5k7X4BvBXcN9OOIF4CYvxT+Vn29HFTxBrKZhfLXV+B4oG8XUu4BfdRUc19yfHoALFbaGiblIP19qLGJlWv6WROx+/zPz+wZ+Xm795r08/aoXH9jfu63xr7rah4i/x4Z8++Ae0nN2oDIXnL6/Y2QFwT/e3h8a+tJdwfoz8GV6+/Nvvxg7EdjI42NMvaTsZ+NjTb2i7ExxsYa+9XYb8bGGfvd2B/GxhubYOxPY39R7hv7m3Kw0/wcYz2NNRprMtZsrMVYq7E2Y+2dFWe6unhypq1m7gfL3I+WuZGWuVGWuZ8scz9b5kZb5n6xzI2xzI21zP1qmfvNMjfOMve7Ze4Py9x4y9wEy9yflrm/LHMTLXN/W+Yo2LVzPSxzPS1zjZa5Jstcs2WuxTLXaplrs8y1V+aiY0jlz6Urf6p4o4p04h5i3wPWKv1zH8jccQGtRRh/hKz1736NjL+W1/Ucb1TctdKTngn+FG8tFX2++HOctbzqZ5Wjp30tVfvc85dpXMvcJJrsGeqYaVvLtz2PHTsta/n2Z7u/Tv1auXrPiX+b2rVy9Z85j5u6tbz/en79+9SslfvvZ+F/dH+tKb6rMb67a+WmyIV6QvfWUt3gVf1nd9ZS3eJo/deU18p0k+/1xCmtle722aH//s+16Btsu78WnfV118pN1Zmme9Rfy5/K81H3rLNWUJ7qs1Y32tdS03Bu6ybbWmqaegDdPPlaehr7Cd1Su1Y4zb2Jbq1eKxWjz9FtkbW8cqyeSbd34kQf9Y3LNEwSTu0VEdNaETXNFZHTWBE9lNtUK39XRNFfFZE0oSKa/qiIqHEVUfVrRWSNqYiu0RUR9lNFlI2siDTq3b6viPwkn3a0d6L6z7DqaUdHJ6PDtDjqjmuX8x24pNK9AJvK+bSD9pB8RN2R69rDXsDCpCLo15DMx0xxhBKy3umJ7kXvSoH1qb3b0rsS2OhcH4sqRt9uxzGJ0r2BBdQHHFx08lHR9AYWYxfu3uBiTOpEaoPlURBG/e3byehwX/iJFIR9gSdSp/ATifawE34iBWGnoydSG8zvoGhxl+VE6lcpsP61J1I/y4nUP4ETqQ14IvUDFlB/puCiX0JAYh4AJLOGBvxp2atCQOiH6UgpMAOQzGx7qOINTTGegaGTmcHRTqYVxj+FVNTfGTsZHZ4R3skUUjMCi38m4Z0M7eFM8E6mkJqJufgRBDqDcAIdCN7DroE+eJE5PjOw9pLsgFthfhc8i7ssHfAsFWKetbYDnsXSAc+aQAeMO4GUngWYlLMyBRddiEjMszF3wCre0ESOMzN0b7ML71opLrM7gJsrx2cH5vgcwnO8XpOCaH5Qaw0CH9hJqZ0W2Fnjl6P+ztnJ6PCccLXjl+cEBnAu4WqH9nAuuNrxy3MJVztEdIM6ZZPxYDAZdw00ZmSOD3FU7bTA/PZLFndZ1M7cFWKep1btzG1RO/MkoHZwJ5DScwOTch6m4KILEYl5XuGdIJHjEIaufz7haofiMp8DuLlyfD5gjs8vPMfrNSkq3tDIJmUBR5/tNMPOGq/q630W7GR0eEG42vHUgsAiGCpc7dAeDoWrHU8NFa52iOgW6JRNxsMcUTvIHF/IUbXTDPNbly3usqid4RViHlGrdoZb1M6IBNQO7gRSejgwKUcwBRddiEjMCwvvBIkcF2Lo+hcRrnYoLos4gJsrxxcB5rgSnuP1mhQVb2hkk6IdVTtNsLMmrFI7Xiejwx5c7YTKAxZBSrjaoT1MwdVOqFLC1Q4Rne6UTcZpR9QOMsczjqqdJpjfxcTUTrZCzLlatZO1qJ1cAmoHdwIpnQUmZY4puOhCRGL2hXeCRI4Zhq4/EK52KC6BA7i5cjwA5viiwnO8XpOi4g2NbFIWc1TtNMLOmmzVd2Is3sno8OJwtZPViwOLYAnhaof2cAm42slW4VYxhw03gugW65RNxks6onaQOb6Uo2qnEeZ3NrHvUlm6QszL1KqdpS1qZ5kE1A7uBFJ6aWBSLsMUXHQhIjEvK7wTJHJciqHrX0642qG4LOcAbq4cXw6Y48sLz/F6TYqKNzSySVnBUbXTE/dsx4/6u2Ino8Mr4p/t+CsCi2Al4WqH9nAl/LMdfyXhaoeIboVO2WS8siNqB5njqziqdnrC/A5zFndZ1M6qFWJerVbtrGpRO6sloHZwJ5DSqwKTcjWm4KILEYl5deGdIJHjKgxd/xrC1Q7FZQ0HcHPl+BrAHF9TeI7Xa1JUvKGRTcpajqqdHrCzJh1E/V27k9HhteFqJx2sDSyCdYSrHdrDdeBqJx2sI1ztENGt1SmbjNd1RO0gc3w9R9VOD5jfad/iLovaWb9CzBvUqp31LWpngwTUDu4EUnp9YFJuwBRcdCEiMW8ovBMkclyPoevfSLjaobhs5ABurhzfCJjjGwvP8XpNioo3NLJJ2cRRtdMAO2sKVW+ybdrJ6PCmcLVT0JsCi2Az4WqH9nAzuNopVOFWMYcNN4LoNumUTcabO6J2kDm+haNqpwHmdyGxN9m2rBDzVrVqZ0uL2tkqAbWDO4GU3hKYlFsxBRddiEjMWwvvBIkct2Do+vPC1Q7FJe8Abq4czwNzvCA8x+s1KSre0Mgmpeio2vm7L+qsKRSj/oadjA6HeLVTDIFFUBKudmgPS3i1UywJVztEdMVO2WRcdkTtIHN8G0fVTpQ8VaxRKFjcZVE721aIebtatbOtRe1sl4DawZ1ASm8LTMrtOnmCiy5EJObthXeCRI7bMHT9OwhXOxSXHRzAzZXjOwBzfEfhOV6vSVHxhkY2KTs5qnYmws6adCHq786djA7vjH+TrbAzsAh2Ea52aA93wb/JVthFuNohotupUzYZ7+qI2kHm+G6Oqp2JMLWTzlvcZVE7u1eIeY9atbO7Re3skYDamQhUO7sDk3KPTp7gogsRiXlP4Z0gkeNuDF3/XsLVDsVlLwdwc+X4XsAc31t4jtdrUlS8oZFNyj6Oqp2/YGeNX/UN1Pt2Mjq8L1zt+GpfYBHsJ1zt0B7uB1c7vtpPuNohotunUzYZ7++I2kHm+AGOqp2/YGonl9g3UB9YIeaDatXOgRa1c1ACaucvoNo5EJiUB3XyBBddiEjMBwvvBIkcD2Do+g8RrnYoLoc4gJsrxw8B5vihwnO8XpOi4g2NbFIOc1Tt/Mmkdg7vZHT4cAa1cziwCI4QrnZoD49gUDtHCFc7RHSHdcom4yMdUTvIHD/KUbXzp4Nq5+gKMR9Tq3aOtqidYxJQO38C1c7RwKQ8xhG1g8R8rPBOkMjxKIau/zjhaoficpwDuLly/Dhgjh8vPMfrNSkq3tDIJuUER9XOBNhZk6/6TrYTOxkdPhGudvLBicAiOEm42qE9PAmudvLBScLVDhHdCZ2yyfhkR9QOMsdPcVTtTICpnXxi38l2aoWYT6tVO6da1M5pCaidCUC1cyowKU/r5AkuuhCRmE8X3gkSOZ7C0PWfIVztUFzOcAA3V46fAczxM4XneL0mRcUbGtmknOWo2hmPUzvpqL9ndzI6fDZe7aTPBhbBOcLVDu3hOXi1kz5HuNohojurUzYZn+uI2kHm+HmOqp3xOLWTsrjLonbOrxDzBbVq53yL2rkgAbUzHqh2zgcm5QWdPMFFFyIS84XCO0Eix/MYuv6LhKsdistFDuDmyvGLgDl+sfAcr9ekqHhDI5uUSxxVO3/Azpqw6tnOpZ2MDl8KVzthcCmwCC4TrnZoDy+Dq50wuEy42iGiu6RTNhlf7ojaQeb4FY6qnT9gaidM7NnOlRVivqpW7VxpUTtXJaB2/gCqnSuBSXlVJ09w0YWIxHy18E6QyPEKhq7/GuFqh+JyjQO4uXL8GmCOXys8x+s1KSre0Mgm5TpH1c7vsLOmWIr6e30no8PXw9VOsXQ9sAhuEK52aA9vgKudYukG4WqHiO66TtlkfKMjageZ4zc5qnZ+h6mdYmhxl0Xt3Fwh5ltq1c7NFrVzSwJq53eg2rkZmJS3dPIEF12ISMy3Cu8EiRxvYuj6bxOudigutzmAmyvHbwPm+O3Cc7xek6LiDY1sUu5wVO2Mg501uurZzp2djA7fCVc7OrgTWAR3CVc7tId3wdWODu4SrnaI6O7olE3GdzuidpA5fo+jamccTO3oxJ7t3Fsh5vtq1c69FrVzXwJqZxxQ7dwLTMr7OnmCiy5EJOb7hXeCRI73MHT9DwhXOxSXBxzAzZXjDwBz/EHhOV6vSVHxhkY2KQ85qnZ+w/120Sq183Ano8MPw9VOIXgYWASPCFc7tIePwNVOIXhEuNohonuoUzYZP+qI2kHm+GOOqp3fcL9dNDG183iFmJ+oVTuPW9TOEwmond+AaudxYFI+0ckTXHQhIjE/KbwTJHJ8jKHrf0q42qG4POUAbq4cfwqY408Lz/F6TYqKNzSySXnGUbXzK+4bqP2ov892Mjr8LFzt+P6zwCJ4TrjaoT18Dq52fP854WqHiO6ZTtlk/LwjageZ4y84qnZ+hakdP2dxl0XtvFgh5pdq1c6LFrXzUgJq51eg2nkRmJQvdfIEF12ISMwvC+8EiRxfYOj6XxGudigurziAmyvHXwHm+KvCc7xek6LiDY1sUl5zVO2MhZ016Sq183ono8Ovw9VO2n8dWARvCFc7tIdvwNVO2n9DuNohonutUzYZv+mI2kHm+FuOqp2xMLWTTkztvF0h5ndq1c7bFrXzTgJqZyxQ7bwNTMp3OnmCiy5EJOZ3hXeCRI5vMXT97wlXOxSX9xzAzZXj7wFz/H3hOV6vSVHxhkY2KR84qnbGwM6aQEf9/bCT0eEP4Won0B8Ci+Aj4WqH9vAjuNoJqnCrmMOGG0F0H3TKJuOPHVE7yBz/xFG1MwamdgJlcZdF7XxaIebPatXOpxa181kCamcMUO18CkzKzzp5gosuRCTmz4V3gkSOnzB0/V8IVzsUly8cwM2V418Ac/xL4Tler0lR8YZGNilfOap2foGdNTkV9ffrTkaHv4arnZz6GlgE3whXO7SH38DVTk59I1ztENF91SmbjL91RO0gc/w7R9XOLzC1ky1b3GVRO99XiPmHWrXzvUXt/JCA2vkFqHa+ByblD508wUUXIhLzj8I7QSLH7xi6/pHC1Q7FZaQDuLlyfCQwx0cJz/F6TYqKNzSySfnJUbUzGvctBVXfQP1zJ6PDP8PVTqH0M7AIRgtXO7SHo+Fqp1AaLVztENH91CmbjH9xRO0gc3yMo2pnNO5bChL7BuqxFWL+tVbtjLWonV8TUDujgWpnLDApf+3kCS66EJGYfxPeCRI5jmHo+scJVzsUl3EO4ObK8XHAHP9deI7Xa1JUvKGRTcofjqqdn2FnjVf1bGd8J6PD4+Fqx1PjgUUwQbjaoT2cAFc7npogXO0Q0f3RKZuM/3RE7SBz/C9H1c7PuG+gTuzZzsQKMf9dq3YmWtTO3wmonZ+BamciMCn/7uQJLroQkZipclBxbWjAFxyR418MXX+PfrwHl4o3NMWFfJSOmyvHo37GXaun8Byv16SoeEMjm5RGYN4kqXZ+wp01xai/Tf0YHabFsWpHFZuARdAMLE6uPWzuh1Y7qtjMfGggiK6xn2wybgGTcddAY0bmeCsQc5Jq5yeY2lEFi7ssaqetQszt/RqqlU1bv8nVDv0jbrUDPIF0GzAp2/vxBBddiEjMHcI7QSLHVoauv5dwtUNx6eUAbq4c7wXM8d7Cc7xek6LiDY1sUvo4qnZGwc6abNWbbH37MTrcF652sqW+wCLoFK52aA874WonW+oUrnaI6Pr0k03G/RxRO8gc7++o2hmF+9xOYm+yDagQ8wy1ameARe3MkIDaGQVUOwOASTlDP57gogsRiXlG4Z0gkWN/hq5/JuFqh+IykwO4uXJ8JmCODxSe4/WaFBVvaGSTMrOjamck7KzRVd/JNks/RodngasdrWcBFsGswtUO7eGscLWjq3CrmMOGG0F0M/eTTcazOaJ2kDk+u6NqZyTuTTZlcZdF7cxRIeZBtWpnDovaGZSA2hkJVDtzAJNyUD+e4KILEYl5TuGdIJHj7Axd/1zC1Q7FZS4HcHPl+FzAHB8sPMfrNSkq3tDIJmWIo2rnR9zLGFWf25m7H6PDc/fDrzuPcIVCuOfpN2mDQeuyqAoilCH9ZJPevI6oCmRezsdM9IiYzMeQ40kS6g9MhDp/P0aH52cg1AWEEyrhXmA6ocLWWtARQkXm5VDhhEoxGeo4oX7fF7cfUX+H9WN0eBhDsQ4DJttCwsmZ9nAhBnm/kPD78S4Q/XBHiB6Z4yOE3yKhmIxgqJeFhd8GJJ5YmKmJ48rLhYF5uYjwvKzHZyre0Eg+U8JznGKsGAQaMg+TbAi/jTSE2k95Xi5FPvmh0umw6PmeFxbSqqjyRa8UpHVQTnvpVDEsFoz/eV1W5XwxKPv/rhX1V/djdFhbiiCu8xpY/J7whpD20LMUQdw99MD37elZcM+GZItAxRwWd1H7W6W4UpH4wTsVYCB19IF/1Omp9LnYneRLTcPpOKVNTwGLOQ0skOi+0rqHTmMuaLN3Ra3KKvBUXuWK2VwhCL2Cny+nyplUmJrWfZ1SsiP3NcO0r5nKvjZVLOkTWcUcUfLMVk7kHNUgB2GkGNqqlPBbDNNaHGoqcMf10RfeklNi+gxyO2AiheA/yFbFGzrHtBeLMu3FojEOnin5zJUXPeb8X+WU4hT8Y8uBnnPK5gE6+HwGLgXGWyP3kBqK5ga7wmmYyj2YUk5F1+Tgb9SeRBusxf5L4ah4Q/tMhLjYfyicKSyjp/RzyOfFGIihEUwMXaNpKmM2NY1MXMyL95NJMMhYRPNy8chBPa3xmdKeI+OzRGQtnUqZ2ghzuhyWU5lc4BV0NpXNltPlXNZPh+VMOh/mSjqdT3lBKafK2i+VcplUMZctB2ExW46Stg5TqXQYFIo642XzBeWHqbwqp3MpI37DVC4MU342m0+lwqxf9gMjWI0M9lUmlwtU1ksFHld8logoTdShMKU7G9E1XTkUlnTxUFiS+VBYkuFQaBJyKNRN4tw/H8opI0lnKaGHQhMT6SwFOBSmdJsPGZ+lhR4KXPFZ+v+j24/LVG4/Lmu7/ajijbr3/pHPQeKuBbyVyfJ2QdceNjqyh3HXWk54PKhglmM42JdnanKWZ7wtuizTXqzAtBcrMN4W5cqLFuG3RblyoNWB26LLMdwWBcZbt06/LVo7/uFv1J5EG78VORXwckyEuCKjAiafV2QghjZHbosuB2yKVuonk2DamBTWSgncFkXGZ2WgAm4FKmCu+KxsiQ/6BS9kfFZh4s9VAPswpTs1yH1YlWkfVu3GbXLJB7nFXVgeR5uE1VxsElZjbhJWY2gS2hNqEmK+HQsludWBayGbhHamQ2j1bjQJcd+yRcZnjX64gx3ZJHDFZw3Guy3tnf+qb/TX0rUDfvHfv19L52tk7qwJ43a/Kka0Ln3VHx3YyzRMPkD7+j8cij7zBjbK93EtdKPSk6mYUIBprbX+DxXn2sDiZC5E/X+5ENdGFuJ0xuTzcR00Y6IfnmIZ0/9HBqAZeB3RDKygDLzudAZ2orDXnc7ASv/ZJN/H9aYHSunhDlTU+tMDpfRYBypqA67b1ehbKxviHE27mlAb9pPv40auJNTGOEczribUxg4k1CauJNSmOEezribUpg4k1GauJNTmOEdzribU5g4k1BauJNSWOEd9VxNqSwcSaitXEmprnKOBqwm1tQMJlXcloQo4R/OuJlTBgYQqupJQIc7RgqsJFTqQUCVXEqqMc7ToakKVHUiobVxJqG1xjoauJtS2DiTUdq4k1PY4R0uuJtT2DiTUDq4k1I44R8uuJtSODiTUTq4k1M4wR7VyNaF2diChdnEloXbFJZR2NaF2dSChdnMloXbHJZTnakLt7kBC7eFKQu2JS6iUqwm1pwMJtZcrCbU3LqGcfR9qbwcSah9XEmpfXEI5+z7Uvg4k1H6uJNT+uIRy9n2o/R1IqAOmv6ut9EIOvFR/oCuVfxCu8p19z+ggByr/YFcS6hBcQjn7ntEhDiTUoa4k1GG4hHL2PaPDHEiow11JqCNwCeXse0ZHOJBQR7qSUEfhEsrZ94yOciChjnYloY7BJZSz7xkd40BCHetKQh2HSyhn3zM6zoGEOt6VhDoBl1DOvmd0ggMJdSLSR/pqzI6GSd8JRM4OqQlaTzAArm9sU7GGzxaw9RxIqvUd8HEDB3zcyAEfN3HAx80c8HELB3zcygEf8w74WHTAx5IDPm7jgI/bOeDjDg74uJMDPu7igI+7OeDjHg74uJcDPu7jgI/7OeDjAQ74eKADPh7sgI+HOuDj4Q74eKQDPh7tgI/HOuDj8Q74eCKDjw1QH1PZBsvArO1pvrUn/bZ3ilm/yvVJ5uJkY6cYO9XYacZON3aGsTONnWXsbGPnGDvX2HnGzjd2gbELK4tc1K+yaNfvkqFFB9fMnWyZO8Uyd6pl7jTL3OmWuTMsc2da5i6qzEXH1P5Syf8c+t9fDNC1Vpwb3r6C/j63qhvTcZ8eXQzyi34FWjQ+F1viA30goat9j7sPlwBJK7oPl1j2Af2LHIAPAfQlwD29lGlPL00gty4F7sNlTPtwWQK5BXx4oy8D7unlTHt6OXdumX04Seg+sOWRqSfgA7aqB2Fx9+8Kpjy6IgGOugK4D1cy7cOVCXAU8KGjvhK4p1cx7elVCeTWVcB9uJppH65OILeAD4v11cA9vYZpT69J4Pw7Weg+sOWRqSfgA/2qB+9x9+9apjy6NgGOuha4D9cx7cN1CXAU8CUHfR1wT69n2tPrE8it64H7cAPTPtyQQG4BX07RNwD39EamPb0xgfPvFKH7wJZHpp6ALxBVvegTd/9uYsqjmxLgqJuA+3Az0z7cnABHAV+q0jcD9/QWpj29JYHcugW4D7cy7cOtCeQW8GU4fStwT29j2tPbEjj/ThW6D2x5ZOoJ+MJi1YuFcffvdqY8uj0BjroduA93MO3DHQlwFPAlTn0HcE/vZNrTOxPIrTuB+3AX0z7clUBuAV++1XcB9/Rupj29O4Hz7zSh+8CWR6aegC9IV73IHHf/7mHKo3sS4Kh7gPtwL9M+3JsARwFfGtf3Avf0PqY9vS+B3LoPuA/3M+3D/QnkFvBlf30/cE8fYNrTBxI4/04Xug9seWTqCfiBjKoPTsTdvweZ8ujBBDjqQeA+PMS0Dw8lwFHAD6noh4B7+jDTnj6cQG49DNyHR5j24ZEEcgv44SL9CHBPH2Xa00cTOP/OELoPbHlk6gn4AbCqD2rF3b/HmPLosQQ46jHgPjzOtA+PJ8BRwA/F6ceBe/oE054+kUBuPQHchyeZ9uHJBHIL+GFG/SRwT59i2tOnEjj/zhS6D1HMPcCYzwJgLuT/XYvTz7Md2c9zHPHzXEf8PM8RP893xM8LHPHzQqCf9PnrXg3VX0rar6F6oP0/iWGf0T6e7ICPpzjg46kO+HiaAz6e7oCPZzjg45lMHI/wMZX1Wdbl8nf6uv9/rYtb2/MY19ZdnBDtVZ42F88Ye9bYc8aeN/aCsReNvWTsZWOvGHvV2GvGXjf2hrE3jb3Vr6H6i2qe7jf5l9c8Y5l71jL3nGXuecvcC5a5Fy1zL1nm3rTMvVWZa6psSk9LANBk+nI/8cmo6f9F9+LtSsa8Uxt0+h9qO1/0namXAXcU6NuJaK23gXdk3nFE+bji5yuO+PmqI36+5oifrzvi5xuO+Ingy0LwT1dddQe29u54XP4E3tHQTzPFBo0ZeIdEP+MIZuAdF/2sI5iBd3D0c45gBt4R0s87ghl4h0m/4Ahm4B0r/aIjmIF3wPRLCWFW0zZ018WbQK30LtNT/Oi64H3oGvotYOzfBWnZcqkcRDH3AOf7+wDMtjuzaD8/APiZzauglM3mOP38EOBnoZDN5Ut+htPPjxBxL2ZL5VTO4/TzY4Cf+Uy6XM6k8px+fgLwM6NVKePlypx+fgrwMyioTNb3i5x+fgbwU5f9VBjkC5x+fo6Ie6GkiqEOyLcZGib/tvrot9RHv50++q300W+jj34LffTb56PfOv9+5Hpg47RfR2+2vxW5/iBy/WHk+qPI9ceR608i159Grj+LXH9euf7C/Pmlsa+MfW3sG2PfGvvO2Pf9/r3JP6Bh0v3p/4q/ijf0F/Jv8tNIs62t/+3Tuva26zcW/GD25UdjI42Nqn2YQP9jW83cj5a5kZa5UZW56GjGblZVUOMSxA+oRrCs9I/AByQjIWv9u1+jgEWQZPF+Ob14rcX7k9mXn42NNvZLbfH+ZCnKny1zoy1zvyRQvF8Ci/cnYPH+DCze0cDi/cXR4v1qevFai3eM2Zexxn419ltt8Y6xFOVYy9yvlrnfEijer4DFOwZYvGOBxfsrsHh/c7R4v55evNbiHWf25XdjfxgbX1u84yxF+btl7g/L3PgEivdrYPGOAxbv78Di/QNYvOMdLd5vphevtXgnmH3509hfxibWFu8ES1H+aZn7yzI3MYHi/QZYvBOAxfsnsHj/AhbvREeL99vpxWst3r+pYPubOWM9+zdUF+DflqKkf1w718My17M/f/F+Cyzev4HFS3uEWIsw9uiPK96e/d0s3u+mF6+1eBtNPJuMNRtrqS3eRktRNlnmmi1zLQkU73fA4m3sjyveJmDxNgOLt8XR4v1+evFai7eVasxYu7GO2uJttRRlm2Wu3TLXkUDxfg8s3lZg8bYBi7cdWLwdwOLtSqZPG8CJakbb9PWmrzd9venrTV9v+nrT15u+3vT1JK/ndfX+I5on6YDhkeuFItfDItdDI9cLRq4XiFzPH7meL3I9b+R6nsj13JHrIZHrwZHruSLXc0auB0Wu54hczx65ni1yPWvkepbI9cyR64GR65ki1zNGrmeIXA+IXPePXPeLXHdGrvtGrvdsmXS9R+R698j1bpHrXSPXu0Sud45c7xS53jFyvUPkevvI9XaR620j19tErsuR61LkOoxcFyPXhch1PnK9deR6q8j1lpHrLSLXm0euN4tcbxq53iRyvXHkeqPI9YaR6w0i1w+0Trq+P3J9X+T63sj1PZHruyPXd0Wu74xc3xG5vj1yfVvk+tbI9S2R65sj1zdFrm+MXN8Qub4+cn1d5PrayPU1keurI9dXRa6vjFxfEbm+PHJ9WeT60sj1JZHriyPXF0WuL4xc92yfdN0jct0Quf67bdL1xMj1X5HrPyPXEyLX4yPXf0Suf49cj4tc/xa5/jVyPTZyPSZy/UvkenTk+ufI9U+R61GR65GR6x8j1z9Err+PXH8Xuf42cv1N5PrryPVXkesvI9dftE26z7N05U8Vc0xfb/p609ebvt709aavN3296etNX0/0erqrF1ylY1JfuHLkeqXI9YqR6xUi18tHrpeLXC8buV4mcr105HqpyPWSkeslIteLR64Xi1wvGrkOItd+5DoXuc5GrjOR63TkOhW59iLXOnKtIteLRK4XjlyPiFwPj1wvFLkeFrmeGHlTKvoqY/RVx+irkD0jz22jb09F366Kvn3VEpmPvrBR9UJH5Lojch19Rhx9hhx9xjwq8rOiHz+Mfjwx+vHFXyLX0U88RT8RFf3E1G+R6+iHLKIfwoh+SGN85Dr6Xnf0ve+u98J/bvh39DJ4ehvrY6yvsU5j/Yz1NzbA2AzGZjQ2k7GBxmY2NouxWY3NZmx2Y3MYG2RsTmNzGRtsbIixuY3NY2xeY/MZm9/YAsYWNDbU2DBjCxkbbmyEsYWNLWJMGdPGPGMpY2ljGWNZYzljvrHA2KLGFjO2uLEljC1pbCl6ZmxsGWPLGlvO2PLGVjC2orGVjK1sbBVjqxpbzdjqxtYwtqaxtYytbWwdY+saW8/Y+sY2MLahsY2MbWxsE2ObGtvM2ObGtjC2pbGtjG1tLG+sYKxoLDRWMlY2to2xbY1tZ2x7YzsY29HYTsZ2NraLsV2N7WZsd2N7GNvT2F7G9ja2j7F9je1nbH9jBxg70NhBxg42doixQ40dZuxwY0cYO9LYUcaONnaMsWONHWfseGMnGDvR2EnGTjZ2irFTjZ1m7HRjZxg709hZxs42do6xc42dZ+x8YxcYu9DYRcYuNnaJsUuNXWbscmNXGLvS2FXGrjZ2jbFrjV1n7HpjNxi70dhNxm42douxW43dZux2Y3cYu9PYXcbuNnaPsXuN3WfsfmMPGHvQ2EPGHjb2iLFHjT1m7HFjTxh70thTxp429oyxZ409Z+x5Yy8Ye9HYS8ZeNvaKsVeNvWbsdWNvGHvT2FvG3jb2jrF3jb1n7H1jHxj70NhHxj429omxT419ZuxzY18Y+9LYV8a+NvaNsW+NfWfse2M/GPvR2Ehjo4z9ZOxnY6ON/WJsjLGxxn419puxccZ+N/aHsfH9K/zXUP0ltUtX/lQxB/bcLavpvP+/z/v9KrGcYPD8aewvYxON/W2M3m7rYaynsUZjTcaajbUYazXWZqzdWMeAf1/I6h3JuR6RPwdWrnuZf9fbWB9jfY11GutnrL+xAcZmMDajsZmMDTQ2s7FZjM1qbDZjsxubw9ggY3Mam8vY4AFdAaz8ST+krWaut2Wuj2Wur2Wu0zLXzzLX3zI3wDI3g2VuRsvcTJa5gZa5mS1zs1jmZrXMzWaZm90yN4dlbpBlbk7L3FyWucGVOUqaPg32pJmrcj3E/Nu5jc1jbF5j8xmb39gCxhY0NtTYMGMLGRtubISxhY0tYkwZ08Y8YyljaWMZY1ljOWO+scDYosYWM7a4sSWMLWlsqdrEGmIBMrdlbh7L3LyWufksc/Nb5hawzC1omRtqmRtmmVvIMjfcMjfCMrewZW4Ry5yyzGnLnGeZS1nm0pa5jGUua5nLWeZ8y1xgmVvUMreYZW5xy9wSlrklLXNLTUUxLG3+7TLGljW2nLHlja1gbEVjKxlb2dgqxlY1tpqx1Y2tYWxNY2sZW9vYOsbWNbaesfWNbWBsQ2MbGdvY2CbGNjW2mbHNjW1hbMvaYljaAmQZy9yylrnlLHPLW+ZWsMytaJlbyTK3smVuFcvcqpa51Sxzq1vm1rDMrWmZW8syt7Zlbh3L3LqWufUsc+tb5jawzG1omdvIMrexZW4Ty9ymlrnNLHObW+a2sMxtORXFsJX5t1sbyxsrGCsaC42VjJWNbWNsW2PbGdve2A7GdjS2k7Gdje1ibFdjuxnb3dgexvY0tpexvY3tY2xfY/sZ29/YAcYONHZQbTFsZQGytWUub5krWOaKlrnQMleyzJUtc9tY5ra1zG1nmdveMreDZW5Hy9xOlrmdLXO7WOZ2tcztZpnb3TK3h2VuT8vcXpa5vS1z+1jm9rXM7WeZ298yd4Bl7kDL3EFTUQwHm397iLFDjR1m7HBjRxg70thRxo42doyxY40dZ+x4YycYO9HYScZONnaKsVONnWbsdGNnGDvT2FnGzjZ2jrFzjZ1n7HxjFxi7sLYYDrYAOcQyd6hl7jDL3OGWuSMsc0da5o6yzB1tmTvGMnesZe44y9zxlrkTLHMnWuZOssydbJk7xTJ3qmXuNMvc6Za5MyxzZ1rmzrLMnW2ZO8cyd65l7jzL3PmWuQsscxdORTFcZP7txcYuMXapscuMXW7sCmNXGrvK2NXGrjF2rbHrjF1v7AZjNxq7ydjNxm4xdqux24zdbuwOY3cau8vY3cbuMXavsfuM3W/sgdpiuMgC5GLL3CWWuUstc5dZ5i63zF1hmbvSMneVZe5qy9w1lrlrLXPXWeaut8zdYJm70TJ3k2XuZsvcLZa5Wy1zt1nmbrfM3WGZu9Myd5dl7m7L3D2WuXstc/dZ5u63zD0wFcXwoPm3Dxl72Ngjxh419pixx409YexJY08Ze9rYM8aeNfacseeNvWDsRWMvGXvZ2CvGXjX2mrHXjb1h7E1jbxl729g7xt419p6x92uL4UELkIcscw9b5h6xzD1qmXvMMve4Ze4Jy9yTlrmnLHNPW+aescw9a5l7zjL3vGXuBcvci5a5lyxzL1vmXrHMvWqZe80y97pl7g3L3JuWubcsc29b5t6xzL1rmXvPMvf+VBTDB+bffmjsI2MfG/vE2KfGPjP2ubEvjH1p7CtjXxv7xti3xr4z9r2xH4z9aGyksVHGfjL2s7HRxn4xNsbYWGO/GvvN2Dhjvxv7o7YYPrAA+dAy95Fl7mPL3CeWuU8tc59Z5j63zH1hmfvSMveVZe5ry9w3lrlvLXPfWea+t8z9YJn70TI30jI3yjL3k2XuZ8vcaMvcL5a5MZa5sZa5Xy1zv1nmxlnmfrfM/REphr4NyfyywqG4tZQrfvaI+Dl+QGXDO6dveCJ+/s/oCXa4TzPwi6wG4PyKVjitO7iScG2W4NH4c0DNRjWCN2oYcK2/mnCb/tcAnoxDJ9pEIOaJwETjzJm/m3Br/TkA+KVVA7DHQtdpQIP+Tjk5sXI9MXL9d+SavltkYuS/o9/l0MNYT2ONM0TmmWLzKzA25DsqNk0z8MaG1u+KQY/Idc/IdeMM1bFpNn9vMdZqrK0SG7L2hklfERMd6FMVGCvO7wLyelj2A70XwLUUl4/DHfBxWANfTiFjzYH9T6aeAe1n8wxu+DlhAC8/wZuxCcBmoh0XpKqun9Yd3JDs7yfiJAWcnx7f2jVfOje4ct1hYtHLWG9jfYz1NdZprJ+x/sYGGJvB2IzGZjI20NjMxmYxNqux2YzNbmwOY4OMzWlsLoqvsSHG5jY2j7F5jc1nbH5jCxhb0NjQrl/y1ZUY5EztTaBelrnelrk+lrm+lrlOy1w/y1x/y9wAy9wMlrn/x95VwElxNN/FEjQc3B3cHU5CQnxmdTZK3F0hJGGVuHtCQgyCJ0iQBOLu7u7u7u7u/q/6snP0Db17d+yr/br/H5Nf5Yaendr3uqurX83sztZo2mo1bb00bb01bXWatnpNW4OmrY+mra+mrZ+mrb+mbYCmbaCmbZCmbbCmbVlN23KatiGatuU1bSto2oZq2lasbnrJgbdBhb/DCn+d8rYmSafcZNwZUIn4D0XsAvLFHLtCfP3bX93K9xUu9Je7TLm+oo1973Yvz5ejjKNbVY6vcJOYcHssvi8nEF9uz8X0Fc8vEqtu9eL58jRx79Ysji9PO4fc2tb7ShSZj26v1vpKFJ3bbu/W+QqXyBNuXWt8JUrmHLe+5b4yzeQvt6GlvhLN5kK3T8t8OS3Iq27flvhyWpSj3X7N+4q1MN+7/ZvzFW3x2uEOKOkrmm/FOuQOLOUr0ao1zR1U3JfXyvXRHVzEVzLf6rXWXVbvy1mMddtdTufLWSwN4A5Z1Je7mHrCXT7oK7vY2sRdoamvSBk6xx2q+Arny9JM7orAqwxcrPL3yNRbU/4Gv9cI03pZV8W7UrUgYHYevJpRLviVcAPorgzoVF+MS/UhY2wD7sOVwZOAv2XZNlTZSeCUtWVFr6qofbFKYYKtGryysUphYNW2VTUVKPpeGC6T0LV/4ARaFTy46ODjSbMKcDL6vFexdEUaCoujZFbFu1q1IODV4CtSMrsacEVa3fAViftwdfiKlMyubumKNBSGO5nRwBVZkZzCBHODK5KjWZHcCqxIQ4ErkgOcQK7Q4KISkI8TyTkMTGahEH61XLmQgNA3SZGlQASYzHR96JS3uTzGEQElE7FUyawAyz/piIo3Wi0IOApXMulIFDj5Y4YrGe7DGFzJpCMx4cmPSKARwxNoHNyH/oZeeJExngDOvUoq4BVguNNhDVwRBewVEnMyqIA9jQJOVkAB41Ygx/WAQZkUGlz0RERyXkNYATvlbS4nx4SAelvTcNXK47KmBbylYnxNYIyvZXiMFxMpCPGD8rU2eMGuVLWzPGyt8fIq3nWqBQGvA692vPw6wAFc1/Bqh/twXXi14+XXNbza4US3drXZyXgYOBn7G5ozMsbXs7TaWR6G28tp4IpUO+sXEvMGwWpnfU21s0EFqh3cCuS46wODcgOhwUVPRCTnDQ1Xgpwc1xNQ/RsZXu3wuGxkAW+pGN8IGOMbGx7jxUSKU97mIkXKJpbe2xkCW2vCTR6Ks2m1IOBN4dVO2NkUOAk2M7za4T7cDF7thJ3NDK92ONFtUm12Mt7ckmoHGeNbWFrtDIHhdvMauCLVzpaFxLxVsNrZUlPtbFWBage3AjnulsCg3EpocNETEcl5a8OVICfHLQRU/zaGVzs8LttYwFsqxrcBxvi2hsd4MZHilLe5SJGynaXVznKwtSbbpNrZvloQ8PbwaifrbA+cBDsYXu1wH+4Ar3ayzg6GVzuc6LarNjsZ72hJtYOM8Z0srXaWg+HOVKza2bmQmHcJVjs7a6qdXSpQ7eBWIMfdGRiUuwgNLnoiIjnvargS5OS4k4DqH254tcPjMtwC3lIxPhwY4yMMj/FiIsUpb3ORImU3S6udZWFrTbzJMzFGVgsCHgmvduLuSOAk2N3waof7cHd4tRNvwtspc9PxRiS63arNTsZ7WFLtIGN8T0urnWVhuOMVe5bKqEJiTgWrnVGaaidVgWoHtwI57ihgUKaEBhc9EZGc04YrQU6Oewqo/ozh1Q6PS8YC3lIxngHGeNbwGC8mUpzyNhcpUnKWVjuDcfd2PBVvvloQcB5/b8fLAyfBaMOrHe7D0fh7O95ow6sdTnS5arOT8V6WVDvIGN/b0mpnMAx3NqGBK1Lt7FNIzPsGq519NNXOvhWodnArkOPuAwzKfYUGFz0RkZz3M1wJcnLcW0D17294tcPjsr8FvKVifH9gjB9geIwXEylOeZuLFCkHWlrtDIKtNdGkivegakHAB8GrnWjyIOAkONjwaof78GB4tRNNHmx4tcOJ7sBqs5PxIZZUO8gYP9TSamcQDHfU08AVqXYOKyTmw4PVzmGaaufwClQ7uBXIcQ8DBuXhQoOLnohIzkcYrgQ5OR4qoPqPNLza4XE50gLeUjF+JDDGjzI8xouJFKe8zUWKlKMtrXYGwtaadJNPsh1TLQj4GHi1k3aPAU6CYw2vdrgPj4VXO+kmvJ0yNx1vRKI7utrsZHycJdUOMsbHWFrtDIThTlfsk2zHFxLzCcFq53hNtXNCBaod3ArkuMcDg/IEocFFT0Qk57GGK0FOjmMEVP+Jhlc7PC4nWsBbKsZPBMb4SYbHeDGR4pS3uUiRcrKl1c4AXLWTUfGeUi0I+BR8tZM5BTgJTjW82uE+PBVf7WRONbza4UR3crXZyXicJdUOMsbHW1rtDMAJ4rQGrki1c1ohMU8IVjunaaqdCRWodnArkOOeBgzKCUKDi56ISM4TDVeCnBzHC6j+SYZXOzwukyzgLRXjk4AxPtnwGC8mUpzyNhcpUqZYWu30x32SLa3inVotCHgq/pNs6anASTDN8GqH+3Aa/pNs6WmGVzuc6KZUm52MT7ek2kHG+BmWVjv9cR92SmngilQ70wuJeUaw2pmuqXZmVKDawa1AjjsdGJQzhAYXPRGRnGcargQ5OZ4hoPpnGV7t8LjMsoC3VIzPAsb4mYbHeDGR4pS3uUiRMtvSaqcfbK3xmjyBek61IOA58GrHc+YAJ8Fcw6sd7sO58GrHc+YaXu1woptdbXYynmdJtYOM8bMsrXb6wXAnKvYE6rMLiXl+sNo5W1PtzK9AtYNbgRz3bGBQzhcaXPRERHJeYLgS5OR4loDqP8fwaofH5RwLeEvF+DnAGD/X8BgvJlKc8jYXKVLOs7Ta6StU7ZxfLQj4fIFq53zgJLjA8GqH+/ACgWrnAsOrHU5051WbnYwvtKTaQcb4RZZWO30trHYuLiTmS4LVzsWaaueSClQ7uBXIcS8GBuUlllQ7SM6XGq4EOTleJKD6LzO82uFxucwC3lIxfhkwxi83PMaLiRSnvM1FipQrLK12+sDWmlSTZ7JdWS0I+Ep4tZNKXgmcBFcZXu1wH14Fr3ZSyasMr3Y40V1RbXYyvtqSagcZ49dYWu30geFOVeyZbNcWEvN1wWrnWk21c10Fqh3cCuS41wKD8jqhwUVPRCTn6w1XgpwcrxFQ/TcYXu3wuDBG03lLxbiKs1xfN1abHePFRIpT3uYiRcpNwLipZLXTUI1aa1JRFe/N1YKAb66GVzvRm4GT4BZgYEn14S3V8Goneku17KKBSHQ3VZudjG8FJ2N/Q3NGxvhtQM6VrHYaYLhTEQ1ckWrn9kJivqM61LSyub160WqHXyRd7eBWIMe9HRiUdwgNLnoiIjnfabgS5OR4m4Dqv0t44XLK21wel7ss4C0V43cBY/xuw2O8mEhxyttcpEi5x9Jqpx621mSb3Nu5t1oQ8L3waiebvBc4Ce4zvNrhPrwPXu1kk/cZXu1worun2uxkfL8l1Q4yxh+wtNqph+HOVuzezoOFxPxQsNp5UFPtPFSBage3Ajnug8CgfEhocNETEcn5YcOVICfHBwRU/yOGVzs8Lo9YwFsqxh8Bxvijhsd4MZHilLe5SJHymKXVTh1srcnkVLyPVwsCfhxe7WRyjwMnwROGVzvch0/Aq51M7gnDqx1OdI9Vm52Mn7Sk2kHG+FOWVjt1MNyZrAauSLXzdCExPxOsdp7WVDvPVKDawa1Ajvs0MCifERpc9EREcn7WcCXIyfEpAdX/nOHVDo/Lcxbwlorx54Ax/rzhMV5MpDjlbS5SpLxgabXTG7bWuE3u7bxYLQj4RXi14yZfBE6ClwyvdrgPX4JXO27yJcOrHU50L1SbnYxftqTaQcb4K5ZWO71huN2K3dt5tZCYXwtWO69qqp3XKlDt4FYgx30VGJSvCQ0ueiIiOb9uuBLk5PiKgOp/w/Bqh8flDQt4S8X4G8AYf9PwGC8mUpzyNhcpUt6ytNrpBVtr0k2qnberBQG/Da920sm3gZPgHcOrHe7Dd+DVTjr5juHVDie6t6rNTsbvWlLtIGP8PUurnV4w3OmKVTvvFxLzB8Fq531NtfNBBaod3ArkuO8Dg/IDocFFT0Qk5w8NV4KcHN8TUP0fGV7t8Lh8ZAFvqRj/CBjjHxse48VEilPe5iJFyieWVju1sLXG81S8n1YLAv4UXu143qfASfCZ4dUO9+Fn8GrH8z4zvNrhRPdJtdnJ+HNLqh1kjH9habVTC8PtJTRwRaqdLwuJ+atgtfOlptr5qgLVDm4FctwvgUH5ldDgoicikvPXhitBTo5fCKj+bwyvdnhcvrGAt1SMfwOM8W8Nj/FiIsUpb3ORIuU7S6udGthaE21S7XxfLQj4e3i1E/W+B06CHwyvdrgPf4BXO1HvB8OrHU5031WbnYx/tKTaQcb4T5ZWOzUw3NGKVTs/FxLzL8Fq52dNtfNLBaod3ArkuD8Dg/IXocFFT0Qk518NV4KcHH8SUP2/GV7t8Lj8ZgFvqRj/DRjjvxse48VEilPe5iJFyh+WVjvVsLUm6ap4/6wWBPwnvNpJun8CJ8Ffhlc73Id/waudZBPeTpmbjjci0f1RbXYy/tuSagcZ4/9YWu1Uw3AnHQ1ckWonVFPoi5pQ08qGDwSrHX6RdLWDW4Eo4GtwQdmmRmZw0RMRybltDTb5oCccJ8d/BFR/uxrZhcspb3N5XNrVmM9bKsbbAWO8veExXkykOOVtLlKkdADGTSWrnZ6wtSbhqHiXqhEEzM6x1U7CWQo4CZYGTk6pPly6Bl3tJJylhRcNRKLrUGN2Mu4ITsb+huaMjPFOQM6VrHZ6wqqdeF4DV6Ta6VxIzF2C1U5nTbXTpQLVTk9gtdMZGJRdamQGFz0RkZy7Gq4EOTl2ElD93QyvdnhculnAWyrGuwFjfBnDY7yYSHHK21ykSOluabXTA7bWpJs8gbqqRhBwFbzaSeeqgJOgh+HVDvdhD3i1k871MLza4UTXvcbsZNzTkmoHGePVllY7PXBfZK/YE6hrCom5Nljt1GiqndoKVDs9gNVODTAoa2tkBhc9EZGcexmuBDk5Vguo/t6GVzs8Lr0t4C0V472BMV5neIwXEylOeZuLFCn1llY7VbC1Jtzk3k5DjSDgBni1E3YagJOgj+HVDvdhH3i1E3b6GF7tcKKrrzE7Gfe1pNpBxng/S6udKli141bs3k7/QmIeEKx2+muqnQEVqHaqgNVOf2BQDqiRGVz0RERyHmi4EuTk2E9A9Q8yvNrhcRlkAW+pGB8EjPHBhsd4MZHilLe5SJGyrKXVTnfcWpNR8S5XIwh4OXi142SWA06CIYZXO9yHQ+DVjpMZYni1w4lu2Rqzk/HyllQ7yBhfwdJqpzvu+0ZpDVyRamdoITGvGKx2hmqqnRUrUO0AVyB3KDAoV6yRGVz0RERyXslwJcjJcQUB1b+y4dUOj8vKFvCWivGVgTG+iuExXkykOOVtLlKkrGpptbMMbK2JN/kk22o1goBXg1c78dxqwEmwuuHVDvfh6vBqJ55b3fBqhxPdqjVmJ2PHkmoHGeOupdXOMrjv7VTsk2zhQmKOBKudsKbaiVSg2lkGWO2EgUEZqZEZXPRERHKOGq4EOTm6Aqo/Zni1w+MSs4C3VIzHgDEeNzzGi4kUp7zNRYqUhKXVTjfYWuM2eSabVyMI2INXO67rASdB0vBqh/swCa923Ca8nTI3HW9EokvUmJ2M17Ck2kHG+JqWVjvdcJ9kq9gz2dYqJOa1g9XOWppqZ+0KVDvdgNXOWsCgXLtGZnDRExHJeR3DlSAnxzUFVP+6hlc7PC7rWsBbKsbXBcb4MMNjvJhIccrbXKRIWc/Saqcr8KHBKt71awQBr1+D97uB4RUK896gZmEHg/yKVBWcUNarMTvpbWhJVYGMy42EEz1iTDYSiPFKJtQuQgl14xpBwBsLJNRNDE+ozHuTJQkV5mtTSxIqMi43Mzyh8phsZnlC7Qx8crKKd/MaQcCbC0zWzYHBtoXhyZn7cAuB8n4Lw6/H25Dot7Qk0SNjfCvDL5HwmGwlMF+2NvwyIOeJrYVEnFRcbg2My20Mj8ti+cwpb3OR+Wxbw2Ocx3hbgQINGYcsCHuGFt4KUzc07j97yszzEBRnWPT+ZRulbwcW9rej8dyebAeyHcl2ItuZbBeyXcmGk40g241sJNnuZHuQ7Uk2iixFlibLkGXJcmR5stFke5HtTbYP2b5k+5HtT3YA2YFkBwXvnW5XuE+qtm2vadtB07ajpm0nTdvOmrZdNG27atqGa9pGaNp207SN1LTtrmnbQ9O2p6ZtlKYtpWlLa9oymraspi2nactr2kZr2vbStO2tadtH07avpm0/Tdv+mrYDNG0HatoOqln0nvygwt9hhb9OeVuTpFNustwOkHj9+/vbg3wxxx0gvv7trx3L9xUu9Je7U7m+oo197+5cni9HGUd3l3J8hZvEhLvr4vtyAvHlDl9MX/H8IrHqjlg8X54m7t3dFseXp51D7sjW+0oUmY/u7q31lSg6t909WucrXCJPuHu2xleiZM5xR7XcV6aZ/OWmWuor0WwudNMt8+W0IK+6mZb4clqUo91s875iLcz3bq45X9EWrx1uvqSvaL4V65A7upSvRKvWNHev4r68Vq6P7t5FfCXzrV5r3X30vpzFWLfdfXW+nMXSAO5+i/pyF1NPuPsHfWUXW5u4BzT1FSlD57gHKr7C+bI0k3sQsEiv5N2Lg2BaL9vk2wQH1wgCPrgG/W2CrHswbgDdQwCdKnn3gvvwEODVWL8PDwFPgkp9Khw3ebMV+1T4oYUJdljwysahNYt+KvywGvlPheMyieMeCpxAh4EHFx18PGkOBU5Gn/ehlq5IB8LiKJlV8R5eIwj4cPiKlMweDlyRjjB8ReI+PAK+IiWzR1i6Ih0Iw53MaOCKrEhHFibYUcEV6UjNinRUBVakA4Er0pHACXSU0OCibwQjOR8NTGahEH61PKSQgNA3gpGlwDHAZKbrQ6e8zeUxPkZAyRxjqZI5AJZ/0hEV77E1goCPhSuZdORY4OQ/znAlw314HFzJpCPHCU9+RAI9xvAEOgbch/6GXniRMX48cO5VUgEfAMOdDmvgiijgEwqJeWxQAZ+gUcBjK6CAcSuQ454ADMqxQoOLnohIzicKK2CnvM3l5Hi8gHo7yXDVyuNykgW8pWL8JGCMn2x4jBcTKQjxg/J1CnjBrlS1sz9srfHyKt5TawQBnwqvdrz8qcABHGd4tcN9OA5e7Xj5cYZXO5zoTqkxOxmPBydjf0NzRsb4aZZWO/vDcHs5DVyRamdCITFPDFY7EzTVzsQKVDu4FchxJwCDcqLQ4KInIpLzJMOVICfH0wRU/2TDqx0el8kW8Pa3toI4y/U1xfAYLyZSnPI2FylSplp6b2c/2FoTbvLUh2k1goCnwaudsDMNOAlON7za4T48HV7thJ3TDa92ONFNrTE7GZ9hSbWDjPHpllY7+8FwN/3J+RASZ6DamVFIzDOD1c4MTbUzswLVDm4FctwZwKCcKTS46ImI5DzLcCXIyXG6gOo/0/Bqh8flTAt4S8X4mcAYn214jBcTKU55m4sUKXMsrXb2ha012SbVztwaQcBz4dVO1pkLnATzDK92uA/nwaudrDPP8GqHE92cGrOT8VmWVDvIGD/b0mpnXxjuTMWqnfmFxLwgWO3M11Q7CypQ7eBWIMedDwzKBUKDi56ISM7nGK4EOTmeLaD6zzW82uFxOdcC3lIxfi4wxs8zPMaLiRSnvM1FipTzLa129oGtNfEmz8S4oEYQ8AXwaifuXgCcBBcaXu1wH14Ir3biTXg7ZW463ohEd36N2cn4IkuqHWSMX2xptbMPDHe8Ys9SuaSQmC8NVjuXaKqdSytQ7eBWIMe9BBiUlwoNLnoiIjlfZrgS5OR4sYDqv9zwaofH5XILeEvF+OXAGL/C8BgvJlKc8jYXKVKutLTa2Rt3b8dT8V5VIwj4Kvy9He8q4CS42vBqh/vwavy9He9qw6sdTnRX1pidjK+xpNpBxvi1llY7e8NwZxMauCLVznWFxHx9sNq5TlPtXF+Bage3AjnudcCgvF5ocNETEcn5BsOVICfHawVU/42GVzs8LjdawFsqxm8ExvhNhsd4MZHilLe5SJFys6XVzl6wtSaaVPHeUiMI+BZ4tRNN3gKcBLcaXu1wH94Kr3aiyVsNr3Y40d1cY3Yyvs2SagcZ47dbWu3sBcMd9TRwRaqdOwqJ+c5gtXOHptq5swLVDm4Fctw7gEF5p9DgoicikvNdhitBTo63C6j+uw2vdnhc7raAt1SM3w2M8XsMj/FiIsUpb3ORIuVeS6ud0bC1Jt3kk2z31QgCvg9e7aTd+4CT4H7Dqx3uw/vh1U66CW+nzE3HG5Ho7q0xOxk/YEm1g4zxBy2tdkbDcKcr9km2hwqJ+eFgtfOQptp5uALVDm4FctyHgEH5sNDgoicikvMjhitBTo4PCqj+Rw2vdnhcHrWAt1SMPwqM8ccMj/FiIsUpb3ORIuVxS6udPK7ayah4n6gRBPwEvtrJPAGcBE8aXu1wHz6Jr3YyTxpe7XCie7zG7GT8lCXVDjLGn7a02snjBHFaA1ek2nmmkJifDVY7z2iqnWcrUO3gViDHfQYYlM8KDS56IiI5P2e4EuTk+LSA6n/e8GqHx+V5C3hLxfjzwBh/wfAYLyZSnPI2FylSXrS02snhPsmWVvG+VCMI+CX8J9nSLwEnwcuGVzvchy/jP8mWftnwaocT3Ys1ZifjVyypdpAx/qql1U4O92GnlAauSLXzWiExvx6sdl7TVDuvV6Dawa1AjvsaMChfFxpc9EREcn7DcCXIyfFVAdX/puHVDo/LmxbwlorxN4Ex/pbhMV5MpDjlbS5SpLxtabWTha01XpMnUL9TIwj4HXi14znvACfBu4ZXO9yH78KrHc951/BqhxPd2zVmJ+P3LKl2kDH+vqXVThaGO1GxJ1B/UEjMHwarnQ801c6HFah2cCuQ434ADMoPhQYXPRGRnD8yXAlycnxfQPV/bHi1w+PysQW8pWL8Y2CMf2J4jBcTKU55m4sUKZ9aWu1khKqdz2oEAX8mUO18BpwEnxte7XAffi5Q7XxueLXDie7TGrOT8ReWVDvIGP/S0monY2G181UhMX8drHa+0lQ7X1eg2sGtQI77FTAov7ak2kFy/sZwJcjJ8UsB1f+t4dUOj8u3FvCWivFvgTH+neExXkykOOVtLlKkfG9ptZOGrTWpJs9k+6FGEPAP8GonlfwBOAl+NLza4T78EV7tpJI/Gl7tcKL7vsbsZPyTJdUOMsZ/trTaScNwpyr2TLZfCon512C184um2uEXSVc7uBXIcX8BBuWvQoOLnohIzr8ZrgQ5Of4soPp/N7za4XH53QLeUjH+OzDG/zA8xouJFKe8zUWKlD8trXZSuGonquL9q0YQ8F/4aif6F3AS/G14tcN9+De+2on+bXi1w4nuzxqzk/E/llQ70BivtbPaSeEEcUQDV6TaaVNbiIfaUNPKhg8Eqx1+kXS1g1uBHLdNLS4o29bKDC56IiI5t6vFJh/0hOPkGKrFLwzta2UXLqe8zeVxaW8Bb6kYbw+M8Q6Gx3gxkeKUt7lIkbIUMG4qWe2Mgq012Sb3dpauFQTMzrHVTja5NHASdAROTqk+7FiLrnayyY7CiwYi0S1Va3Yy7gROxv6G5oyM8c6WVjujYNVOtmL3droUEnPXYLXTRVPtdK1AtTMKWO10AQZl11qZwUVPRCTnboYrQU6OnQVU/zKGVzs8LstYwFsqxpcBxnh3w2O8mEhxyttcpEipsrTa2RO21mRyKt4etYKAe8CrnUyuB3AS9DS82uE+7AmvdjK5noZXO5zoqmrNTsbVllQ7yBivsbTa2RNW7WSyGrgi1U5tITH3ClY7tZpqp1cFqp09gdVOLTAoe9XKDC56IiI59zZcCXJyrBFQ/XWGVzs8LnUW8JaK8TpgjNcbHuPFRIpT3uYiRUqDpdXOHrC1xm1yb6dPrSDgPvBqx032AU6CvoZXO9yHfeHVjpvsa3i1w4muodbsZNzPkmoHGeP9La129oBVO27F7u0MKCTmgcFqZ4Cm2hlYgWpnD2C1MwAYlANrZQYXPRGRnAcZrgQ5OfYXUP2DDa92eFwGW8BbKsYHA2N8WcNjvJhIccrbXKRIWc7Samd32FqTblLtDKkVBDwEXu2kk0OAk2B5w6sd7sPl4dVOOrm84dUOJ7rlas1OxitYUu0gY3yopdXO7rBqJ12xamfFQmJeKVjtrKipdlaqQLWzO7DaWREYlCvVygwueiIiOa9suBLk5DhUQPWvYni1w+OyigW8pWJ8FWCMr2p4jBcTKU55m4sUKatZWu2MxD2B2lPxrl4rCHh1eLXjeasDJ4FjeLXDfejAqx3PcwyvdjjRrVZrdjJ2Lal2kDEetrTaGQmrdryEBq5ItRMpJOZosNqJaKqdaAWqnZHAaicCDMporczgoiciknPMcCXIyTEsoPrjhlc7PC5xC3hLxXgcGOMJw2O8mEhxyttcpEjxLK12doOtNdEm1U6yVhBwEl7tRL0kcBKsYXi1w324BrzaiXprGF7tcKLzas1OxmtaUu0gY3wtS6ud3WDVTrRi1c7ahcS8TrDaWVtT7axTgWpnN2C1szYwKNeplRlc9EREcl7XcCXIyXEtAdU/zPBq5z/jYgFvqRgfBozx9QyP8WIixSlvc5EiZX1Lq50RsLUm6ap4N6gVBLwBvNpJuhsAJ8GGhlc73IcbwqudZBPeTpmbjjci0a1fa3Yy3siSagcZ4xtbWu2MgFU7SUcDV6Ta2aSQmDcNVjubaKqdTStQ7YwAVjubAINy01qZwUVPRCTnzQxXgpwcNxZQ/ZsbXu3wuGxuAW+pGN8cGONbGB7jxUSKU97mIkXKlpZWO8Nha03CUfFuVSsIeCt4tZNwtgJOgq0Nr3a4D7eGVzsJZ2vDqx1OdFvWmp2Mt7Gk2kHG+LaWVjvDYdVOPK+BK1LtbFdIzNsHq53tNNXO9hWodoYDq53tgEG5fa3M4KInIpLzDoYrQU6O2wqo/h0Nr3Z4XHa0gLdUjO8IjPGdDI/xYiLFKW9zkSJlZ0urnV1xTylo8gTqXWoFAe8Cr3bSuV2Ak2BXw6sd7sNd4dVOOrer4dUOJ7qda81OxsMtqXaQMT7C0mpnV9xTCir2BOrdCol5ZLDa2U1T7YysQLWzK7Da2Q0YlCNrZQYXPRGRnHc3XAlychwhoPr3MLza4XHZwwLeUjG+BzDG9zQ8xouJFKe8zUWKlFGWVju7wNaacJN7O6laQcApeLUTdlLASZA2vNrhPkzDq52wkza82uFEN6rW7GScsaTaQcZ41tJqZxfcE6grdm8nV0jM+WC1k9NUO/kKVDu7AKudHDAo87Uyg4ueiEjOow1XgpwcswKqfy/Dqx0el70s4C0V43sBY3xvw2O8mEhxyttcpEjZx9JqZ2fcWpNR8e5bKwh4X3i142T2BU6C/QyvdrgP94NXO05mP8OrHU50+9SanYz3t6TaQcb4AZZWOzvDqh0nrYErUu0cWEjMBwWrnQM11c5BFah2gCuQeyAwKA+qlRlc9EREcj7YcCXIyfEAAdV/iOHVDo/LIRbwlorxQ4AxfqjhMV5MpDjlbS5SpBxmabWzE2ytiTf5JNvhtYKAD4dXO/Hc4cBJcITh1Q734RHwaieeO8LwaocT3WG1ZifjIy2pdpAxfpSl1c5OuO/tVOyTbEcXEvMxwWrnaE21c0wFqp2dgNXO0cCgPKZWZnDRExHJ+VjDlSAnx6MEVP9xhlc7PC7HWcBbKsaPA8b4GMNjvJhIccrbXKRIOd7SamdH2FrjNnkm2wm1goBPgFc7rnsCcBKMNbza4T4cC6923Ca8nTI3HW9Eoju+1uxkfKIl1Q4yxk+ytNrZEfdJtoo9k+3kQmI+JVjtnKypdk6pQLWzI7DaORkYlKfUygwueiIiOZ9quBLk5HiSgOofZ3i1w+MyzgLeUjE+Dhjj4w2P8WIixSlvc5Ei5TRLq50dcB/GaPK9nQm1goAn1OL9TjS8QmHeE2sXdjDIr0hVwQnltFqzk94kS6oKZFxOFk70iDGZLBDjlUyo2wsl1Cm1goCnCCTUqYYnVOY9dUlChfmaZklCRcbl6YYnVB6T0y1PqNvV4PpDxXtGrSDgMwQm6xnAYJtueHLmPpwuUN5PN/x6vA2JfoYliR4Z4zMNv0TCYzJTYL7MMvwyIOeJWUIiTiouZwHj8kzD47JYPnPK21xkPptteIzzGM8WKNCQcciCUL0tpgqtOTw/2xesEopxDnBA2yo45xYSzbzgjUI+MDbQNq/Qpm7oG4VzgCM4t+W+Ms34cueBL4Z3COnvXoda2Z/N4Q4JBuVcYJ+ok+isYDCeVbvoLAsGHjJYmsHqNkfmLGAQn10LCwZH7dOzWzCZy8U+D9gPyD6d34o+be691D6dryTNjkp/qn3qlLe5f5f2F87k3Ugsl4g58VQ0lo1HwtlwwslGY3mXAIeTUeqafCbqZb1wJB9OhDN/Y/H9J8b8xOYvJH+HFi4gvL+A/p5Ddm7tvytopa67nKOMu+tFwuFEhOPDyzpuNEtLQDicTUedjJPKhHPJqJvMR8PRSCabSVMspdy8k09lknnvX18q3vNqBQGfp9Ga5YI/D6ixzzf8ugv34fkarVluH54PVgTtQpX5PNs5Qh8HCWH7t4kiuEAVAOgLAsCBdNXVQAXdSsyZlgTfBYtRhDbX6RcAJ/OFYHno9+uFinJpbSy4/KQ018k7ybCTchKZeCKdzIbTXiofycci2cji9mtzwY7s14uE+vWiQr9Wsq5FJiM1eV5cWJEv4TkokTAuELh6cYHhV/IXd3I4reBdLsZLDb/yxYF5qcBV7cuEksJlJZKtU97mXiLUF5cL9cXlZSw8zWGWiotY//9qTmn2uppUDMT7m50HzinwRudS4Hi7yD78/3LN82Kha55XlKpwnPI291KhhHhFiQqnGTfNXkNlzFcIJIYEODH4W/tWjllrhEy5nK+sNTPBIMdCjcsrNde2Wzs+zfU5cnyuUq9LRiI0N7IJN5/NR2KJZDjtxiPxeD6aT8S9aDYfi6ayiZwbTUXCyVzCybtejq72RjKJeD6ZzcTzatJ2s5FINJtMZ9xYOJ5KO142knLy0USEit9sJJHNRrx4PBWJZONe3ktSwUplsOfEEomkEw9HkmGp8blKqTRRi0JzVzZUn7YsClfbuChcLbwoXC2wKHiGLApFgzjxn+++5pFJ5xpDFwVPKOlcA1gUmrvMhxyfaw1dFKTG59r/R5cfrytcfrxed/nRKW8reu0feR+kXF/AS5kiH+Lz+xD9iQepPizX1w2GjwdPmBsEFvYbhUTOjYKXRa8X6oubhPriJsHLolJxsYbhl0WlYmBNCy6L3iBwWRQ43u6aSy6LBrf/5G9Un6jC72bJCvgGoYR4s2AFzJhvFkgMa1lyWfQGoCi6pdbMBLOWUIV1SwUuiyLH51ZgBbwmsAKWGp9bNeOD/oAXcnxuE8qftwH6obkrNch+uF2oH25vwWVykxdyDVxYHKsi4Q4bRcIdwiLhDgGRsHaFREKZn46FJrk7gb6QImFtoUXozhaIhHI/ZYscn7tqcQs7UiRIjc9dgleeViIfK4XweeNuwz+UyZzvFsiX9wDi/N+n3uZFeDO+ewR432v4eDPnewV432c4b8Z3nwDv+w3nzfjuF+D9gOG8Gd8DArwfNJw343tQgPdDhvNmfA8J8H7YcN6M72EB3o9YsI49IsD7UcN5M75HBXg/ZsF4PybA+3HDeTO+xwV4P2E4b8b3hADvJw3nzfieFOD9lAXz+ykB3k8bzpvxPS3A+xnDeTO+ZwR4P2s4b8b3rADv5wznzfieE+D9vAV57XkB3i8YzpvxvSDA+0XDeTO+FwV4v2Q4b8b3kgDvly2Y3y8L8H7FcN6M7xUB3q9aMN6vCvB+zXDejO81Ad6vWzDerwvwfsNw3ozvDQHebxrOm/G9KcD7LcN5M763BHi/bcH8fluA9zuG82Z87wjwfteC8X5XgPd7hvNmfO8J8H7fgvF+X4D3B4bzZnwfCPD+0HDejO9DAd4fGc6b8X0kwPtjC+b3xwK8PzGcN+P7RID3p4bzZnyfCvD+zII4/0yA9+eG82Z8nwvw/sKC8f5CgPeXhvNmfF8K8P7KgvH+SoD314bzZnxfC/D+xnDejO8bAd7fGs6b8X0rwPs7w3kzvu8EeH9vOG/G970A7x8syOc/CPD+0XDejO9HAd4/Gc6b8f0kwPtnw3kzvp8FeP9iwfz+RYD3r4bzZny/CvD+zYLx/k2A9++G82Z8vwvw/sNw3ozvDwHefxrOm/H9KcD7L8N5M76/BHj/bUFe+1uA9z+G82Z8/wjwDvUyf7wZI5p3G8N5M742ArzbGs6b8bUV4N3OgjhvJ8C7veG8GV97Ad4dDOfN+DoI8F7KcN6MbykB3ksbzpvxLS3Au6PhvBlfRwHenQznzfg6CfDubDhvxtdZgHcXw3kzvi4CvLtaoFu6CvDuZjhvxtdNgPcyhvNmfMsI8O5uQZx3F+BdZThvxlclwLuH4bwZXw8B3j0N5834egrwrrZgflcL8K4xnDfjqxHgXWvBeNcK8O5lOG/G10uAd2/DeTO+3gK86yyI8zoB3vWG82Z89QK8GywY7wYB3n0M5834+gjw7mvBePcV4N3PcN6Mr58A7/6G82Z8/QV4DzCcN+MbIMB7oOG8Gd9AAd6DDOfN+AYJ8B5sQT4fLMB7WcN5M75lBXgvZzhvxrecAO8hFsT5EAHeyxvOm/EtL8B7BcN5M74VBHgPNZw34xsqwHtFw3kzvhUFeK9kOG/Gt5IA75UN5834VhbgvYoF69gqArxXNZw341tVgPdqhvNmfKsJ8F7dcN6Mb3UB3o7hvBmfI8DbtSCvuQK8w4bzZnxhAd4Rw3kzvogA76gFcR4V4B0znDfjiwnwjlsw3nEB3gnDeTO+hABvz3DejM8T4J20IM6TArzXMJw341tDgPeaFoz3mgK81zKcN+NbS4D32obzZnxrC/Bex4I4X0eA97qG82Z86wrwHmbBeA8T4L2e4bwZ33oCvNc3nDfjW1+A9wYWxPkGArw3NJw349tQgPdGhvNmfBsJ8N7YcN6Mb2MB3psYzpvxbSLAe1PDeTO+TQV4b2Y4b8a3mQDvzQ3nzfg2F+C9hQXr9xYCvLc0nDfj21KA91YWjPdWAry3Npw349tagPc2hvNmfNsI8N7WcN6Mb1sB3tsZzpvxbSfAe3vDeTO+7QV472A4b8a3gwDvHQ3nzfh2FOC9kwXr904CvHc2nDfj21mA9y6G82Z8uwjw3tWCON9VgPdww3kzvuECvEcYzpvxjRDgvZsFcb6bAO+RhvNmfCMFeO9uwXjvLsB7D8N5M749BHjvaThvxrenAO9RhvNmfKMEeKcM5834UgK804bzZnxpAd4ZC/J5RoB31nDejC8rwDtnOG/GlxPgnbcgzvMCvEcbzpvxjRbgvZcF472XAO+9DefN+PYW4L2PBeO9jwDvfQ3nzfj2FeC9n+G8Gd9+Arz3tyDO9xfgfYDhvBnfAQK8DzScN+M7UID3QYbzZnwHCfA+2IL5fbAA70MM5834DhHgfajhvBnfoQK8D7Mgzg8T4H244bwZ3+ECvI8wnDfjO0KA95GG82Z8RwrwPspw3ozvKAHeRxvOm/EdLcD7GMN5M75jBHgfa8E6dqwA7+MM5834jhPgPcaC8R4jwPt4w3kzvuMFeJ9gOG/Gd4IA77GG82Z8YwV4n2jB/D5RgPdJhvNmfCcJ8D7ZgvE+WYD3KYbzZnynCPA+1YLxPlWA9zjDeTO+cQK8x1sw3uMFeJ9mOG/Gd5oA7wkWjPcEAd4TDefN+CYK8J5kOG/GN0mA92QL4nyyAO8phvNmfFMEeE81nDfjmyrAe5rhvBnfNAHepxvOm/GdLsD7DMN5M74zBHhPtyCfTxfgPcNw3oxvhgDvmYbzZnwzBXjPMpw345slwPtMC+b3mQK8ZxvOm/HNFuA9x3DejG+OAO+5hvNmfHMFeM8znDfjmyfA+yzDeTO+swR4n21BPj9bgPd8w3kzvvkCvBdYMN4LBHifYzhvxneOAO9zLRjvcwV4n2c4b8Z3ngDv8y0Y7/MFeF9gOG/Gd4EA7wsN5834LhTgfZHhvBnfRQK8L7Zgfl8swPsSw3kzvksEeF9qwXhfKsD7MsN5M77LBHhfbjhvxne5AO8rLIjzKwR4X2k4b8Z3pQDvqywY76sEeF9tOG/Gd7UA72ssGO9rBHhfazhvxnetAO/rDOfN+K4T4H294bwZ3/UCvG+wYH7fIMD7RsN5M74bBXjfZDhvxneTAO+bLYjzmwV432I4b8Z3iwDvWy0Y71sFeN9mOG/Gd5sA79stGO/bBXjfYThvxneHAO87DefN+O4U4H2X4bwZ310CvO82nDfju1uA9z2m5zXCd48A73styOf3CvC+z3DejO8+Ad73G86b8d0vwPsBw3kzvgcEeD9owfx+UID3Q4bzZnwPCfB+2HDejO9hAd6PGM6b8T0iwPtRw3kzvkcFeD9mQV57TID344bzZnyPC/B+wnDejO8JAd5PWhDnTwrwfspw3ozvKQHeTxvOm/E9LcD7GcN5M75nBHg/azhvxvesAO/nDOfN+J4T4P28Bfn8eQHeLxjOm/G9IMD7RQvG+0UB3i8ZzpvxvSTA+2ULxvtlAd6vGM6b8b0iwPtVC8b7VQHerxnOm/G9JsD7dQvG+3UB3m8YzpvxvSHA+03DeTO+NwV4v2U4b8b3lgDvtw3nzfjeFuD9juG8Gd87ArzftSCfvyvA+z3DeTO+9wR4v2/BeL8vwPsDw3kzvg8EeH9owXh/KMD7I8N5M76PBHh/bMF4fyzA+xPDeTO+TwR4f2rBeH8qwPszw3kzvs8EeH9uOG/G97kA7y8siPMvBHh/aThvxvelAO+vDOfN+L4S4P21BXH+tQDvbwznzfi+EeD9rQXj/a0A7+8M5834vhPg/b3hvBnf9wK8fzCcN+P7QYD3jxbM7x8FeP9kOG/G95MA758N5834fhbg/YvhvBnfLwK8f7Vgfv8qwPs3w3kzvt8EeP9uwXj/LsD7D8N5M74/BHj/acF4/ynA+y/DeTO+vwR4/23BeP8twPsfw3kzvn8EeId6mz/ejBHNu43hvBlfGwHebS0Y77YCvNsZzpvxtRPg3d5w3oyvvQDvDobzZnwdBHgvZThvxreUAO+lDefN+JYW4N3RcN6Mr6MA706G82Z8nQR4dzacN+PrLMC7i+G8GV8XAd5dDefN+LoK8O5mOG/G102A9zKG82Z8ywjw7m44b8bXXYB3leG8GV+VAO8ehvNmfD0EePc0nDfj6ynAu9pw3oyvWoB3jeG8GV+NAO9aw3kzvloB3r0M5834egnw7m04b8bXW4B3neG8GV+dAO96w3kzvnoB3g2G82Z8DQK8+xjOm/H1EeDd13DejK+vAO9+vYH3IMhHD4W7uqH7ox9wvFS8/XsLAu7fG+93AHAApXgP6L2wg0F+xW5KStyMHQhOLv7WNsg/HvaiUS8cSacSYTcVTSfi+WQ2k8qHvXQ4m3JynhPPJsKpiJfyom46k/KcdDYVjiWyqWgu7oaRsTRI8UXvmHGSeScV81KJHDlycg7tpL1cPh5OpTNRJ5x1XTcXpf+Fc9loMp2Nu+k4vXss7dJ5urEOpzPJeCJBZ2ay6WjUjSXDqWzaTbhMPpr3EpG0m44Q1Egilg/n8lEnSZ1BNPPUBZF0rl0hLhfpw2gylSO36Ug8kksT2Hw4Fk8l6axMPBeJR9Pcv7FIOB+PRqjfwk4kmspnojHPSYa9TDTaDtiHgw1flBjfYIH5sqzhvBnfsgK8lzOcN+NbToD3EMN5M74hAryXN5w341tegPcKhvNmfCsI8B5qOG/GN1SA94qG82Z8KwrwXslw3oxvJQHeKxvOm/GtLMB7FcN5M75VBHivajhvxreqAO/VDOfN+FYT4L264bwZ3+oCvB3DeTM+R4C3azhvxucK8A4bzpvxhQV4RwznzfgiAryjhvNmfFEB3jHDeTO+mADvuOG8GV9cgHfCcN6MLyHA2zOcN+PzBHgnDefN+JICvNcwnDfjW0OA95qW3tRdU+im7lq9BQGvJXBTd23Db+oy77V7L+xgkF8RrHzzdZDAJFunQjd1y73RiYyldXvjbpTqxtrN5zP5RDaRy0fC4UwikU5EMrFYOpOhG9bptEtNWS9JHUCtToLeJZyIexEvksk4aTeezf/nhunampu6rhNPxOLJVJ7egPokTCVjJJfPE3/yl42m4k4sHQun45Fs3MsTLTdDPZCNJcL5aC4ZdsODgX04zPBF6T/4BObLeobzZnzrCfBe33DejG99Ad4bGM6b8W0gwHtDw3kzvg0FeG9kOG/Gt5EA740N5834NhbgvYnhvBnfJgK8NzWcN+PbVID3ZobzZnybCfDe3HDejG9zAd5bGM6b8W0hwHtLw3kzvi0FeG9lOG/Gt5UA760N5834thbgvY3hvBnfNgK8tzWcN+PbVoD3dobzZnzbCfDe3nDejG97Ad47GM6b8e0gwHtHw3kzvh0FeO9kOG/Gt5MA750N5834dhbgvYvhvBnfLgK8d7X05uauQjc3h/cWBDxc4ObmCMNvbjLvEb0XdjDIrwhWvgm5rsAk261CNzfLveGHjKWRvXE3DLVjHcs7+Xw6kcplcrFcJOXG07FoOBZNefFcNO15qayTjdArcul8OJkLh2MJl94oFoskvEQmk/OGFeJykRvEqUQkmkunI+F4JOrm8ik3mXYicTebdCNOJhtNpMPxdCLqeXRjNhuO53IZaszTPVsvQT3ipoYB+3B3wxclxre7wHzZw3DejG8PAd57Gs6b8e0pwHuU4bwZ3ygB3inDeTO+lADvtOG8GV9agHfGcN6MLyPAO2s4b8aXFeCdM5w348sJ8M4bzpvx5QV4jzacN+MbLcB7L8N5M769BHjvbThvxre3AO99DOfN+PYR4L2v4bwZ374CvPcznDfj20+A9/6G82Z8+wvwPsBw3ozvAAHeBxrOm/EdKMD7IMN5M76DBHgfbDhvxnewAO9DDOfN+A4R4H2o4bwZ36ECvA+z9CbfYUI3+Q7vLQj4cIGbfEcYfpOPeR/Re2EHg/yKYOWbcSMFJtmRFbrJV+6NL2QsHdUbd+NMN9Z0pzKaCqfSMXppNB9LROi+pktv4eTpdiaDiWRj2VTSiaYj8Wgynw4n0hknknb4/fLpVGL3Qlwu0oeZZD6VziS8aCwbc4hmLJwLp5xIws1Qh7h5NxrLOdm0F855RCcZdzPhWN7NReiWaZo7aHdgHx5t+KLE+I4WmC/HGM6b8R0jwPtYw3kzvmMFeB9nOG/Gd5wA7zGG82Z8YwR4H284b8Z3vADvEwznzfhOEOA91nDejG+sAO8TDefN+E4U4H2S4bwZ30kCvE82nDfjO1mA9ymG82Z8pwjwPtVw3ozvVAHe4wznzfjGCfAebzhvxjdegPdphvNmfKcJ8J5gOG/GN0GA90TDeTO+iQK8JxnOm/FNEuA92XDejG+yAO8phvNmfFMEeE81nDfjmyrAe5qlN7umCd3sOr23IODTBW52nWH4zS7mfUbvhR0M8iuClW9KHSUwyaZX6GZXuTeAkLE0ozfuBpJurMO5WCTmOHkvnshk6S5ZlG+axaOxTCyWTSfCkaxL99bCjheLZ9PZRML1cslo2vGoYxL5CN3hO7oQl4vc7Aq7Tj4Xj8RS6WgmEc3SXbh0Jp9w0pkw3T2MJGNxzyHUTjiczSaTbp5uJ2ajMSeeSlN7LJk9GtiHMw1flBjfTIH5Mstw3oxvlgDvMw3nzfjOFOA923DejG+2AO85hvNmfHMEeM81nDfjmyvAe57hvBnfPAHeZxnOm/GdJcD7bMN5M76zBXjPN5w345svwHuB4bwZ3wIB3ucYzpvxnSPA+1zDeTO+cwV4n2c4b8Z3ngDv8w3nzfjOF+B9geG8Gd8FArwvNJw347tQgPdFhvNmfBcJ8L7YcN6M72IB3pcYzpvxXSLA+1LDeTO+SwV4X2bpTZ/LhG76XN5bEPDlAjd9rjD8pg/zvqL3wg4G+RXByjdnZghMsisrddOnzBshyFi6qjfuRopurAlE2s2HM+F8xMsQqlwqlU/E8/l8LOVk49FEJOMmM8lohG4qpbxoNpakN3YTkWw0m4un0150ZiEug33oprLJcD4aJ+deNpmijkw5mRzxTuccL+zGchk35eYd6uhkLpdO062yeDabi8VTYTdJ/ZibCezDqw1flBjf1QLz5RrDeTO+awR4X2s4b8Z3rQDv6wznzfiuE+B9veG8Gd/1ArxvMJw347tBgPeNhvNmfDcK8L7JcN6M7yYB3jcbzpvx3SzA+xbDeTO+WwR432o4b8Z3qwDv2wznzfhuE+B9u+G8Gd/tArzvMJw347tDgPedhvNmfHcK8L7LcN6M7y4B3ncbzpvx3S3A+x7DeTO+ewR432s4b8Z3rwDv+wznzfjuE+B9v6U3P+4XuvnxQG9BwA8I3Px40PCbH8z7wd4LOxjkVwQr36S4SmCSPVShmx/l3hBAxtLDvXE3FHRj7YYT8Uw0H45EnFgm4hDPcC7ipBL5dM6LpbNOJh/J5cJZJ5WP5d0IAXDdZCLrZPMRQpLK5q8uxOUifZjNZb2k56Ry4XQ266ai4TAhdMhp0stnvEzMy8ecWCKRScVSsUwukg5nvITnxfKZrJOOhSNXA/vwEcMXJcb3iMB8edRw3ozvUQHejxnOm/E9JsD7ccN5M77HBXg/YThvxveEAO8nDefN+J4U4P2U4bwZ31MCvJ82nDfje1qA9zOG82Z8zwjwftZw3ozvWQHezxnOm/E9J8D7ecN5M77nBXi/YDhvxveCAO8XDefN+F4U4P2S4bwZ30sCvF82nDfje1mA9yuG82Z8rwjwftVw3ozvVQHerxnOm/G9JsD7dUtvArwudBPgjd6CgN8QuAnwpuE3AZj3m70XdjDIrwhWvlj/sMAke6tSNwHKvDCOjKW3e+MurGvHOhWj+wZZN5sIhzP5TDzJv26TymcSfOMjFksm0gSR3iWZzWQi6Ty9NkkHc6lkJkPOU+lHCnEZ7MNw3A3HsinXSTm5rBOPhBMxx0ulU04861JnRlKZuBun5mw6l41Ek/lYhNhkU8lYJBJJeLHEI8A+fMfwRYnxvSMwX941nDfje1eA93uG82Z87wnwft9w3ozvfQHeHxjOm/F9IMD7Q8N5M74PBXh/ZDhvxveRAO+PDefN+D4W4P2J4bwZ3ycCvD81nDfj+1SA92eG82Z8nwnw/txw3ozvcwHeXxjOm/F9IcD7S8N5M74vBXh/ZThvxveVAO+vDefN+L4W4P2N4bwZ3zcCvL81nDfj+1aA93eWXgz/Tuhi+Pe9BQF/L3Ax/AfDL4Yz7x96L+xgkF8RrHzR+m2BSfZjhS6Gl3uBGBlLP/XGXWDWjnXOicQT0RxdPI9lY9lEPJ7JpsN09T+Vp9sA0UQ+kXOTjhPPx+PhcDIWzyUy0WTGjXq5jJOMRGPvFOJykYvh4bhDtKNeNJqmi/PhmOuFk5FYJBn3ctGkG6P7DOGYF3W9SCwRTUTo4r2bpZ7Nx91IPp5JZ98B9uHPhi9KjO9ngfnyi+G8Gd8vArx/NZw34/tVgPdvhvNmfL8J8P7dcN6M73cB3n8Yzpvx/SHA+0/DeTO+PwV4/2U4b8b3lwDvvw3nzfj+FuD9j+G8Gd8/ArxDdWbzZnxsaN5tDOfN+NoI8G5rOG/G11aAdzvDeTO+dgK82xvOm/G1F+DdwXDejK+DAO+lDOfN+JYS4L10nZ0XhZcGjpeKt2OdIOCOdXi/nYADKMW7U93CDgb5FcHKF29/EhCLncHJxd8WuShc5oVSZCx1qcNdaNWNtRv34kk3E0nFU9EYOYplorlMLp3KpDOJfMrJx8OZSCwfTcbpQJKuNdM18HQkliMYkXAkHw7zxUzmG+xDN5nNEsh8JOVlo/GMG8s4biKeT6dj6WQsF81mYgnH8/J5ghbNuumsF83E0/lULJHNZDM0AD8DLwp3NXxRYnxdBRalbobzZnzdBHgvYzhvxreMAO/uhvNmfN0FeFcZzpvxVQnw7mE4b8bXQ4B3T8N5M76eAryrDefN+KoFeNcYzpvx1QjwrjWcN+OrFeDdy3DejK+XAO/ehvNmfL0FeNcZzpvx1QnwrjecN+OrF+DdYDhvxtcgwLuP4bwZXx8B3n0tvTjaV+jiaL86QcD9BC6O9jf84ijz7m/JxVG+iNlFYJINqNDF0XIvGCJjaWAd7oKjbqxdchR2vEQkGaMXhuN0Zj7t5fLJVCJMF39TRMnJp5P5cIR45L2Im6GXEuWwm3BSCTfbtRCXi/RhOu+Fs9RpiWwimnSoxwhbJkMXkp1c3KWLzDE3nMuk6NJyLBZ2nVw4Ec9Rf3iZnJePeblYV2AfDjJ8UWJ8gwTmy2DDeTO+wQK8lzWcN+NbVoD3cobzZnzLCfAeYjhvxjdEgPfyhvNmfMsL8F7BcN6MbwUB3kMN5834hgrwXtFw3oxvRQHeKxnOm/GtJMB7ZcN5M76VBXivYjhvxreKAO9VDefN+FYV4L2a4bwZ32oCvFc3nDfjW12At2PpRUJH6CKhWycI2BW4SBg2/CIh8w5bcpGQL+YNFJhkkUpdJCzzwhkylqJ1uAtvurEO5xOxJHn0Eql8OpyLxiLpmBfPe3QtNJ9Ix3KuG097XpicetF82I0kwol8PJl33Ri9MhNNDyrEZdtFYiiXS4cz6VjSc3PZaCweTabSuXQ253huNkMXMuMZL+642Vw0Ek3kEtmsGw976VQ4m0plopF0YhCwD2OGL0qMLyYwX+KG82Z8cQHeCcN5M76EAG/PcN6MzxPgnTScN+NLCvBew3DejG8NAd5rGs6b8a0pwHstw3kzvrUEeK9tOG/Gt7YA73UM58341hHgva7hvBnfugK8hxnO+z/4BHivZzhvxreeAO/1DefN+NYX4L2BpRfLNhC6WLZhnSDgDQUulm1k+MUy5r2RJRfL+KJWVGCSbVyhi2XlXkBCxtImdbgLUNqxjkS9lOdEvEQun4kkvXQ8y58RzLiJZCyc8bLhuJNM59x0xEtFsnQBMZlKZZOZZDzlZpNuxEnECnG5SB9m3XQqHicqUcKWdOkSAf2XT8WTuUw4nXWccDhF/2Wj1GspqndT/D1tL5+N5sLxXCafjgH7cFPDFyXGt6nAfNnMcN6MbzMB3psbzpvxbS7AewvDeTO+LQR4b2k4b8a3pQDvrQznzfi2EuC9teG8Gd/WAry3MZw349tGgPe2hvNmfNsK8N7OcN6MbzsB3tsbzpvxbS/AewfDeTO+HQR472g4b8a3owDvnSy9aLST0EWjnesEAe8scNFoF8MvGjHvXSy5aMQXdzYRmGS7VuiiUbkXUpCxNLwOdyFGO9bhTDbvhV03Ekuk0ykvmXTcfCSfS0RSUbpkFk0QyVQynnDoSlUmxruRRD6Sdb2cF0m6ieymhbhc9KJRMh6Lx9xMNpvMRT3XzUdzMTftOdlsJkW9m44SulzOTUTDTiqVi6foypbjZsJxN5GJ57zYpsA+HGH4osT4RgjMl90M5834dhPgPdJw3oxvpADv3Q3nzfh2F+C9h+G8Gd8eArz3NJw349tTgPcow3kzvlECvFOG82Z8KQHeacN5M760AO+M4bwZX0aAd9Zw3owvK8A7ZzhvxpcT4J239OJJXujiyeg6QcCjBS6e7GX4xRPmvZclF0/4IsdwgUm2d6UunpR5QQEZS/vU4S5I6MY6nM9HU5FwMuxlEnk3k0h7kXAslcs5XiaXd3NuLOYm8tF4LJemP0Qhn4xk6cpMPBaN8k/ihkcU4nKRPnTi+VQ6SnzjSYIS5jUnl8p4CS8djscT6WzETecjubCXi9DlnkQ8mkrxi7PJdDpLx5pc8Ci3D/c1fFFifPsKzJf9DOfN+PYT4L2/4bwZ3/4CvA8wnDfjO0CA94GG82Z8BwrwPshw3ozvIAHeBxvOm/EdLMD7EMN5M75DBHgfajhvxneoAO/DDOfN+A4T4H244bwZ3+ECvI+w9CLCEUIXEY6sEwR8pMBFhKMMv4jAvI+y5CICF/v7CEyyoyt0EaHcwhoZS8fU4Qpz3ViHE5FwwstmnAhdbsi7qXQ8EU7EomEvGo4T80jajYYTOc91UulYNpr1wolkynPCbi6fzobTGW/fQlwuchEhGeGfKIxnc+F81nXyBDWbdRKRPPVU0kklE/G8G09m6I8TIXxJNxNNJGIJ4hQNZ6OR1L7APjzW8EWJ8R0rMF+OM5w34ztOgPcYw3kzvjECvI83nDfjO16A9wmG82Z8JwjwHms4b8Y3VoD3iYbzZnwnCvA+yXDejO8kAd4nG86b8Z0swPsUw3kzvlMEeJ9qaTF9qlAxPa5OEPA4gWJ6vOHFNPMeb0kxzUXvMQKT7LRKFdNlFpjIWJpQhytQdWMdpnLc9XK5aCKeSabzOSfKv06VzWUz0XQ+lUvH8wmiRJV4LBxN5DPxRCSbSGaSqUQyHsu64f8UquN1xXQ4kYrEvGgymSHC4XQ6Si35bCIVi8Ri2YSb9jJuOOMmEtFkNO9kUlnHScW8PHFIpsK5XPhYYB9ONHxRYnwTBebLJMN5M75JArwnG86b8U0W4D3FcN6Mb4oA76mG82Z8UwV4TzOcN+ObJsD7dMN5M77TBXifYThvxneGAO/phvNmfNMFeM+wtKicIVRUzqwTBDxToKicZXhRybxnWVJUcvE3QWCSnVmporLMQgsZS7PrcIWabqzDSYIfTbsJ103mM/yjJknXS3p0bj6ZiyeSuRyxynmJrJOLJ71cPOLmvFg+HY5Esm6KqteJhbhcpKiMU92bJDCOm0hFw04unc6lM4TZ8RIJNxeJ8JMrkxkn5WXpZnIq7br5ZDKWc+k1uVjSDU8E9uEcwxclxjdHYL7MNZw345srwHue4bwZ3zwB3mcZzpvxnSXA+2zDeTO+swV4zzecN+ObL8B7geG8Gd8CAd7nGM6b8Z0jwPtcS4urc4WKq/PqBAGfJ1BcnW94ccW8z7ekuOIiaLbAJLugUsVVmQUHMpYurMMVLLqxDrvReNyNRXKpaCrhZLJpL+m4VCemIrl4zM0loo4TSeeceCIbJWxuOp1K0V3AfDjl5XMpLxKdU4jLRYqrvEvVKN3EjBP5fCydp44MZ5xcNptMk7dYzos44VTUzWcSHoGNeclIKpFPuVEiF0tkcnOAfXiR4YsS47tIYL5cbDhvxnexAO9LDOfN+C4R4H2p4bwZ36UCvC8znDfju0yA9+WG82Z8lwvwvsJw3ozvCgHeV1paZFwpVGRcVScI+CqBIuNqw4sM5n21JUUGFwMXCkyyaypVZJQpvJGxdG0dTrjrxjrspSNe0nUjaTfrZsLRTCKTCsfi6Vw4Snd/UplMnNjF8lE3HPcSubiTSEdzSb5zlI6l+CfqLyrE5SJFRiLtZGJxKrrcqBd16I6SFw870VQyH4nn8wTXTSSj4ViUYDv5cMTJENi4m3QT9LaJVCJ+EbAPrzN8UWJ81wnMl+sN5834rhfgfYPhvBnfDQK8bzScN+O7UYD3TYbzZnw3CfC+2XDejO9mAd63WCq2bxES27fWCQK+VUBs32a42Gbet1kitlkUXyswyW6vlNguU4AiY+mOOpyA1Y21m0xkXScRi1AFkYzTPzxyFnWTyWTYI5WedVJxLxnORTLhTCIcpTsJ8WwkRXczIrF4OJfI/0co3qYR2y4VBJFsPpviJ2kkk242H8vk6HYE3ftIEkfHzWbSsVg8mo7nuYOTSbo9QkVBJp1KZqlr3OuAfXin4YsS47tTYL7cZThvxneXAO+7DefN+O4W4H2P4bwZ3z0CvO81nDfju1eA932Wis77hETn/XWCgO8XEJ0PGC46mfcDlohOFod3CEyyByskOssVYshYeqgOJ+R0Y+1mopkISWqSr8mkE6Orx04knoo6kQQ1p+KpnOtl3Ww4GgtnyXGWZHY0k095uWwu4eSzGe/OQlwu0odResdoNBtLO56Tz6RYu2fTiXg0mSb8hC+eimfS4Wg4nouEo+lcNp2Mkm6Oua6Xd8KR1J3APnzY8EWJ8T0sMF8eMZw343tEgPejhvNmfI8K8H7McN6M7zEB3o9bKr4eFxJfT9QJAn5CQHw9abj4Yt5PWiK+WCQ9JDDJnqqU+CpTkCBj6ek6nKDRjXU4nsy76VSGriXG6XJiIuxmvXAslYzwZ4FjdOUz46bdSDiTj4fpamaCrzPSJcaok45GU7lsJPxwIS4Xub2ezMTotDjxTycjWf5YtBd2nGw0kXHS4VQymaFO5B/xiXi5HF1ZjeRy2SidEkmnY24420QwlduHzxi+KDG+ZwTmy7OG82Z8zwrwfs5w3ozvOQHez1sqQp4XEiEv1AkCfkFAhLxouAhh3i9aIkJYLDwtMMleqtRtxzIXZmQsvVyHW9i1Y01XkYifk0nFYzmHZEua3j+ecHIZUl10scvLZWK5TDwRD8dTiWiernxlMrl0hk7IE+J84plCXC7Sh67jhelurUuyKJ2P5txMPEfdRJeqstmY42WSyXg2T+9F90Rz+XTSS7tujPiRfKIOizvpZ4B9+IrhixLje0VgvrxqOG/G96oA79csXYxfE1qMX68TBPy6wGL8huGLMfN+w5LFmBfNlwUm2ZsVWozLXaCQsfRWHW6B0451LOJk6X1dL0GXDhz2HE0lvHgulXXjyXA8G8uyO0KbCsfjXjyVj0WjXpTuRkXDKdcLv1KIy0UW43QkksgSRFIu0Xw4nMsQwVw4nyQPObq7FQvHw4lIPJ733ISTckjLeHRVI5oinZON5bwmC2i5ffi24YsS43tbYL68Y+mi9I7QovRunSDgdwUWpfcMX5SY93uWLEq8eLwlMMner9SiVGaiRsbSB3W4RN+SsU5HMtFsIpmNuqmkm4h5mXQ0mYnE3ESGlrVoKhamlTfvhiNxx8tnkpnM24W4bNvMWDtRLx3PuUQs60Vd6oJMLhWO5uP5LCFO5zLhiBt2ognymqB7ApH428A+/NDS5PyhUHL+qE4Q8EcCyfljw5Mz8/7YkuTMSfQDgeT8SaWSc2BrbcJCxtKndbiEpxtrxJh8KjDWn6n3Tr1ImFYdfp2XddxoNhP2wuFsOurQ5dRMOJeMusl8NByNZLKZNPlMuXknn8ok896/viqZUD8TSqif1wkC/lwgoX5heEJl3l8IJFQOtnahhUlFt/nvVW5gS/SLP6HR/aIG85dKvMEzxxe4Gei2KQxmGwV0+4KphGwZBDUovyr4/5p5SQzClwJZ5Uvhiz8o3s1JilZuTXiXi/Ebwy+gcWB+IyApvgUvzX5iYL9jC37RffG1UF98J9QX3wn2hZTU/N7wnCI1H9bp/1/lnWkGn1jsr9vf7PzHnL8XWEOA4+0i+5DFVIdQyxRzc76aiynVp8S6heoTVVz+UEotO+Vt7jdCC4EKupWY3ebehzH/IJAY1gMnBn9r38oxa42AK5fzj3VmJhjkWKhx+aMiUBZ3fJrrc+T4/KReB4tEaG5kE24+m4/EEslw2o3zvZhoPhH3olm6RZTKJnJuNBUJJ/nrDPxDUYlYhH/KN5nNxPNq0nazkUg0m0xnXLqlk0o7XjaScvLRRCTspLJ0Cygb8eLxVCSSjXt5L0lXJVL5iOfEEomkEw9HkmGp8flJMz6tXQibu2yCHJ+fhfLnz4B+aO7yErIffhHqh18K/VBKJJi8kGvgwuJYFQm/2igSfhUWCb8KiIT1KyQSmqueKpnkfgP6QoqE9YUWod9aIBKa6wcKUDfjOnknSSuqk8jEE+lkNpz2aB3NxyLZCHJ8fq/DLexIkSA1Pr+XcZWpuXnjX8Fth52Prbkf1qwv5NXgP+qwC5I/Rn+UMUbNCZfFHKNm52Rr7lk25ws5Rn/W4fpOHaM/FXEVvKUVWsyxaw4e8mqrKgb/KtzO+lt3O8spb3OL3dZB3qss1xfw1pj2UT9OeZu7uJP2v9WH5fr6x/Dx4Anzj4BADtXLLPrsd2zBL7ov/hbqizZCfdGmRF+Ui1kqLjY0/HaTVAxsZPjtpu8LvNG3m4Dj7W605HZTcPtP/kb1iSr82tYLXkn6p04mIaqg0VeS/jM56vGJYWNLbjf9AxRF7erNTDAbC12paFcvf7sJOT7t63G3mzYCXkmSGp/29c3fXgi1crxa8qldf7NlUehg46LQQXhR6CCwKGxiyKJQNIgT+f9syKSzlKGLwiZCSWcpwKLQ3GU+5PgsbeiiIDU+SyuLQqW+N/Q97vtOroq3Y70gYHYeLBvLBd8RmAw61QMvawn1YSfNIlJuH3aqxy4iEgs+Y0RfCkYmPWTsdAbGdEjZ0Lcjvgf2XxfhGETEii4GnfI2pJiF5q+u4PFAXy7k2ANidHnOdREQ6N3Al/Q7hhbGIP97JbK/C/v8Xn9j+/k/79lWeb+5tQvfb15hfxl63+5kVb54UF6PHPMqYF+yWOup9KUk7mXAcym4YXyH5Xy7C68O8N+Bhf0e1C89yarJashqyXqR9SarI6snayDrQ9aXrB9Zf7IBZAPJBpENJluWbDmyIWTLk61ANpRsRbKVyFYmW4VsVbLVyFYnc+oLYHwVz2A6Btp6atqqNW01mrZaTVsvTVtvTVudpq1e09agaeujaeuraeunaeuvaRugaRuoaRukaRusaVtW07acpm2Ipm15TdsKmrahmrYVNW0radpW1rStomlbVdO2mqZtdU2bU2hTt0GFv8MKf53ytiZJp9xFrAfAV+4/14EctyfIF3Oshvj6t79qyvcV9u/j1ZbrK7rwnmCv8nw56v3F3uX4Cje9V1m3+L6c4H3P+sX0RReJFrmH2rB4vjzd/dg+i+PL09/b7dt6X4li94n7tdZXovg95/6t8xUudf96QGt8JUrfCx/Ycl/NflZjUEt9JZrNhe7glvlyWpBX3WVb4stpUY52l2veV6yF+d4d0pyvaIvXDnf5kr74CbYt97VCKV+JVq1p7tDivrxWro/uikV8JfOtXmvdlfS+nMVYt92Vdb6cxdIA7iqL+nIXU0+4qwZ9ZRdbm7irNfUVKUPnuKsrvsL5sjST6wCLPtaNu4cWFk5OoYhZrVDUrFIoclYqFD1DC0XQ8oWiaLlCkTS4UDQNLBRR/QtFVd9CkdVQKLrqCkVYr0JRVlMo0li7sRbkrZJ3OxyY/sw2udvh1gsCZueoK64+eBcXVG4YWCBI9SFjbAPuwzBwYvIkqApV5mumuISSFb3So/ZFpDDBosGrLZHCwKptUU1VjL7cjsskjhsBTqAoeHDRwceTJgKcjD7vCHgyVmpFWh0WR8msijdWLwg4Bl+RktkYcEWKG74icR/G4StSMhu3dEVaHYY7mdHAFVmREoUJ5gVXpIRmRfIqsCKtDlyREsAJ5AkNLvpDCEjOSWAyC4Xwq2W4kIDQN9ORpcAawGSm60OnvM3lMV5DQMmsYamSWQ2Wf9IRFe+a9YKA14QrmXRkTeDkX8twJcN9uBZcyaQjawlPfkQCXcPwBLo2uA/9Db3wImN8HeDcq6QCXg2GOx3WwBVRwOsWEvOwoAJeV6OAh1VAAeNWIMddFxiUw4QGFz0RkZzXE1bATnmby8lxHQH1tr7hqpXHZX0LeEvF+PrAGN/A8BgvJlIQ4gfla0Pwgl2pamdV2Frj5VW8G9ULAt4IXu14+Y2AA7ix4dUO9+HG8GrHy29seLXDiW7DerOT8SbgZOxvaM7IGN/U0mpnVRhuL6eBK1LtbFZIzJsHq53NNNXO5hWodnArkONuBgzKzYUGFz0RkZy3MFwJcnLcVED1b2l4tcPjsqUFvKVifEtgjG9leIwXEylOeZuLFClbW3pvZxXYWhNu8nifbeoFAW8Dr3bCzjbASbCt4dUO9+G28Gon7GxreLXDiW7rerOT8XaWVDvIGN/e0mpnFRhuN6+BK1Lt7FBIzDsGq50dNNXOjhWodnArkOPuAAzKHYUGFz0RkZx3MlwJcnLcXkD172x4tcPjsrMFvKVifGdgjO9ieIwXEylOeZuLFCm7WlrtrAxba7JNqp3h9YKAh8OrnawzHDgJRhhe7XAfjoBXO1lnhOHVDie6XevNTsa7WVLtIGN8pKXVzsow3JmKVTu7FxLzHsFqZ3dNtbNHBaod3ArkuLsDg3IPocFFT0Qk5z0NV4KcHEcKqP5Rhlc7PC6jLOAtFeOjgDGeMjzGi4kUp7zNRYqUtKXVzkqwtSbe5JkYmXpBwBl4tRN3M8BJkDW82uE+zMKrnXgT3k6Zm443ItGl681OxjlLqh1kjOctrXZWguGOV+xZKqMLiXmvYLUzWlPt7FWBage3AjnuaGBQ7iU0uOiJiOS8t+FKkJNjXkD172N4tcPjso8FvKVifB9gjO9reIwXEylOeZuLFCn7WVrtrIi7t+OpePevFwS8P/7ejrc/cBIcYHi1w314AP7ejneA4dUOJ7r96s1OxgdaUu0gY/wgS6udFWG4swkNXJFq5+BCYj4kWO0crKl2DqlAtYNbgRz3YGBQHiI0uOiJiOR8qOFKkJPjQQKq/zDDqx0el8Ms4C0V44cBY/xww2O8mEhxyttcpEg5wtJqZyhsrYkmVbxH1gsCPhJe7USTRwInwVGGVzvch0fBq51o8ijDqx1OdEfUm52Mj7ak2kHG+DGWVjtDYbijngauSLVzbCExHxesdo7VVDvHVaDawa1AjnssMCiPExpc9EREch5juBLk5HiMgOo/3vBqh8fleAt4S8X48cAYP8HwGC8mUpzyNhcpUsZaWu2sAFtr0k0+yXZivSDgE+HVTto9ETgJTjK82uE+PAle7aSb8HbK3HS8EYlubL3ZyfhkS6odZIyfYmm1swIMd7pin2Q7tZCYxwWrnVM11c64ClQ7uBXIcU8FBuU4ocFFT0Qk5/GGK0FOjqcIqP7TDK92eFxOs4C3VIyfBozxCYbHeDGR4pS3uUiRMtHSamd5XLWTUfFOqhcEPAlf7WQmASfBZMOrHe7DyfhqJzPZ8GqHE93EerOT8RRLqh1kjE+1tNpZHieI0xq4ItXOtEJiPj1Y7UzTVDunV6Dawa1AjjsNGJSnCw0ueiIiOZ9huBLk5DhVQPVPN7za4XGZbgFvqRifDozxGYbHeDGR4pS3uUiRMtPSamcI7pNsaRXvrHpBwLPwn2RLzwJOgjMNr3a4D8/Ef5Itfabh1Q4nupn1Zifj2ZZUO8gYn2NptTME92GnlAauSLUzt5CY5wWrnbmaamdeBaod3ArkuHOBQTlPaHDRExHJ+SzDlSAnxzkCqv9sw6sdHpezLeAtFeNnA2N8vuExXkykOOVtLlKkLLC02lkOttZ4TZ5AfU69IOBz4NWO55wDnATnGl7tcB+eC692POdcw6sdTnQL6s1OxudZUu0gY/x8S6ud5WC4ExV7AvUFhcR8YbDauUBT7VxYgWoHtwI57gXAoLxQaHDRExHJ+SLDlSAnx/MFVP/Fhlc7PC4XW8BbKsYvBsb4JYbHeDGR4pS3uUiRcqml1c6yQtXOZfWCgC8TqHYuA06Cyw2vdrgPLxeodi43vNrhRHdpvdnJ+ApLqh1kjF9pabWzrIXVzlWFxHx1sNq5SlPtXF2Bage3AjnuVcCgvNqSagfJ+RrDlSAnxysFVP+1hlc7PC7XWsBbKsavBcb4dYbHeDGR4pS3uUiRcr2l1c5g2FqTavJMthvqBQHfAK92UskbgJPgRsOrHe7DG+HVTip5o+HVDie66+vNTsY3WVLtIGP8ZkurncEw3KmKPZPtlkJivjVY7dyiqXZurUC1g1uBHPcWYFDeKjS46ImI5Hyb4UqQk+PNAqr/dsOrHR6X2y3gLRXjtwNj/A7DY7yYSHHK21ykSLnT0mpnEK7aiap476oXBHwXvtqJ3gWcBHcbXu1wH96Nr3aidxte7XCiu7Pe7GR8jyXVDjLG77W02hmEE8QRDVyRaue+QmK+P1jt3Kepdu6vQLWDW4Ec9z5gUN4vNLjoiYjk/IDhSpCT470Cqv9Bw6sdHpcHLeAtFeMPAmP8IcNjvJhIccrbXKRIedjSamcgbK3JNrm380i9IOBH4NVONvkIcBI8ani1w334KLzaySYfNbza4UT3cL3ZyfgxS6odZIw/bmm1MxCGO1uxeztPFBLzk8Fq5wlNtfNkBaod3ArkuE8Ag/JJocFFT0Qk56cMV4KcHB8XUP1PG17t8Lg8bQFvqRh/Ghjjzxge48VEilPe5iJFyrOWVjsDYGtNJqfifa5eEPBz8Gonk3sOOAmeN7za4T58Hl7tZHLPG17tcKJ7tt7sZPyCJdUOMsZftLTaGQDDnclq4IpUOy8VEvPLwWrnJU2183IFqh3cCuS4LwGD8mWhwUVPRCTnVwxXgpwcXxRQ/a8aXu3wuLxqAW+pGH8VGOOvGR7jxUSKU97mIkXK65ZWO/1ha43b5N7OG/WCgN+AVztu8g3gJHjT8GqH+/BNeLXjJt80vNrhRPd6vdnJ+C1Lqh1kjL9tabXTH4bbrdi9nXcKifndYLXzjqbaebcC1Q5uBXLcd4BB+a7Q4KInIpLze4YrQU6Obwuo/vcNr3Z4XN63gLdUjL8PjPEPDI/xYiLFKW9zkSLlQ0urnX6wtSbdpNr5qF4Q8Efwaied/Ag4CT42vNrhPvwYXu2kkx8bXu1wovuw3uxk/Ikl1Q4yxj+1tNrpB8Odrli181khMX8erHY+01Q7n1eg2sGtQI77GTAoPxcaXPRERHL+wnAlyMnxUwHV/6Xh1Q6Py5cW8JaK8S+BMf6V4TFeTKQ45W0uUqR8bWm10xe21nieivebekHA38CrHc/7BjgJvjW82uE+/BZe7Xjet4ZXO5zovq43Oxl/Z0m1g4zx7y2tdvrCcHsJDVyRaueHQmL+MVjt/KCpdn6sQLWDW4Ec9wdgUP4oNLjoiYjk/JPhSpCT4/cCqv9nw6sdHpefLeAtFeM/A2P8F8NjvJhIccrbXKRI+dXSaqcPbK2JNql2fqsXBPwbvNqJer8BJ8Hvhlc73Ie/w6udqPe74dUOJ7pf681Oxn9YUu0gY/xPS6udPjDc0YpVO38VEvPfwWrnL02183cFqh3cCuS4fwGD8m+hwUVPRCTnfwxXgpwc/xRQ/aEGs6sdHhfGaDpvqRhXcZbrq02D2TFeTKQ45W0uUqS0BcZNJaudBthak3RVvO0aBAGzc2y1k3TbASdBe+DklOrD9g3oaifZhLdT5qbjjUh0bRvMTsYdwMnY39CckTG+FHLuhSpX7TTAxGHS0cAVqXaWLiTmjg2hppXN0g2LVjv8IulqpwFY7SwNDMqODTKDi56ISM6dDFeCnByXElD9nQ2vdnhcOlvAWyrGOwNjvIvhMV5MpDjlbS5SpHS1tNqph601CUfF261BEHA3eLWTcLoBJ8Eyhlc73IfLwKudhLOM4dUOJ7quDWYn4+6WVDvIGK+ytNqph1U78bwGrki106OQmHsGq50emmqnZwWqnXpgtdMDGJQ9G2QGFz0RkZyrDVeCnByrBFR/jeHVDo9LjQW8pWK8BhjjtYbHeDGR4pS3uUiR0svSaqcO95SCJk+g7t0gCLg3vNpJ53oDJ0Gd4dUO92EdvNpJ5+oMr3Y40fVqMDsZ11tS7SBjvMHSaqcO90X2ij2Buk8hMfcNVjt9NNVO3wpUO3XAaqcPMCj7NsgMLnoiIjn3M1wJcnJsEFD9/Q2vdnhc+lvAWyrG+wNjfIDhMV5MpDjlbS5SpAy0tNrpDVtrwk3u7QxqEAQ8CF7thJ1BwEkw2PBqh/twMLzaCTuDDa92ONENbDA7GS9rSbWDjPHlLK12esOqHbdi93aGFBLz8sFqZ4im2lm+AtVOb2C1MwQYlMs3yAwueiIiOa9guBLk5LicgOofani1w+My1ALeUjE+FBjjKxoe48VEilPe5iJFykqWVju9cGtNRsW7coMg4JXh1Y6TWRk4CVYxvNrhPlwFXu04mVUMr3Y40a3UYHYyXtWSagcZ46tZWu30wn2pO62BK1LtrF5IzE6w2lldU+04Fah2gCuQuzowKJ0GmcFFT0QkZ9dwJcjJcTUB1R82vNrhcQlbwFsqxsPAGI8YHuPFRIpT3uYiRUrU0mqnFrbWxJt8ki3WIAg4Bq924rkYcBLEDa92uA/j8GonnosbXu1woos2mJ2ME5ZUO8gY9yytdmpx39up2CfZkoXEvEaw2klqqp01KlDt1AKrnSQwKNdokBlc9EREcl7TcCXIydETUP1rGV7t8LisZQFvqRhfCxjjaxse48VEilPe5iJFyjqWVjs1sLXGbfJMtnUbBAGvC692XHdd4CQYZni1859Bh1c7bhPeTpmbjjci0a3TYHYyXs+SagcZ4+tbWu3U4D7JVrFnsm1QSMwbBqudDTTVzoYVqHZqgNXOBsCg3LBBZnDRExHJeSPDlSAnx/UFVP/Ghlc7PC4bW8BbKsY3Bsb4JobHeDGR4pS3uUiRsqml1U418CdSVLybNQgC3qwB73dzwysU5r15w8IOBvkVqSo4oWzaYHbS28KSqgIZl1sKJ3rEmGwpEOOVTKg9hRLqVg2CgLcSSKhbG55QmffWSxIqzNc2liRUZFxua3hC5THZ1vKE2gP4OzEq3u0aBAFvJzBZtwMG2/aGJ2fuw+0FyvvtDb8eb0Oi38GSRI+M8R0Nv0TCY7KjwHzZyfDLgJwndhIScVJxuRMwLnc2PC6L5TOnvM1F5rNdDI9xHuNdBAo0ZBxWUhB2VwSh60XC4USEMXlZx41mM2EvHM6mo07GSWXCuWTUTeaj4Wgkk82kCX/KzTv5VCaZ9/71peLdtUEQ8K6aSVAu+F2Bk3+44YKQ+3C4ZhKU24fDwdft+V5w21BlJ4FT5qaBi+rfJhXXCGX84EoFOJCuesNfBd1KzJmWBN+IxVgdm+v0EcDJvBtwgqj9yn7HLmYsuNR3GdfJO8mwk3ISmXgincyG014qH8nHItnI4vZrc8GO7NeRQv06stCv7QtW6RXZKXNTk+fuhRV5D56DEgljhICsGmH4JYbFnRxOK3iXi3FPwyU5B+aeAuX2KKGkMKpEsnXK29w9hPoiJdQXqTIWnuYwS8XFiP7/1ZySaQafWAzs1t/sPMAL354SuRTH20X2IQuKDiF9hRNqZR80F1OqT4n8jeoTVWClS1U4Tnmbu6dQQkyXqHCaceM29z6MOS2QGEaCE4O/tW/lmLVGyJTLOdNgZoJBjoUalxlloV7c8Wmuz5Hjk1V8uZEIzY1sws1n85FYIhlOu/FIPJ6P5hNxL5rNx6KpbCLnRlORcDKXcPKul8slYpFMIp5PZjPxvJq03WwkEs0m0xk3Fo6n0o6XjaScfDQRoeI3G0lksxEvHk9FItm4l/eSVLBSGew5sUQi6cTDkWRYanyySqWJWhSau7Kh+rRlUcjZuCjkhBeFnMCisLshi0LRIE7850s5eWTSyRu6KOwulHTygEWhuct8yPEZbeiiIDU+o/8fXX7cq3D5cW/d5UenvK3otX/kfZCyLzsY/ukCvw/bWdKH5frax/Dx4Amzj8DCvq+QyNlX8LLo3kJ9sZ9QX+wneFlUKi72NPyyqFQMjLLgsug+ApdFgePtjlpyWTS4/Sd/o/pEFX77S1bA+wglxP0FK2DGvL/EPTNLLovuAxRFBzSYmWBSQhXWARW4LIocnwOBFfAoYAUsNT4HasYH/QEv5PgcJJQ/DwL0Q3NXapD9cLBQPxzcgsvkJi/kGriwOFZFwiE2ioRDhEXCIQIiIV0hkVDmp2OhSe5Q5IfTgCIhLbQIHdoCkVDup2yR43NYA25hR4oEqfE5TPBqi1OovtGPpXNgj6XzXGTsHA7L7V6TMWK//Kg/XrB3Dy26gfq1MYei17xe7czHeARaqLQVmkwowuzriP+hyXkkcHIKT0T3f3kiHomciEsyphzGo9AZE33zFJsxvf+UAegMfJTRGdiBZuCjl2RgKyb20UsysOP+2d58jMcsGSjHXcWCGXXskoFy3B8tmFHHLRkox925ynyMY5YMlOPuasFAHb9koBx3hAUDdcKSgXLckRYM1NglA+W4e1gwUCcuGSjHHWXBQJ20ZKDoBrAFA3XykoFy3KwFA3XKkoFy3LwFA3XqkoFy3L0sGKhxSwaK7kZYMFDjlwyU4+5nwUCdtmSgHPcACwZqwpKBctyDLBioiUsGynEPsWCgJi0ZKMc9zIKBmrxkoBz3CAsGasqSgXLcoywYqKlLBspxj7FgoKYtGSjHXdmCD7ecvmSgHHeMBTPqjCUDRbe5LRio6UsGiu6eWjBQM5YMFN2Us2CgZi4ZKLrXY8FAzVoyUHQLwYKBOnPJQNGVaQsGavaSgaILnhYM1BzkQPEjFjqHFn63jMEOCgxaWzABqW/+OmVtnh1fvxHCeKwFGI+zAOMYCzAebwHGEyzAONYCjCdagPEkCzCebAHGUyzAeKoFGMdZgHG8BRhPswDjBAswTrQA4yQLME62AOMUCzBOtQDjNAswnm4BxjMswDjdAowzLMA40wKMsyzAeKYFGGdbgHGOAMYQFGMkHtJsGN9hV873wl8N4zGrKuzPpf6eR3YW2dlk88kWkJ1Ddi7ZeWTnk11AdiHZRWQXk11CdmnDvz4uayg49Z9Jyk4HBtrmadrO0rSdrWmbr2lboGk7R9N2rqbtskKburX2xwlKbvzUbNAFb8+BPhe8yYXpch/adjkIFz9KWx2fyzXjA70h4TbFXm4/XAFMWmo/XKHpB/QDAYE3AdwrgH16pVCfXlmB2LoS2A9XCfXDVRWILeDNG/cqYJ9eLdSnV0vHFvXDXEP7QSyOaD4Bb7A1uRFWbv9dIxRH11QgR10D7Idrhfrh2grkKOBNR/daYJ9eJ9Sn11Ugtq4D9sP1Qv1wfQViC3iz2L0e2Kc3CPXpDRVY/+YZ2g9icUTzCXhDv8mN93L770ahOLqxAjnqRmA/3CTUDzdVIEcBP+Tg3gTs05uF+vTmCsTWzcB+uEWoH26pQGwBP5zi3gLs01uF+vTWCqx/ZxnaD2JxRPMJ+AGiJh/0Kbf/bhOKo9sqkKNuA/bD7UL9cHsFchTwQ1Xu7cA+vUOoT++oQGzdAeyHO4X64c4KxBbww3DuncA+vUuoT++qwPp3tqH9IBZHNJ+AH1hs8sHCcvvvbqE4ursCOepuYD/cI9QP91QgRwE/xOneA+zTe4X69N4KxNa9wH64T6gf7qtAbAE/fOveB+zT+4X69P4KrH/zDe0HsTii+QT8gHSTDzKX238PCMXRAxXIUQ8A++FBoX54sAI5CvihcfdBYJ8+JNSnD1Ugth4C9sPDQv3wcAViC/hhf/dhYJ8+ItSnj1Rg/VtgaD+IxRHNJ+AXMpp8caLc/ntUKI4erUCOehTYD48J9cNjFchRwC+puI8B+/RxoT59vAKx9TiwH54Q6ocnKhBbwC8XuU8A+/RJoT59sgLr3zmG9oNYHNF8An4BrMkXtcrtv6eE4uipCuSop4D98LRQPzxdgRwF/FKc+zSwT58R6tNnKhBbzwD74Vmhfni2ArEF/DKj+yywT58T6tPnKrD+nWtoP6ic24A5nwfgnE7960sS5/mW9OcFluC80BKcF1mC82JLcF5iCc5LgTj5+9ddQk0fSloVarqh8c8V6Gc0xnkWYDzLAoxnW4BxvgUYF1iA8RwLMJ4rlOMRGCNxT8SvFN4lfv9/+cX5DocFfbt+TlC1yvM0r18ge5HsJbKXyV4he5XsNbLXyd4ge5PsLbK3yd4he5fsvYZQ0wfVPN+w6MNrXtC0vahpe0nT9rKm7RVN26uattc0be9q2t4rtLUvdEpbzQCgk+nrDcYHIz8SyFH74v2Gf/9+EBx0PhBUvugrU68Drijw04nY1/vAKzIfWFL52ILzDUtwvmkJzrcswfm2JTjfsQQnIl+mk/9R1U2uwAavjpebP4FXNNznhcYGzRl4hcR9wRLOwCsu7ouWcAZewXFfsoQz8IqQ+7IlnIFXmNxXLOEMvGLlvmoJZ+AVMPe1CnF2Fm9z/Z13gbXSh0J38VW/4H7wN/c94Nh/CKpl87l8kvlXhxZ9irH69GL1qcXq04rVpxSrTydWn0qsPo349aqF+73aLf6+ehHmPWX/DcX/m8r+W8r+28r+O8r+u8r+e8r++4X9j+l9PiH7lOwzss/JviD7kuyrhn8v/vQMLbxuoW5obf6x+Rd/eIuK+Xb/nb9+3/pPsv6a+uUbsm/JvgteZOKDHQNt32javtW0fVdoU7cO2M5qMqjlJsqvUQki77jfAC+cfQvx9W9/fQe+FV+pyfvJksmrnbzfU7/8QPYj2U/Byfu9ZlL+oGn7UdP2UwUm7yfAyfs9cPL+AJy8PwIn70+WTt5Pl0xe7eT9mfrlF7JfyX4LTt6fNZPyF03br5q23yoweT8FTt6fgZP3F+Dk/RU4eX+zdPJ+tmTyaifv79Qvf5D9SfZXcPL+rpmUf2ja/tS0/VWByfsZcPL+Dpy8fwAn75/AyfuXpZP38yWTVzt5/6Z++YcnbR9q7xNqOgH/1kzKfzRtfHKwrU0f+cn7OXDy/g2cvP8AJy/3bfm+/u2vNn3snLxfLJm82snblsazHVl7sg7BydtWMynbadraa9o6VGDyfgGcvG374CZvuz64ydseOHk7WDp5v1wyebWTdykaz6V5npF1Ck7epTSTcmlNW0dNW6cKTN4vgZN3KeDkXRo4eTsCJ28nSyfvV0smr3bydqbx7ELWlaxbcPJ21kzKLpq2rpq2bhWYvF8BJ29n4OTtApy8XYGTtxtw8vrB9G4IHKi0dVzib4m/Jf6W+Fvib4m/Jf6W+Fviz2R/YV/7r9phYR2wirK/srK/krK/orI/VNlfQdlfXtkfouwvp+wvq+wPVvYHKfsDlf0Byn5/Zb+fst9X2e+j7Dco+/XKfp2y31vZ76Xs1yr7Ncp+tbLfU9nvoexXKfvdlf1llP3Dllq4f6iyf4iyf7Cyf5Cyf6Cyf4Cyv7+yv5+yv6+yv4+yv7eyv5eyP1rZzyv7OWU/q+xnlP20sp9S9kcp+3sq+3so+7sr+yOV/d2U/RHK/nBlf1dlfxdlf2dlfydl/46lF+7fruzfpuzfquzfouzfrOzfpOzfqOzfoOxfr+xfp+xfq+xfo+xfrexfpexfqexfoexfruxfpuxfquxfouxfrOxfpOxfqOxfoOyfr+yfp+yfq+yfo+wvUPbnK/tnK/srViv5RNlfQdlfXtkfouwvp+wvq+wPVvYHKfsDlf0Byn5/Zb+fst9X2e+j7Dco+/XKfp2y31vZ76Xs1yr7Ncp+tbLfU9nvoexXKfvdlf1llP1uyn5XZb+Lst+5euF1nmGFv06Z2xJ/S/wt8bfE3xJ/S/wt8bfE3xJ/RvtzG+vJGqWeVPYPUPb3V/b3U/b3Vfb3Ufb3Vvb3UvZHK/t5ZT+n7GeV/Yyyn1b2U8r+KGV/T2V/D2V/d2V/pLK/m7I/QtkfruzvquzvouzvrOzvpOzvqOzvoOxvr+xvp+y3Ue7Dqh9lVD/qqH4UsoPymiafnlL21U9fdVL21Q9sqB/oUD/w0U3ZV+8Rq/eQ1XvM3ynY1K8fql9PVL+++JOyr37jSf1GlPqNqd+UffVLFuqXMNQvafyl7Kuf61Y/9+1/Lvzb0L/bMsSnO1kVWQ+ynmTVZDVktWS9yHqT1ZHVkzWQ9SHrS9aPrD/ZALKBZIPIBpMtS7Yc2RCy5clWIBtKtiLZSmQrk61CtirZamSrkzlkLlmYLEIWJYuRxckSZB5ZkmwNsjXJ1iJbm2wdsnX5PjHZemTrk21AtiHZRmQbk21CtinZZmSbk21BtiXZVmRbk21Dti3ZdmTbk+1AtiPZTmQ7k+1CtivZcLIRZLuRjSTbnWwPsj3JRpGlyNJkGbIsWY4sTzaabC+yvcn2IduXbD+y/ckOIDuQ7CCyg8kOITuU7DCyw8mOIDuS7Ciyo8mOITuW7DiyMWTHk51ANpbsRLKTyE4mO4XsVLJxZOPJTiObQDaRbBLZZLIpZFPJppGdTnYG2XSyGWQzyWaRnUk2m2wO2VyyeWRnkZ1NNp9sAdk5ZOeSnUd2PtkFZBeSXUR2MdklZJeSXUZ2OdkVZFeSXUV2Ndk1ZNeSXUd2PdkNZDeS3UR2M9ktZLeS3UZ2O9kdZHeS3UV2N9k9ZPeS3Ud2P9kDZA+SPUT2MNkjZI+SPUb2ONkTZE+SPUX2NNkzZM+SPUf2PNkLZC+SvUT2MtkrZK+SvUb2OtkbZG+SvUX2Ntk7ZO+SvUf2PtkHZB+SfUT2MdknZJ+SfUb2OdkXZF+SfUX2Ndk3ZN+SfUf2PdkPZD+S/UT2M9kvZL+S/Ub2O9kfZH+S/dWnkDtDTR9eOKzw1ylzw667eWdJ3v/v533/eY1/E59/yEJ96ThZW7J2ZO3JOpAtRbY0WUeyTmSdybqQdSXr1vffD2R1VWKujfK3V2F/GXpdd7Iqsh5kPcmqyWrIasl6kfUmqyOrJ2sg60PWl6wfWX+yAWQDyQaRDSZbtq8/+IW//CYdA23dNW1VmrYemraemrZqTVuNpq1W09ZL09Zb01anaavXtDVo2vpo2vpq2vpp2vpr2gZo2gZq2gZp2gZr2pYttHHQdAvpg2ZAYX85eu0QsuXJViAbSrYi2UpkK5OtQrYq2Wpkq5M5ZC5ZmCxCFiWLkcXJEmQeWZJsDbI1ydYiW5tsHbJ1yYaRrUe2fjCwltMQGaJpW17TtoKmbaimbUVN20qatpU1bato2lbVtK2maVtd0+Zo2lxNW1jTFtG0RTVtMU1bXNOW0LR5mrakpm0NTduamra1NG1ra9rW0bStq2kbpmlbT9O2fismwwb02g3JNiLbmGwTsk3JNiPbnGwLsi3JtiLbmmwbsm3JtiPbnmwHsh3JdiLbmWwXsl3JhpONINuNbCTZ7mR7kO1JNoosFZwMG2iIbKhp20jTtrGmbRNN26aats00bZtr2rbQtG2padtK07a1pm0bTdu2mrbtNG3ba9p20LTtqGnbSdO2s6ZtF03brpq24Zq2EZq23TRtIzVtu2va9tC07alpG6VpS7ViMqTptRmyLFmOLE82mmwvsr3J9iHbl2w/sv3JDiA7kOwgsoPJDiE7lOwwssPJjiA7kuwosqPJjiE7luw4sjFkx5OdQDY2OBnSGiIZTVtW05bTtOU1baM1bXtp2vbWtO2jadtX07afpm1/TdsBmrYDNW0HadoO1rQdomk7VNN2mKbtcE3bEZq2IzVtR2najta0HaNpO1bTdpymbYym7XhN2wmatrGtmAwn0mtPIjuZ7BSyU8nGkY0nO41sAtlEsklkk8mmkE0lm0Z2OtkZZNPJZpDNJJtFdibZbLI5ZHPJ5pGdRXY22XyyBWTnBCfDiRoiJ2naTta0naJpO1XTNk7TNl7TdpqmbYKmbaKmbZKmbbKmbYqmbaqmbZqm7XRN2xmatumathmatpmatlmatjM1bbM1bXM0bXM1bfM0bWdp2s7WtM3XtC3QtJ3TislwLr32PLLzyS4gu5DsIrKLyS4hu5TsMrLLya4gu5LsKrKrya4hu5bsOrLryW4gu5HsJrKbyW4hu5XsNrLbye4gu5PsLrK7g5PhXA2R8zRt52vaLtC0Xahpu0jTdrGm7RJN26Watss0bZdr2q7QtF2pabtK03a1pu0aTdu1mrbrNG3Xa9pu0LTdqGm7SdN2s6btFk3brZq22zRtt2va7tC03alpu0vTdncrJsM99Np7ye4ju5/sAbIHyR4ie5jsEbJHyR4je5zsCbInyZ4ie5rsGbJnyZ4je57sBbIXyV4ie5nsFbJXyV4je53sDbI3yd4KToZ7NETu1bTdp2m7X9P2gKbtQU3bQ5q2hzVtj2jaHtW0PaZpe1zT9oSm7UlN21Oatqc1bc9o2p7VtD2naXte0/aCpu1FTdtLmraXNW2vaNpe1bS9pml7XdP2hqbtTU3bW62YDG/Ta98he5fsPbL3yT4g+5DsI7KPyT4h+5TsM7LPyb4g+5LsK7Kvyb4h+5bsO7LvyX4g+5HsJ7KfyX4h+5XsN7Lfyf4g+zM4Gd7WEHlH0/aupu09Tdv7mrYPNG0fato+0rR9rGn7RNP2qabtM03b55q2LzRtX2ravtK0fa1p+0bT9q2m7TtN2/eath80bT9q2n7StP2saftF0/arpu03TdvvmrY/NG1/KpNhmVBlfsRqJZwvxxacbRScf/UtdHj3JR1eEZyNW1sw4E7VwAdZ9cXhUmc4+x3YTD+Uix3Zp6uFZIIAzbkNkPPqlnBuC+TsWMK5HZCzWyHOTnmbGwb2X1U7OxafSMgOnFFLcMYswRm3BGfCEpyeJTiTluBcwxKca1qCcy1LcK5tCc51LMG5riU4h1mCcz1LcK5vCc4NLMG5oSU4N7IE58aW4NzEEpybWoJzM0twbm4Jzi0swbmlJTi3sgTn1pbg3MYSnNtagnM7S3BubwnOHSzBuaMlOHeyBOfOluDcRQinyfcFd60QZ6e8zR0O7L8aS+4XjQjZgXM3S3COtATn7pbg3MMSnHtagnOUJThTluBMW4IzYwnOrCU4c5bgzFuCc7QlOPeyBOfeluDcxxKc+1qCcz9LcO5vCc4DLMF5oCU4D7IE58GW4DzEEpyHWoLzMEtwHm4JziMswXmkJTiPsgTn0ZbgPMYSnMdagvM4S3COsQTn8ZbgPMESnGMtwXmiJThPsgTnyZbgPMUSnKdagnOcJTjHW4LzNEtwTrAE50RLcE6yBOdkS3BOsQTnVEtwTrME5+mW4DzDEpzTLcE5wxKcMy3BOcsSnGdagnO2JTjnWIJzriU451mC8yxLcJ5tCc75luBcYAnOcyzBea4lOM+zBOf5luC8wBKcF1qC8yJLcF5sCc5LLMF5qSU4L7ME5+WW4LzCEpxXWoLzKktwXm0JzmsswXmtJTivswTn9ZbgvMESnDdagvMmS3DebAnOWyzBeaslOG+zBOftluC8wxKcd1qC8y5LcN5tCc57LMF5ryU477ME5/2W4HzAEpwPWoLzIUtwPmwJzkeEcLYF43xU8VXuM5I6dbCD82NAzj+0t4Pz40DOHart4PwEkPMfPe3IO0+G7MD5lCU4n7YE5zOW4HzWEpzPWYLzeUtwvmAJzhctwfmSJThftgTnK5bgfNUSnK9ZgvN1S3C+YQnONy3B+ZYlON+2BOc7luB81xKc71mC831LcH5gCc4PLcH5kSU4P7YE5yeW4PzUEpyfWYLzc0twfmEJzi8twfmVJTi/tgTnN5bg/NYSnN9ZgvN7S3D+YAnOHy3B+ZMlOH+2BOcvluD81RKcv1mC83dLcP5hCc4/LcH5lyU4/7YE5z+W4GSHNuBsYwnOtpbgbGcJzvaW4OxgCc6lLMG5tCU4O1qCs5MlODtbgrOLJTi7WoKzmyU4l7EEZ3dLcFZZgrOHJTh7WoKz2hKcNZbgrLUEZy9LcPYWwtk2gLPc76G0AXKuqxBnp7zNrW+D678h7eyIxwYAZ8dLp1LxiCcZj+2AnPtYEo99gfH4VXs74rGfJWPTHzg2te3s4DwAyPk7S+JxoCW6YpAlOAdbgnNZS3AuZwnOIZbgXN4SnCtYgnOoJThXtATnSpbgXNkSnKtYgnNVS3CuZgnO1S3B6ViC07UEZ9gSnBFLcEYtwRmzBGfcEpwJS3B6luBMWoJzDUtwrmkJzrUswbm2JTjXsQTnupbgHGYJzvUswbm+JTg3sATnhpbg3MgSnBtbgnMTS3BuagnOzSzBubklOLewBOeWluDcyhKcW1uCcxtLcG5rCc7tLMG5vSU4d7AE546W4NzJEpw7W4JzF0tw7moJzuGW4BxhCc7dLME50hKcu1uCcw9LcO5pCc5RluBMWYIzbQnOjCU4s5bgzFmCM28JztGW4NzLEpx7W4JzH0tw7msJzv0swbm/JTgPsATngZbgPMgSnAdbgvMQS3AeagnOwyzBebglOI+wBOeRluA8yhKcR1uC8xhLcB5rCc7jLME5xhKcx1uC8wRLcI61BOeJluA8yRKcJ1uC8xRLcJ5qCc5xluAcbwnO0yzBOcESnBMtwTnJEpyTLcE5xRKcUy3BOc0SnKdbgvMMS3BOtwTnDEtwzrQE5yxLcJ5pCc7ZluCcYwnOuUI424JxzlNwlvsMxN972sH5LCDnI7vIcB4I5nx203h0nTK2yV1a2X+Jov3ndunR6rFIFPPVtcdijKun99Wtx2LFiKfztczi+UrG84v66t5jsWPXCfqq6lHGPAg39dWjR1lzylF99exR5vyMLvRV3aPsuR72fdWU7yuS+9eZWwvxlWdvbi+QL/Lm9gb48nNjXdBXdrF9uX8sistdXF9/6jg6i+frL31/OYvj6+8ifZ/Mt97XP8XH0Wutr1DPEjGRaJ2vNqV8edF8a3y17dlMrEZb7qtdz2bjPtZSX+17tmAOOS3z1aFni+aj0xJfS7XMlxtLNO9r6Zb68mKZ5nx1bLmvbDhR2len1vjyIuFSvjo39RUpIxe6IWUbWPjr+3bK29z5bXA464E5uwGYs/sAc3ZfYM7uB8zZ/YE5e0APXM4e2AOXswf1wOXswT1wOXvZHricvVwPXM4e0gOXs5fvgcvZK/TA5eyhPXA5e8XW6tcStelKwNp0ZWBtugqwNl0VWJuuBqxNVwfWpg6wNnWBtWkYWJtGgLVpFFibxoC1aRxYmyZ62HHdbgFQ23lAbZcEars1gNpuTaC2Wwuo7dYGart1gNpuXaC2GwbUdusBtd36QG23AVDbbQjUdhsBtd3GQG23CVDbbQrUdpsBtd3mQG23BVDbbQnUdlsBtd3WQG23DVDbbQvUdtsBtd32QG23A1Db7QjUdjsBtd3Olmi7c4DabhegttsVqO2GA7XdCKC22w2o7UYCtd3uQG23B1Db7QnUdqOA2i4F1HZpoLbLALVdFqjtckBtlwdqu9FAbbcXUNvtDdR2+wC13b5AbbcfUNvtD9R2BwC13YFAbXcQUNsdDNR2hwC13aFAbXcYUNsdbom2Oxeo7Y4AarsjgdruKKC2Oxqo7Y4BartjgdruOKC2GwPUdscDtd0JQG03FqjtTgRqu5OA2u5koLY7BajtTgVqu3FAbTceqO1OA2q7CUBtNxGo7SYBtd1koLabAtR2U4HabhpQ250O1HZnALXddKC2mwHUdjMt0XbnAbXdLKC2OxOo7WYDtd0coLabC9R284Da7iygtjsbqO3mA7XdAqC2Oweo7c4FarvzgNrufKC2uwCo7S4EaruLgNruYqC2uwSo7S4FarvLgNrucqC2uwKo7a4EarurgNruaqC2uwao7a4FarvrgNrueqC2u8ESbXc+UNvdCNR2NwG13c1AbXcLUNvdCtR2twG13e1AbXcHUNvdCdR2dwG13d1AbXcPUNvdC9R29wG13f1AbfcAUNs9CNR2DwG13cNAbfcIUNs9CtR2jwG13eNAbfcEUNs9CdR2TwG13dNAbfcMUNs9C9R2zwG13fOWaLsLgNruBaC2exGo7V4CaruXgdruFaC2exWo7V4DarvXgdruDaC2exOo7d4Caru3gdruHaC2exeo7d4Darv3gdruA6C2+xCo7T4CaruPgdruE6C2+xSo7T4DarvPgdruC6C2+xKo7b4CaruvgdruG6C2+xao7b6zRNtdCNR23wO13Q9AbfcjUNv9BNR2PwO13S9AbfcrUNv9BtR2vwO1XRfgc6u6Ap9b1Q343KplgM+t6g58blUV8LlVPYDPrerZOl8ltV11a32V0HY1rfdVVNvVLo6vItquV0+ctuu9mL502q5u8X0tou3qy/EV0HYN5flqou36lOtL0XZ9eyI01L+++vXE6DH21b8nTtsNAPjytd3AnnZou4uA2m5QT5y2G9wTp+2W7YnTdsv1xGm7IT1x2m75njhttwLwmaRDgc8kXRH4TNKVgNpuZaC2WwWo7VYFarvVgNpudaC2c4DazgVquzBQ20WA2i4K1HYxoLaLA7VdAqjtPKC2SwK13RpAbbcmUNutBdR2awO13TpAbbeuJdruYqC2GwbUdusBtd36QG23AVDbbQjUdhsBtd3GQG23CVDbbQrUdpsBtd3mQG23BVDbbQnUdlsBtd3WQG23DVDbbQvUdtsBtd32QG23A1Db7QjUdjsBtd3OQG23C1Db7QrUdsOB2m4EUNvtBtR2I4HabnegttvDEm13CVDb7QnUdqOA2i4F1HZpoLbLALVdFqjtckBtlwdqu9FAbbcXUNvtDdR2+wC13b5AbbcfUNvtD9R2BwC13YFAbXcQUNsdDNR2hwC13aFAbXcYUNsdDtR2RwC13ZFAbXcUUNsdDdR2xwC13bFAbXccUNuNsUTbXQrUdscDtd0JQG03FqjtTgRqu5OA2u5koLY7BajtTgVqu3FAbTceqO1OA2q7CUBtNxGo7SYBtd1koLabAtR2U4HabhpQ250O1HZnALXddKC2mwHUdjOB2m4WUNudCdR2s4Habg5Q280Fart5QG13FlDbnW2JtrsMqO3mA7XdAqC2Oweo7c4FarvzgNrufKC2uwCo7S4EaruLgNruYqC2uwSo7S4FarvLgNrucqC2uwKo7a4EarurgNruaqC2uwao7a4FarvrgNrueqC2uwGo7W4EarubgNruZqC2uwWo7W4FarvbgNrudqC2u8MSbXc5UNvdCdR2dwG13d1AbXcPUNvdC9R29wG13f1AbfcAUNs9CNR2DwG13cNAbfcIUNs9CtR2jwG13eNAbfcEUNs9CdR2TwG13dNAbfcMUNs9C9R2zwG13fNAbfcCUNu9CNR2LwG13ctAbfcKUNu9CtR2rwG13euWaLsrgNruDaC2exOo7d4Caru3gdruHaC2exeo7d4Darv3gdruA6C2+xCo7T4CaruPgdruE6C2+xSo7T4DarvPgdruC6C2+xKo7b4CaruvgdruG6C2+xao7b4DarvvgdruB6C2+xGo7X4CarufgdruF6C2+xWo7X4T0nZtC39ROB8L4XTilW0qw9kpb3OvaoPrv24d7OB8NZDzX33t4HwNkPOCWjtqtWubzkHXKWO7oRandZbpg9M63fuEYFqnqk8IpnV69MFpnZ59QjCtU90nBNM6NX1CMK1T2ycE0zq9+oRgWqd3H4Sm+NdXXR+MPmFf9X1wWqcB4MvPjX364K7p/N0Hd03nnz64azqhvrhrOm364q7ptO2Lu6bTri/umk77vrhrOh364q7pLNW32bhv8TWdpfu2YA618JpOx74tmo8tuqbTqWW+WnRNp3NLfbXgmk6Xlvtq9ppO19b4auaaTre+uOvbIWUbWPjr+3bK29zrgNfh+wJzdj9gzu4PzNkD+uBy9sA+uJw9qA8uZw/ug8vZy/bB5ezl+uBy9pA+uJy9fB9czl6hDy5nD+2Dy9kr9sHl7JX64HL2yn1wOXuV1urXErXpqsDadDVgbbo6sDZ1gLWpC6xNw8DaNAKsTaPA2jQGrE3jwNo0AaxNPWBtmgTWpmv0seO63fVAbbcmUNutBdR2awO13TpAbbcuUNsNA2q79YDabn2gttsAqO02BGq7jYDabmOgttsEqO02BWq7zYDabnOgttsCqO22BGq7rYDabmugttsGqO22BWq77YDabnugttsBqO12BGq7nYDabmegttsFqO12BWq74ZZouxuA2m4EUNvtBtR2I4HabnegttsDqO32BGq7UUBtlwJquzRQ22WA2i4L1HY5oLbLA7XdaKC22wuo7fYGart9gNpuX6C22w+o7fYHarsDgNruQKC2Owio7Q4GartDgNruUKC2Owyo7Q4HarsjgNruSKC2O8oSbXcjUNsdDdR2xwC13bFAbXccUNuNAWq744Ha7gSgthsL1HYnArXdSUBtdzJQ250C1HanArXdOKC2Gw/UdqcBtd0EoLabCNR2k4DabjJQ200BarupQG03DajtTgdquzOA2m46UNvNAGq7mUBtNwuo7c4EarvZlmi7m4Dabg5Q280Fart5QG13FlDbnQ3UdvOB2m4BUNudA9R25wK13XlAbXc+UNtdANR2FwK13UVAbXcxUNtdAtR2lwK13WVAbXc5UNtdAdR2VwK13VVAbXc1UNtdA9R21wK13XVAbXc9UNvdANR2NwK13U1AbXezJdruZqC2uwWo7W4FarvbgNrudqC2uwOo7e4Earu7gNrubqC2uweo7e4Farv7gNrufqC2ewCo7R4EaruHgNruYaC2ewSo7R4FarvHgNrucaC2ewKo7Z4EarungNruaaC2ewao7Z4FarvngNrueaC2ewGo7V4EaruXLNF2twC13ctAbfcKUNu9CtR2rwG13etAbfcGUNu9CdR2bwG13dtAbfcOUNu9C9R27wG13ftAbfcBUNt9CNR2HwG13cdAbfcJUNt9CtR2nwG13edAbfcFUNt9CdR2XwG13ddAbfcNUNt9C9R23wG13fdAbfcDUNv9aIm2uxWo7X4CarufgdruF6C2+xWo7X4DarvfgdruD6C2+xOo7f4CartlgM+t6g58blUV8LlVPYDPreoJfG5VNfC5VTXA51bVts5XSW3Xq7W+Smi73q33VVTb1S2OryLarr4vTts1LKYvnbbrs/i+FtF2fcvxFdB2/crz1UTb9S/Xl6LtBvRFaKh/fQ3si9Fj7GtQX5y2Gwzw5Wu7Zfvaoe1uA2q75fritN2Qvjhtt3xfnLZbAfhM0qHAZ5KuCHwm6UrAZ5KuDHwm6SrAZ5KuCtR2qwG13epAbecAtZ0L1HZhoLaLALVdFKjtYkBtFwdquwRQ23lAbZcEars1gNpuTaC2Wwuo7dYGart1gNpuXaC2GwbUdusBtd36lmi724HabgOgttsQqO02Amq7jYHabhOgttsUqO02A2q7zYHabgugttsSqO22Amq7rYHabhugttsWqO22A2q77YHabgegttsRqO12Amq7nYHabhegttsVqO2GA7XdCKC22w2o7UYCtd3uQG23B1Db7QnUdqOA2i5liba7A6jt0kBtlwFquyxQ2+WA2i4P1HajgdpuL6C22xuo7fYBart9gdpuP6C22x+o7Q4AarsDgdruIKC2Oxio7Q4BartDgdruMKC2Oxyo7Y4AarsjgdruKKC2Oxqo7Y4BartjgdruOKC2GwPUdscDtd0JQG031hJtdydQ250I1HYnAbXdyUBtdwpQ250K1HbjgNpuPFDbnQbUdhOA2m4iUNtNAmq7yUBtNwWo7aYCtd00oLY7HajtzgBqu+lAbTcDqO1mArXdLKC2OxOo7WYDtd0coLabC9R284Da7iygtjsbqO3mA7XdAqC2O8cSbXcXUNudC9R25wG13flAbXcBUNtdCNR2FwG13cVAbXcJUNtdCtR2lwG13eVAbXcFUNtdCdR2VwG13dVAbXcNUNtdC9R21wG13fVAbXcDUNvdCNR2NwG13c1AbXcLUNvdCtR2twG13e1AbXcHUNvdCdR2dwG13d2WaLu7gdruHqC2uxeo7e4Darv7gdruAaC2exCo7R4CaruHgdruEaC2exSo7R4DarvHgdruCaC2exKo7Z4CarungdruGaC2exao7Z4DarvngdruBaC2exGo7V4CaruXgdruFaC2exWo7V4DarvXgdruDaC2exOo7d6yRNvdA9R2bwO13TtAbfcuUNu9B9R27wO13QdAbfchUNt9BNR2HwO13SdAbfcpUNt9BtR2nwO13RdAbfclUNt9BdR2XwO13TdAbfctUNt9B9R23wO13Q9AbfcjUNv9BNR2PwO13S9AbfcrUNv9BtR2vwO13R9AbfenkLZrW/iLwvlECKcT721TGc5OeZt7Xxtc/3WqluHcBsz5/jZ24HzAEpwPWoLzIUtwPmwJzkcswfmoJTgfswTn45bgfMISnE9agvMpS3A+bQnOZyzB+awlOJ+zBOfzluB8wRKcL1qC8yVLcL5sCc5XLMH5qiU4X7ME5+uW4HzDEpxvWoLzLUtwvm0JzncswfmuJTjfswTn+5bg/MASnB9agvMjS3B+bAnOTyzB+aklOD+zBOfnluD8whKcX1qC8ytLcH5tCc5vLMH5rSU4v7ME5/eW4PzBEpw/WoLzJ0tw/mwJzl8swfmrJTh/swTn75bg/MMSnH9agvMvS3D+bQnOfyzByR/6tAFnG0twtrUEZztLcLa3BGcHS3AuZQnOpS3B2dESnJ0swdnZEpxdLMHZ1RKc3SzBuYwlOLtbgrPKEpw9LMHZ0xKc1ZbgrLEEZ60lOHtZgrO3JTjrLMFZbwnOBktw9rEEZ19LcPazBGd/S3AOsATnQEtwDrIE52BLcC5rCc7lLME5xBKcy1uCcwVLcA61BOeKluBcyRKcK1uCcxVLcK5qCc7VLMG5uiU4HUtwupbgDFuCM2IJzqglOGOW4IxbgjNhCU7PEpxJS3CuYQnONS3BuZYlONe2BOc6luBc1xKcwyzBuZ4lONe3BOcGluDc0BKcG1mCc2NLcG5iCc5NLcG5mSU4N7cE5xaW4NzSEpxbWYJza0twbmMJzm0twbmdJTi3twTnDpbg3NESnDtZgnNnS3DuYgnOXS3BOdwSnCMswbmbJThHWoJzd0tw7mEJzj0twTnKEpwpS3CmLcGZsQRn1hKcOUtw5i3BOdoSnHtZgnNvS3DuYwnOfS3BuZ8lOPe3BOcBluA80BKcB1mC82BLcB5iCc5DLcF5mCU4D7cE5xGW4DzSEpxHWYLzaEtwHmMJzmMtwXmcJTjHWILzeEtwnmAJzrGW4DzREpwnWYLzZEtwnmIJzlMtwTnOEpzjLcF5miU4J1iCc6IlOCdZgnOyJTinWIJzqiU4p1mC83RLcJ5hCc7pluCcYQnOmZbgnGUJzjMtwTnbEpxzLME51xKc8yzBeZYlOM+2BOd8S3AusATnOZbgPNcSnOdZgvN8S3BeYAnOCy3BeZElOC+2BOclluC81BKcl1mC83JLcF5hCc4rLcF5lSU4r7YE5zWW4LzWEpzXWYLzektw3mAJzhstwXmTJThvtgTnLZbgvNUSnLdZgvN2S3DeYQnOOy3BeZclOO+2BOc9luC81xKc91mC835LcD5gCc4HLcH5kCU4H7YE5yOW4HzUEpyPWYLzcUtwPmEJzictwfmUJTiftgTnM5bgfNYSnM9ZgvN5S3C+YAnOFy3B+ZIlOF+2BOcrluB81RKcr1mC83VLcL5hCc43hXC2DeCMOPFoNJcI59yIm3LCybQXc6KxdNxzPTfmxbJhLxLJeVEvkUwnE07SjUZybj6WjOQLvlcAcn6rQpyd8jb37ba4/vu7rx3j3B7Yf+9YEtsdgJzftYTzUkDO71nCeWkg5/ct4dwRyPkDSzh3AnL+0BLOnYGcP7KEcxcg548t4dwVyPkTSzh3A3L+1BLOywA5f2YJ5+5Azp9bwrkKyPkLSzj3AHL+0hLOPYGcv7KEczWQ89eWcK4Bcv7GEs61QM7fWsK5F5Dzd5Zw7g3k/L0lnOuAnH+whHM9kPOPlnBuAHL+yRLOfYCcf7aEc18g518s4dwPyPlXSzj3B3L+zRLOA4Ccf7eE80Ag5z8s4TwIyPlPSzgPBnL+yxLOywI5/20J5+WAnP+xhPMQIOdQOzs4Lw/k3AbIuV2B64sFwquRrc5+yVyyMHMni5LFyOJkCTKPLEm2BtmaZGuRrU22Dtm6Ba7rka1PtgHZhmQbkW1MtgnZpmSbkW1OtgXZlmRbkW1Ntg3ZtmTbkW1PtgPZjmQ7ke1MtgvZrmTDyUaQ7UY2kmx3sj3I9iQbRZYiS5NlyLJkObI82Wiyvcj2JtuHbF+y/cj2JzuA7ECyg8gOJjuE7FCyw8gOJzuC7Eiyo8iOJjuG7Fiy48jGkB1PdgLZWLITyU4iO5nsFLJTycaRjSc7jWwC2USySWSTyaaQTSWbRnY62Rlk08lmkM0km0V2Jtlssjlkc8nmkZ1FdjbZfLIFZOeQnUt2Htn5ZBeQXUh2EdnFZJeQXUp2GdnlZFeQXUl2FdnVZNeQXUt2Hdn1ZDeQ3Uh2E9nNZLeQ3Up2G9ntZHeQ3Ul2F9ndZPeQ3Ut2H9n9ZA+QPUj2ENnDZI+QPUr2GNnjZE+QPUn2FNnTZM+QPUv2HNnzZC+QvUj2EtnLZK+QvUr2GtnrZG+QvUn2FtnbZO+QvUv2Htn7ZB+QfUj2EdnHZJ+QfUr2GdnnZF+QfUn2FdnXZN+QfUv2Hdn3ZD+Q/Uj2E9nPZL+Q/Ur2G9nvZH+Q/Un2F9nfZP+Q8Qfn2pC1JWtH1p6sA9lSZEuTdSTrRNaZrAtZV7JuZMuQdSerIutB1pOsmqyGrJasF1lvsjqyerIGsj5kfcn6kfUnG0A2kGwQ2WCyZcmWIxtCtjzZCmRDyVYkW4lsZbJVyFYlW41sdTKHzCULk0XIomQxsjhZgswjS5KtQbYm2Vpka5OtQ7Yu2TCy9cjWJ9uAbEOyjcg2JtuEbFOyzcg2J9uCbEuyrci2JtuGbFuy7ci2J9uBbEeynch2JtuFbFey4WQjyHYjG0m2O9keZHuSjSJLkaXJMmRZshxZnmw02V5ke5PtQ7Yv2X5k+5MdQHYg2UFkB5MdQnYo2WFkh5MdQXYk2VFkR5MdQ3Ys2XFkY8iOJzuBbCzZiWQnkZ1MdgrZqWTjyMaTnUY2gWwi2SSyyWRTyKaSTSM7newMsulkM8hmks0iO5NsNtkcsrlk88jOIjubbD7ZArJzyM4lO4/sfLILyC4ku4jsYrJLyC4lu4zscrIryK4ku4rsarJryK4lu47serIbyG4ku4nsZrJbyG4lu43sdrI7yO4ku4vsbrJ7yO4lu4/sfrIHyB4ke4jsYbJHyB4le4zscbInyJ4ke4rsabJnyJ4le47sebIXyF4ke4nsZbJXyF4le43sdbI3yN4ke4vsbbJ3yN4le4/sfbIPyD4k+4jsY7JPyD4l+4zsc7IvyL4k+4rsa7JvyL4l+47se7IfyH4k+4nsZ7JfyH4l+43sd7I/yP4k+4vsb7J/yHhRbUPWlqwdWXuyDmRLkS1N1pGsE1lnsi5kXcm6kS1D1p2siqwHWU+yarIaslqyXmS9yerI6skayPqQ9SXrR9afbADZQLJBZIPJliVbjmwI2fJkK5ANJVuRbCWylclWIVuVbDWy1ckcMpcsTBYhi5LFyOJkCTKPLEm2BtmaZGuRrU22Dtm6rEPJ1iNbn2wDsg3JNiLbmGwTsk3JNiPbnGwLsi3JtiLbmmwbsm3JtiPbnmwHsh3JdiLbmWwXsl3JhpONINuNbCTZ7mR7kPFvzY8i499I598f59/25t/N5t+k5t975t9S5t8p5t8A5t/X5d+u5d+F5d9c5d8z5d8K5d/h5N+45N+P5N9m5N895N8U5N/r49/C49+Z499w499H498e49/14t/M4t+j4t96GkvGv1HEv//Dv63Dv1vDvwnDv7fCv2XCvxPCv8HBv2/Bvx3Bv8vAv3nAvyfAz+rn5+DzM+b5+e38bHR+7jg/05ufl83PoubnPPMzlPn5xPzsX36uLj+zlp8Hy89aPZeMnxHKz9/kZ1vycyP5mYz8vEN+liA/p4+fgcfPl+Nnt/Fz0fiZY/w8L35WFj+Hip/xxM9P4mcT8XN/+Jk6/LwafhYMP2eFn2HCzwfhZ2/wcy34mRH8PAZ+1sG9ZPwdff7+O3+3nL+3zd+J5u8b83d5+Xuy/B1U/n4nf3eSv5fI3/nj79Pxd9X4e2D8HSv+/hJ/N4j1KX+nhb8vwt/F4O858HcI+PP5/Nl3/lw5f86aP8PMn8N9l4w/p8mfW+TP8fHn2vhzXvy5J/4cEH8uhj8nwp+b4M8R8H11vs/M9135PiTfl+P7VHzfhu9j8HV9vs7N1335OihfF+TrZHzdiK+j8HUFrrO57uQ6jOsS1ult/5UCIf6cMW+rhRZuhTTBL/3Pcf5cLn9OlT+3yZ9j5M/18efc+HNf/Dko/lwQf06GPzfCn6PgzxXwfXa+78z3Yfm+JN+n4/tWfB+H72vwdX6+7s3Xgfm6KF8n5OtmA8kGkQ0m47qb61Cuy7hO4c++DyVbkWwlspXJViFbNbTo9qOyX1/4W/vhevUHP37JRurr+pQ4tlzhb9tQ1TIjHtz3IfUY6wjejt1w7ciMVy8/QT22eeHYOZf1v6nPh21HqMe2LHFsxxLHdi5xbHiJY7uVOJYpcSxX4tg+JY7tV+LYQSWOHVLi2DEljh1X4tgJJY6dWOLYhBLHJpU4dnqJY9NLHDu7xLEFJY5dXOLYpSWOXVHi2FUljt1U4tgtJY7dWeLY3SWO3V/i2IMljj1Z4tjTJY49V+LYCyWOvVHi2Fsljr1f4tiHJY59Wjh2+0PH/nHea/fuqx77pnDsDu+hzV+9pHsv9di3hWNPbX/Wizv3PLJKPfZ74ZguD/5TODa/5xFjVziAV7SFW5u2xY91a1vc54edi/P7qMSxz0sc+7LEsR9LHPu5xLHfSxz7s8Sx9l2KH1uqxLEuJY51K3GsR4lj1SWO9SlxrF+JYwNKHBtU4tjyJY4NLXHsqGWKHzumxLGTSxw7tcSx8SWOTShxbGqJY6eXODa9xLGZJY7NKXFsXolj55c4dmGJY5eVOHZFiWM3Fo6NW/b7ntdeNmeIemxsVfHzTipxbFyJY6eVOHZ6iWPTSxybXeLY3BLH5pc4dk6JY5eUOHZZiWNXlDh2VYlj15c4dmOJYzcXjunyfNsexY+1Lxx7YuYzD196WiqrHluqxHkdS5zXucR53Uoc617CZ48S51WXOK+2xHl1JY41lPDZt8R5/UucN7DEecuWODakhM8VSpy3YonzVi5x3moljjklfIZLnBctcV68xHnJEsfWLOFz7RLnrVvivPVKnLdhiWMbl/C5aYnzNi9x3pYlztumxLHtSvjcocR5O5U4b5cS551Q4rxbehY/774Sx7YsqGZdrtuqxLHtSxzbscSxkSWO7VHiWLrEsWyJY/uVOHZAiWOHljh2eIljR5c4dmyJYyeXOHZqiWPjSxybUOLY1BLHTi9x7N364sfeL3HsixLHvipx7JsSx74rceznEsd+LXHs9xLH/ixx7D8X+Yoca1viWOcSx7qWONajxLHqEsf6Fo7ptOmnfYqf93mJY1+XOPZtiWO/ljj2e4lj/5Q41qZv8WMdShxbusSx7iWO9ShxrLrEsdoSxxpKHOtb4lj/wjHtOlbi2HaFY9p1rMR5O5U4b5cS540ocWxkCZ97lDhvVInz0iXOy5U4NrqEz71LnLdvifP2L3HeQSWOHVLC52ElzjuixHlHlTjv2BLHxpTweUKJ804scd7JJc4bV+LYaSV8Tixx3uQS500tcd4ZJY7NKOFzVonzZpc4b26J884ucWxBCZ/nljjv/BLnXVjivCdLnPdHP/151YW/vQurUKfCv/0Lq3wplu/LDSv82ylvczspftH+PScV7hRquoHxRzopPgX8h33/7WX8/+dZOLydO7ap/1DgfbsV/t1G6Uv/HP+YevH9vMKxjoXj/r5/o7JTwJ/EuKuY0P1WrcHfVuHG2wZjRd67MaY3FPEfzvj+Nyr4DzXx7Ua8eCTsxcPhbM5JZeOJfDKScCLpWCSZSbtOJBb2solUxHFykVwm6mTjyVg2l0rGIvl0Khn3fW+s9R3JpclVLBX30m4+Fc876WjCi6TyiUQ2lU1Gc4mYk3UzcTcTdvOel4rFUplY0nXzuWQs7zX63kSkXxbmqk1F/Edivv/NtH3TOqzBBt/35gp24DPeGv1vIeO/se+3lPHfOKe2Glt23y+y+b63HisRN/+uQbxtI+LfTfj+t5Xx39g/28n0T9T3v73iv41A/+8g478x9neU8d8Y+zvJ9H/e979zwX9I8e16kXA4EeHvhnhZx41mM2GPVpZ01Mk4qUw4l4y6yXw0HI1kspm0F/VSbt7JpzLJvPevc9/3LiLYI42xs6tM32R9/8NF/LuNsTNirETsRBrX3N3GhhYZ22ZOdpvz7vse2XrfzW2Na+3uxX0vdmj6vvfQ+A6nIhknmXdSMS+VyHkxkkkO7aS9XD4eTqVJMIWzruvmovS/cC4bTaazcTcdzyXCsTS9XWOf7DlWJF4atd8osP94yknm4vHGtSQF9p9OxxMp6k/ffxrsP5KJ5/KRRGOuzID9p2LRfD4WSfn+s2D/MdfJxcKJxtjMgf0n004s7nmN8ZMH+ye9H8kmU2nf/2h0/6RzTibrJv1ada+Cf/89ePPfe2/wexe2ZJvA+4VCTWvxUOD9OwewouudNoH3U/Go/ePXvX7f7TN2UaxVmmNqjgkea6dp899H5ysF9JUG+soAfWWBvnJAX3mgL39ey861aOM6uo+I/4jn+99XxL+T8/3vJ+HfXai99lf8h3D4G/0foPhvI+D/QJn+b/R/kEz/NOr2gwv+JXwfItP3jTXToTJ936jxDpPx31jTHC7jv1EDHyHT/42550gZ/I3+j5Lxn/T9Hy3jv1FjHyPjv1GjHivjv1FjHyfi323EP2asRHyGG3Pn8SL4w4357QQR/JFG/GNl/DfiP1HEf7TR/0ky/hvz/8ky/hvz/yky/hvz/6ky/hu12zgR/7HGGn+8iP94Y/ycJuO/8RrLBBn/jdfrJ8r4b4z/STL+G+N/soz/xvifIuO/Uf9MlfHfqE+myfhv1Ceny/hvXH/PkPHfqB+my/hvvKcxQ8Z/Y/6cKeO/MX/OEvGfaNQPZ8r4b8yfs2X8N+bPOTL+G/PnXBn/jflznoz/xvx5loz/xvx2toz/xvw2X8Z/Y35bIOO/Mf+cU/AfWnzfkWADf0WYP8fWvfD9Hd3n/4BazvE/W9d+IZUm9yN4v4PSDqwDsy25H6G+f+cAVon7Eer7+XiC/aPej+BjS2mwVmmOBcdwKc37LKV5nyrNsaD2K8fXmUBfk4G+ZgJ9ITlOB/qaBvQ1A+hrCtDXGKAvZN8j59BsQ32NB/pCxgSy75HxNRHoCzm3kTExAegLmaPnAX2Zuj76mlpWWznxbpr39jf/2NLKe6uaKri1C/xbxc1atbbnQr/B1/lb19DCe+6HHn1AZusDD8sdGipxAm8bjdW3m9Z5bQLHOraAQyjUfMeu2IKODQp4FVu3gE/13DYaX7oPAwWDWe3z9kUwqD78sQoK4WGFfztlbW6kJTzU969UEaFLEroiwu+fpWX6J9wm4F/Fs7Smf4IxHBy7NqGFE7mD4kt9/dIKR/X16r5/vtr2duFvVWjReeR/caKN5lg7TZvfv4z91QA3dWyCcSozDlG3pXHqv3/nkOS8WRinurjQLWadQouOM/IDUy0ZV11u66Q55vvyP8Coxqn6+o4KR/X16r5/vtr2ZeFvVWjRmA7GaScNH7VNjdOPC/udivAZVvi3U9aWSOjWqeA8UPsJ+QHwls4D//07hyTjbuE80I2TLp/4fddZg7VKcyx40aez5n06a96nSnMsKETL8TUT6GsC0NckoK/ZhvqaBvQ1A+hrCtDXGKCvM4C+kHFvYn+VWgdb64s3ZKzOAfqaCvSFjFUkx/FAX6bO7flAXycAffk3D4M60/cfCi3USsH1fljh305Z27+1m/p+Pg+1TX3/zgGsWDwLtZKuX3Wa1u+fLjL904iniwZPF03/+GPZVXPM9+Vfa1FrBvX1XRSO6uvVff98tS1eGLCqgE/egjVDVw0ftU2tGZw2TbmpYxOMU8lxUN/Px622qe/fOSQ5b5yScaGb/51Ci44zsH+cloyritcfy26aY76vwvOmm8Sp+vquCkf19eq+f77atmEgTtWYDsZpNw0ftU2N03UCcaqOTTBORcbBzbc4Tv337xySnDcL41QXF100/dgptOg4A/vHacm4qnj9sVxGc8z31b3wbzVO1dd3Uziqr1f3/fPVtu0DcarGdPBLX8to+Khtapz6P2DTqQifYYV/O2VtsahuLHH+E243Dc/gPFP7GhfXkRbPM//9O4cWjQuJedY9gKdYHPh9V6XBWqU5FoyRKs37VGnep0pzLFjXlONrEtDXGKCvCUBfZwB9jQf6mgb0NR3oCxkTE4G+xgF9zQb50uXncnCdCcLF2xygL+Tcng/0hcyFyPk4A+gLOY4LgL6QMYHse9TcDoE5ImNiJtCXqXkCiet/QTMtWdP+e32PnI+Tgb6QHM8yFBdSTyA5Bu8PqLVlm8LfTqFF5x6wzvZ/w7bx/Xweapv6/p0DWLF4FtbZun7trulXv+96aLBWaY4F6+wemvfpoXmfKs2x4JpRjq9JQF9jgL6QHKcBfc0A+poD9IXs+/lAX0vGsXW+FgB9IWNiItDXTKAvZP6aDfSF7HtkrCL73tT8hYxVZHxNB/pCjiMyvpBzCBlfZwJ9jQf6QnI0VcshOSL1hKnjaKqWOwvoy1Sdg9SYS/TE/485hMwTSFyo+OL94HXVcnDNBeHiDdn3SA3gr7XBz7v5/nmTvYYWbvFnbIPX0EQ+g9XMNTTdZ+s6hRaNQ2D/uC0ZZxWvP5Y9Ncd8X/6PQKqfCVNf30PhqL5e3ffPV9s2LnRKVcAnb8HPhPXU8FHb/P7lz4QNa9uUmzo2wTiVHAf1/Xzcapv6/p1DkvPGKRkXumvonUKLjjOwf5yWjKuK1x/Las0x31dN4d9qnKqv76lwVF+v7vvnq207BuJUjelgnFZr+KhtapxuHYhTdWyCcSozDi3/LLj//p1DkvNmYZzq4kK3TnUKLTrOwP5xWjKuKl5/LGs0x3xftYV/q3Gqvr5a4ai+Xt33z1fb0oE4VWM6GKc1Gj5qmxqnIwv/6B4qPj9bm6d1eizYh+p5wfkgMt5uzmnpfPDfv3NIcn4unA/VLexXv39qRPonm29J/Kh4/bGs1RzzffUq/FudD+rraxSO6uvVff98te3QwHxQ505wPtRq+Kht6nzYP5C31bEJxqnIODhOvqVx6r9/55BknlwYp7q40K1/nUKLjjMQT64l46ri9ceyl+aY76t34d9qnKqvr1U4qq9X9/3z1bYTA3GqxnTwOzy9NHzUNjVOjy38o1MRPsMK/3bK2nKubixx/lNOJ01f4/yHk50044Xzn/Z8/3Uy/uO+/3oR/17j+DaI+I819k8fGf9Z339fmfhpxN9PxH8k4vvvL+I/14h/gIj/aKP/gSL+043zd5CI/2Rj/A+W6Z/G8V1WxH8+5vtfTqZ/GvEPkcHfmP9XUPwjr0X4/lcU8e9E/P4YGlq4tdNw8t/f1yLLK69vU+Sv7yt4zH+vzgFfUrpPx03FH6z7hip41D4o5mtoK3110hyTGNMVSvBW379bCaxBHrwFn42xuH3C20Sgr1OBvs4E+dJp23JwjQXiqgXh0unfcnz1BvpqB/LFW/BHwsrBVQfCxfv1hvpqAPrqA/TVF+irH9BXf6CvASBfvAV/vKUcXAOBuGaNxeEaBMLF+4OBvlBrB+8vC/S1HNDXEJAv3oLXTk3xtUPBl+z1rmhS9npXJCV7vSualb3eFYvIXu+KJmSvd0Uzvlb310P/PdTYUtc3XF0RbfF3xPz37xzAisWzsL7rG8AT7B9/Xvp910+DtUpzLDhH+2nep5/mfao0x4Kf8SvH1zygr/FAX2cAfU0D+poI9DUG6Gs60NckoK/ZhvpCxuoUoC9U3+vWbVNiFTkf5wB9mTof5wJ9IeeQqX0/FegLmSeQay0yRyP7HtlfpsYXUpsgxxHZ9/8LeWI+yBfvB2vYcnCdDMTVG4QL6Yu3E8ficNUBcaH6nrdxQF/ImAheSy/HVzuQL95QMcHbqUBfJwF9IeMLiQsVqybnwq5AXMhYRY4jMq+a2l/IWA1eWzVlbiPz1wKgL6T+mgz0hbymgNTkyFoBee3R1/f+dewG5Vibwl/ZewDOYt8DaJDBU/IeQIOmX3WfhwXiybZknFW8/lj21xzzffn38tXP9quv76dwVF+v7vvnq23TCwNXFfDJW/Cz/f01fNQ2v3/5s/2T2zXlpo5NME5lxqHlvw3pv3/nkOi8cUvFRV9NP+riwj+3SnMsqOlbOl66sQ9+9q0cXzOBviYAfU0C+pptqK9pQF8zgL6mAH2NAfqaBfSFnEPIcZwH9DUe6GsO0BdybiPjCzmHkHn1f6HvpwN9IXO0nwt136MC6g9H9z0noP/G7xwMKNEX6vsHP4vjH9f99X0Fj/nv1TngC8zNLcWtVO2m6vDgZ3t1vga00pfuu3ESY9q/BG/1/WW/CxgLy34XMBaX/S5gNO/H/CClP9sE+m5ZkbH0WvwsFf/9OwewSs2pZQN4gv0TrIeW02Ct0hwLfnZvOc37LKd5nyrNseC6XY6veUBf44G+zgD6mgb0NRHoawzQ1yygrzOBvpB9b2qszgH6mgT0hYwvZM6ZCfT1v9D304G+kBxnG+oLObenAH2h+p73g5/LNSVWTdUASF9L1u0l67Yta8eSdXvJur1k3f7/2femxupcoC9kfyFzDrLvpwJ9IecQct02NUebqieQHJHaFzmOyL7/X8gT80G+2oQW/XxOOb76A32hrpPz/gCQL96Cnz0uB1dXIK6TQbh4Gwf0dSrIF+8PDOF8/X/ve94PfneiHF+9gb7qQL54Q/bXYBAuZKzyhpxDpsa9qRz/v+dCJC7elqwd9q8dvJ0C8sX7yM88oPqL9+uBuE4C4kKttbwh10dkf5m4dvC2AOgLWfNNBvpC3tNBXgdAXp9Afj4n+P22ZZVjbQp/dc+L5/cZVvi3U96WbRN4P5+H2qa+f+cAVjAet1S/LqvpV93z7oF4Mm0C/lU8QzT944/lCppjvi//OZnq99vU1w9ROKqvV/f989W2b9r/+7cq4JO34PfbdM9KV9v8/uXvt33Wvik3dWyCcSozDuEWf7/Nf//OIdF545aKC93818WFf65uvILrfkvHS+drGtDXbKCvCUBfM4G+5gF9TQL6OtNQXBOBvsYAfc0H+joB6GsB0Beyv2YAfSHn4xygL2TcI3MhchwnA30hcw4yJqYDfSH7fryhuGYBfSFjAqlNkOs2chxNzV/I+ELOR1NzNNIXMr6mAH35fe/XK2p906bwV/g34KJtAu/n81Db1PfvHMCKxbOw1tP16xBNv7bm98V8rP6+ekx9n0r/jhdvM4G+JgB9TQL6mm2or2lAXzOAvqYAfY0B+kL9NhJv44G+kPMxqCNMiS9kf50B9IWML+QcQuZVZEwg86qpcxs5H5FzaB7QF3I+/i/E13SgL6QG8Nfa7oVjqt5Wn0eiHlPfp5TmV8/3X9dNc16bwl/Z3/BNtvh5Hf77d9b0iYTmH9rCfvX7bkUN1irNseBnV1bUvM+Kmvep0hwLrk3l+JoH9DUe6OsMoK9pQF8Tgb7GAH3NAvo6E+gL2femxuocoK9JQF/I+ELmnJlAX/8LfT8d6AvJcbahvpBzewrQF6rveT/4vA5TYtVUDYD0Zeq6jex7pAZA5miknjA1Vpes2/+9NW2JJm+dryWa/L8XX0t04X8vvkzUhbwh+8vUWJ0L9IXsL2TOQfb9VKAv5BxCrh2m5mhT1zQkR6T2RY4jsu//F/LEfJCvNqFFP+NUDq4Tgbj6g3DxflegL+T9IWR/1QNxjRuL83UqyBfvDwzhfKFigreTx+J8ofoeObfR8xE1h3h/AMgXb8j5+L8QX8HnDZXjqzfQVx3IF2/I/hoMwoXMhbwhc7SpcW8qx//vay0SF29LtIn9awdvp4B88T5Sk6P6i/eRmvwkIC7UWssbcn1E9peJawdvC4C+kNcUJgN9Ie9bIa8zIa9/IT9fGHzeUFflWJvC306hRXMdv8+wwr+dsja3xc8b8t+/c2jRtQqHZ+HnfGtCi/ZrV02/+n1Xq8FapTkWrI1rNe9Tq3mfKs2x4D3fcnzNBPqaAPQ1CehrtqG+pgF9zQD6mgL0NQboaxbQF3IOIcdxHtDXeKCvOUBfyLmNjC8kLuQ4InEh8wQyJpDjOB3oC5nv/bzqa6ugJhhW+LdT1haL+dpE1TK+puoU0msTzHu7XpvA+4VCel3nv3/nAFYsnoW6Tjduav8EdV0vDdYqzbHgGPbSvE8vzftUaY4F52Y5vk4H+kLimgnyxftLhzC+0BzHAH1NB/qaDfQ1BegL2V9zgL7OBvqaBfQ1CegL2ffTgL4mAn0hOc4H+joB6Mu/zhfUFrwNK/yl5TDixSNhLx4OZ3NOKhtP5JORhBNJxyLJTNp1IrGwl02kIo6Ti+QyUScbT8ayuVQyFsmnU8mErHaIJTuF9Osrxr8b9v33lvEf8f3XyfiP+v7rZfzHfP/9ZfzHff8DZPx7vv+BMv4b41Pm2Qduyve/ooz/rO9/JRn/Od//yjL+877/VUT8hx3f/6oy/hvzz2oy/hvzz+oy/hvzjyPjvzH/uDL+G/NPWMZ/4/oYkfHfmN+iMv4b81tMxn9jfovL+E/7/hMy/hvzpyfjvzF/JmX8N+bPNUT8Rxrz55oy/l3f/1oy/hvz89oy/hvz8zoy/hvz27oy/hvz2zAZ/435Zz0Z/435Z30Z/435ZwMZ/xnf/4Yy/hvz20Yy/hvz28Yy/hvz2yYi/qON+WdTGf+N+WczGf+N+WdzGf+N+nALGf+N+nBLGf+N+XMrGf+N+XNrGf+N+nAbGf+N+XlbGf+N+Xk7Gf+N+Xl7Gf+N+XkHGf+N+XlHGf+N+XknGf+N+XlnEf+xRv25i4z/xvy/q4z/xvw/XMZ/Y/4fIeO/Mf/vJuO/Mf+PlPHfmP93l/HfmP/3kPHfmP/3DC3cFvqO5NJ0qT+WintpN5+K5510NOFFUvlEIpvKJqO5RMzJupm4mwm7ec9LxWKpTCzpuvlcMpb3GrGP0vouZ3Mb51VKol/cfGNeSCv+28Dwe43+MyLjutB/VqR/so15OYceW9dx+HcjjyjcqPefX5xXeHQIjMnowr/938Tk7cCxC1+TV46rr7+1879/+f2OKbxfN6WvQsr78OZzbi/Rp3SvoE3g/UIh/edg/PfvHMCKxbPwczDtA3iC/RP8HEwHDdaqwDHegvdFO2jep4PmfXS+FgB9jQH6mgX0NQnoawbQ10Sgr2lAX0iOU4C+TI2v8UBfZwJ9zQH6QsYXsr/OAPpCxhdyDs0E+kLGBDKv+p+X6xRadC3Erc1xx19rR4UW3fxjqVBTXuqxtPL6jccufF1waxf4t8qpI1my50K/wdcF8ai6KaX4L6YZePP7cSnlOFLj+P47yfiP+H3fMdS0T4OcOhXpK/+47q/vK3jMf6/OoUX7XUIf6rip+IPzpaOCR+2DYr46ttJXJ80xiTFdqgRv9f27lcCq4xGsb3T5SKe//dd3KoFLfX13zXv75/p92Fk5BuzDcKk+VOei//5dFZzZXPrw0VseODoU2NoF+sHvt7rA6zYZu7AfgjHYsYivUODfdYG2doo/dZOtGf+764DPqbXrgNq3qcCxxc17vAVzQ7DPeeOxfjVwbaGdhlMwhopdW2inHFdf/9bSC9/vzcJ+F+U9u5Z4z24B3OrredtkbNPXL6Nwa6d5TdcARv/17xdw8fhtVhg/Xd/5eDoFzv//FMs+p9bGsjqOQWy+Tz92gmNbbFy+VsZly54LMQffr1sJHv6/99S8n4+9KvBa3vwx7qG0A69xtfi3uvz37xzACl6HGjVMjwCeYP/4uYX7sEthf78DU9kNUgcdevh+ubaBruyu7KvuqwLu/Neor1W3KgVSqMjrgsPO27ZjFz0vuPld2T206LSuCryX6r+dpi2Yeqs02Pww9/umprDWctr6I3D5NRjGvHUKLdq3wFDItDQ0/ffvHJJMhwtDs3sAT7G+9/tHaKqk24QWnRbtNO/p4/XHsofmmO+rkN2apEj19ep8UV+v7vvnq22dCrFVFVp0em81tikG3dRX2/z+/c/yWvDbXcNnmQA33bh11/it0pwf7EN1Hu8/tumxDhpu/rGlShzrWOJYJw0v/1hn5bwDA+d10fhkDKM6LvRXrG/UuPLliy43FcutxXxtEPClnt8j4KtnM762DvhSz+8Z8FXdjK/tAr7U86sDvmqa8XVowJd6fvDRY7XN+Dos4Es9P/hTUb2a8XV4wJd6fvDRnL2b8XVkwJd6fvBxYXXN+Doq4Es9P/hozvpmfB0d8KWeH3xcWEMzvo4J+FLPbwj46tOMr2MDvtTz+wR89W3G164BX+r5fQO++jXja9+AL/V8/9xuGl9BHSDzlbOW6wD//TsHsErpgP6hRftV7Z/gbdgBGqxVmmPBvDVA8z4DNO+j81UN9FUD9FUL9NUL6Ks30Fcd0Fc90FcD0FcfoK9g3mpuvd5p7L9/S63X/nlq7Kqva6e8RrdGqz6K6QG1ZlPb+7WAj9oW7Jt+Rd6vGD61b/x6s5T+6B44T4e5qpn3KYXZf51OMx80tukx9RJ7UN+ql4ODOly9VN4jcKyThldQM6vjGtTMar+pmrlDgE+m0C57Oc5x1Pgr1lfB6xK6v6FQyy7X6i65S79P2wq9T5DPMsD3UX35lz3/e5f4nFxLeKjvL32Jz++L6hJ9IfMoqWiLL3cGH1laLdQXfiw2V7cFbynqajPdWqJeHh2dO4xu0q1/9I6p0UsrL1XTahBOt8DregT+3bMIrGGB1wWfYubLvyAO1Ze6BXGUuvyqe39dGvH3O2jaedOVtcHLsK192ot6fq8S71Nd5vtUa95H9skpCz+5IfNkk4V3+XWXElRO/vsHnwLnH9f99X0Fj/nv1Tm06BhJpAEdt1LjrJYYLbnkUtdKX7JPw1k4pr1L8Fbfv1sJrDoe6t1iNc8tVdCGLOtO79jUty5XyH56LBJvaTz671+pT5q39JMuOqnun1sVOMbbKWMXvi54rJ2mrW0JXzOBvuYCfc0A+poI9DUG6AvJETmOSI4TgL6QHKcDfc0C+joD6GsS0NccoK9pQF/ImEDOR+QcQsYEsr+mAH3NBvpC9v1koC9k358J9IXsL2QuHA/0hewvU3Mhsr+QOed/QTMhYwK5bqP6nveDTxs3Je6RfT8V6AsZ90iOyDyB1ADI/poP9NWSb2Pr6nr/9bpvsOiuS/2vfIMlFnjdJmMX9kMw57T0GyyxQFu7kP4bLOz71cDHc4PffuFN9npsJNwm8H5BjqHA+3cOYAWPf+M1K93Hw3TXPf2+a9BgrdIcG6zsq8fU92nQvE+V5lhw3S7H13Sgr1lAX2cAfU0C+poD9DUN6AsZEzOAvsYAfSFjAtlfU4C+kP01GegL2V9zgb6QsToR6Ot/YRzPBPpC9hdyHRoP9IXsL1PXIWR/IfM9Mr6QOQc5H5ExgdRMqL7n/eA1GFPiHtn3U4G+kHGP5IjME6bqr/lAXwsKvnRfJQp+hUFXw9aXeB/1/PoW+NLVw/7rdV89KnWtR/fVI//ag9BXcMKlxkP39aXFudbj95sbeF3wWo+a2/oU8RUK/NsNtBW71hP83NLRhQtZsr+ypv+oefDziupnRqsC/Fr7VVv1/O4l3qe6zPep1ryPbF+2/ikaVYFjaeVY8CsOGcWX+hSU4NYu8G+VL8+LbVrxhA11PFJFfHbQvLZN4Jj/2kmdFuLYrYBD9nOHlRsT/6vOLR0Tny/3xR5ljonuV5B93LqvS7fka9y6r+FXac7vUeJ9li3zfZbVvE83zXltivz13yfYFnwfHeZS19sX931UX/4clr123/r4D/azGv/Bz+ZmlGPBp+ipT79W7wMFN93c8PuC58b5LZgbsvebKteHwa+8qX2ozu3gputDvy9a2ofdQ4v2YXBud9fw0M171cfizHsdBtPWierAMXWMawLH1DGuDRxTxzh4vyqnHGsTOJZXji0VODZaORZ8EuJeyrHOgWN7K8fUsQ5uza1nz7ZiPVPjJhU4plvPdI9Q8f3KfqUsEmlJ3lffv3MAKxbPwvuguq8I657c6fddrQZrVeAYbyeNXfi64LF2mra2JXxNA/qaDfQ1AehrJtDXPKCvSUBfZxqKayLQ1xigr/lAXycAfS0A+kL21wygL+R8nAP0hYx7ZC5EjuNkoC/kOCLzF7K/ZgF9jQf6QvYXcg4h9QSyv84A+lqSV/97eRXV97wfvA9qStwj+34q0Bcy7pEckXliCtCXqXp1LNCXr1f989QaX71nKfwcg8Zf/WyQ8d/4nIRS93LV9w/W9P5x3V/fV/BY8HPbtTLcSn5uu1QcqNfGW/KI0PpW+vpvPs9E7evg80x0WHU8aoB90pJfQNFdW2rt2JZ6ZKvwHGv8TEFNiX5S37+c74+EA6/z7xO2DS06dnVFfIUC/w4H2op9pqB7aNEx7VQEp/++wbZgrKjndyjxPp3LfJ/OLXyfqjLfp6qF71Nd5vtUt/B9loxP0/f5b46Pn4fVZxb59235nku6s/491Ufqq89qCn5mwn/9XOXXcHOdi3NsF+Cv5gn/UYSyv8DV+vtkwb5Ma/i00fjS3WPyObX2l2LU7+ip2FSfxX4pZinluPr6QzovxHJ+P73PNopP9buK/ufK/Nf7c3ap0ELe6muCGPzXH6Fg8H9FKOizfRFeHYv4nKzE4tGd9T5DGp86Xp0DvIIYOgUw+K8fo/C6SHnOtvoa/99qnBw8tim2Lpr3ChVpC+a0LkWOlXrf5s7lffVXhILHgrES7C/1/GJ9GowV//XjSsTKUhoMKt/guAYxBF/TuQiGiRoM6mMrMwcedHThV31CgS3442QdAv8ODmVwCJbS+Cm2+d3A50zurPejvs7fguGnLsUdNe/RuQhG9VzuHn94s7n9coflinRQ24CzDkXerG1Iv8n+2qfMuqH7fIWae4Obbk3x+fJ5l/Zb6Df4On9Tv5O9RFctnq4K+tLpJd72HrvwuPr6i5Q8cks/vc+2RXz6PyNTak3TfTbJf72uZiyludV4DNbpuvdW+zKYd2tbibW56w2dAlh1tWhLsW5QYawdWom1s+a91bWHkuveR+QO2frAwxqfoh3SwAgF9oPrTvA1wfWiYxGoXQOv6x74d/CxysH03jPw7y4afLotiFmHpV2o+c2fon5f3aRM0duLTNFQSD9F/bAPll/quWr55YfEQZrX+e95cICP+nr1Pf3XH6K8j07iHBTg7b/+Lo3EqdJg8vF0CpyPXXYTEb8PDw0tuvnHDgs15a4eO1x5/UZjF74uuOmWVp8T98WKrSjX1HEMYvN9qkuGOrbFxuUxZVyCP+ypvt/BoeI8/H+307xfsC/947z5Y3x4wMewwr+dsrZYqk3g/UKhkPYyv//+nUOL9q3EZf7DA3iC/aNLwyV+2PNQZV91Pzzgzn+N+lp1G65AChV5nW7YazXnBTe/KzsEMH+uVNUvBNKWOvWDv0esYminaQuqrfYa/Lr3WarM91mqhe9jM5/gJ615C/4A5GgN1+AnrXkL/ljj3sqx4A9A7hNalJd/bN8SPvcr4XP/EscOKHHsQM0xxjS660KMweVFN9X9pVM3dsXmdTFfwR+VVM8/PODriGZ8BX9UUj3/iICvI5vxtV3Al3r+kQFfRzXjK/ijkur5RwV8Hd2Mr8MCvtTzjw74OqYZX8EflVTPPybg69hmfAV/VFI9/9iAr+Oa8RX8UUn1/OMCvsY04yv4o5Lq+WMCvo5vxlfwRyXV848P+DqhGV/BH5VUzz8h4GtsM76CPyqpnj824OvEZnwFf1RSPf/EgK+TmvEV/KE39fyTAr5ObsZX8IfR1PNPDvg6pRlfwwO+1PNPCfg6tYQv3g9+u1o93z+3m8ZXm8JfX06OU9px8s1t8bdc/PfvHMCKxbNQTo4LLdqvav8Ev+UyXoO1SnNMXYvUY+r7jNe8j87XoUBfhwN9HQH0dSTQ11FAX0cDfR0D9HUs0NdxQF9jgL6OB/o6AehrLNDXiUBfJwF9nQz0FVzLSul63vcvzZXS9f55aj4LXu5qFzhHfb3qo1jd0C6krwdObQEftS3YN6cWeb9i+NS+CX5DenHrFN6vD/ha3DqF9/sHfJVTp2wztqmvxa1TeH9AANfi1im8PzDga3HrFN4fGvBVTp1y3NimvsqpU/YM+FrcOoX3Vww19bW4dQrvrxTwtbh1Cu+vHPC1uHUK768S8KWeH8ztzdUpx49t6ks9vzV1Cu+vGsC1uHUK768W8FWqThnXjK/VA77U88cFfI1vxpcT8KWePz7g67RmfLkBX+r5pwV8TWjGVzjgSz1/QsDXxGZ8RQK+1PMnBnxNasZXNOBLPX9SwNfkZnzFAr7U8ycHfE1pxlc84Es9f0rA19QSvnjbcGxTX+r5UwO+pjWDKxHApZ4/LeDr9GZ8eQFf6vmnB3yd0YyvZMCXev4ZAV/Tm/G1RsCXev70gK8ZzfhaM+BLPX9GwNfMZnytFfClnj8z4GtWM77WDvhSz58V8HVmCV+87TK2qS/1/DMDvmY342vTgC/1/NkBX3NCpTmuE2rqSz1/TsDX3GZ8rRvwpZ4/N+BrXglfvO0ztqkv9fx5AV9nNYNrWACXev5ZAV9nN+NrvYAv9fyzA77mN+Nr/YAv9fz5AV8LmvG1QcCXev6CgK9zmvG1YcCXev45AV/nNuNro4Av9fxzA77Oa8bXxgFf6vnnBXydX8IXb/6nubprzj8/4OuCZnBtEsClnn9BwNeFzfjaNOBLPf/CgK+LmvG1WcCXev5FAV8XN+Nr84Av9fyLA74uacbXFgFf6vmXBHxd2oyvLQO+1PMvDfi6rBlfWwV8qedfFvB1eTO+tg74Us+/PODrimZ8bRPwpZ5/RcDXlc342jbgSz3/yoCvq5rxtV3Al3r+VQFfVzfja/uAL/X8qwO+rmnG1w4BX+r51wR8XduMrx0DvtTzrw34uq4ZXzsFfKnnXxfwdX0zvnYO+FLPvz7g64ZmfO0S8KWef0PA143N+No14Es9/8aAr5ua8TU84Es9/6aAr5ub8TUi4Es93z+3m8ZXm8Jf/z7XLUo77r5S1G0TeD+fh9qmvn/nAFYsnoX3uW4JLdqvav8E73PdqsFapTkWvOZ4q+Z9btW8j87XEUBfRwJ9HQX0dTTQ1zFAX8cCfR0H9DUG6Ot4oK8TgL7GAn2dCPR1EtDXyUBfpwB9jQP6Gg/0dRrQ1wSgr4lAX5OAviYDfU0B+poK9DUN6Ot0oK8zgL6mA33NAPqaCfQ1C+jrTKCv2UBfc4C+5gJ9/V97bwImWXKVh0ZWVnZ3VXV1VXfPpll6umeTZtNk1l7aaDGbBkkjaUZol6DWmZ4Z9Yy6e3p2kRaL0IKE0C4kFoFA2GAwtiUZhMEC2cbvwZPBCzKbDcI8+8Gz4VkISw/suT33VP755x+R91ZGZGX1VHxffXnrxolzTpw4ceLEieV+LCKuH4yI6+MRcX0iIq4fiojrhyPi+pGIuH40Iq5PRsT1YxFx/XhEXJ+KiOsnIuL6yYi4Ph0R109FxPV3I+L6exFx/XREXD8TEdffj4jrZyPi+rmIuP5BRFw/HxHXP4yI6x9FxMUxx2775F6fP4f2yVk5jDvx0cwqlUF4xOHbh1d1en/dZwrUB9+xbD7joefjD2Xzhvy5131/2fMbCVcv+/7eRLiwfNl9f+cSLrXvb0KU432ipwJ0shTaJ3oqQOczPdL5jKCjzik+0GzPu8t11lV9EYbPPuIXYU5S3j2iXnxOEfsIn1NEHeRziqhTfE4RdYTPKWKb4zlFO49rMronfz9CdbO+ezT/v95jOgB4fXLEdqt4fp3rXJvIEusHfhWo0ic6Q32iw/U5GZEO4rq5+dSv6r98fUfZ/ovlT3lw2dUGWcIvPd4N+Qj/eK7LGe5foqs21B51vLr01qbz1tXKWh/h8e1o/n+9t9Qw/A+nwT8dGh+xTmxTUHZl9AtpjRKu2LIL1Q35Zz3E8bqIH/FQSVwjIi9Fm54O1FuNIYpXVQ9f30Q6oVuQHw7whfAh/8lkiD5MRBlOhWSofLDN3IJscruI4MzuDLlOHXzIg8vR/xfRu6oL34KMbTri4dPodrPjWJ79sFPEl/o1OvyO6SiejQ7eZ4G30n6M7mYwvcMrc7CsnW2uEfzf7G/h/ESOU53z8vWVCtDDuzCs7Zk/31VLPO4Z/Cdh3OMbLe+mOmM9Fc+GE+8bQZ7t3g/m4SfJj0w0Rko/0mhNEL/cPlwX1SasdyeEHEKyRT8F/RiE/5mSfgrqKPspyJOVVXN+vo1R0QmNk6OCTq/+gaKjeOa5W5awn3+W+rnpA/ZzLGv3IdQI/v+Bfv4LgX7O+4fYp2Hbx/3c6Pn6OeuNwf9yoJ8rn/nlTT/PhhP7OfLM/dzgf436eSK/RvZzo6XGMe7nZccxZccVnbEe6YwJOqnHyzGiczoiHcTF9zD5+utvUX+1dlX9lcdthP8M9Nd/S/0V9T3Unjx2nBZ0uc84VyxGGTqbzDYqS6Gxw+B/PzB2hOYAWQrNcUMxYYRDmFDctBqggfqE781nxTHtboJ9iGBPB2B987ns+dvz57Rz7vlF6wsY+7VkeY8Kni0Pz2S/qtmC41Sl/7FOma78SoEbndXc8FEPTpZplvj2d6vzkMD7MOFFG8DysvvWuP//Td4Xsv7/l3s1PtaTLL0hx5d2Xjm/xO2LiduX5cNJta/xnbXvfyvRvtiGj1Ee2my+4w/HSMORyX53TnRQ+9Jm+st/67G/KHnyWgTK03CgPGuE45rxFszIeDtPBsPjRZas/1ifNfkNi/JZYt/P4Mdzmpl8nntI0w/1N+e0XUA58F2jjzrNi6qzwT6T9BH7WDx9nGlYOz5OPCPtJxLRLuKvIf1xwY/xPSryhnvgdbYxPz81N7M6u748tzA7u1Yh/MYrv+PYobqrY0LAm6y/I4msp1etq1WbLfxvBblmaRjynqC8GuQZj1kfesGhdv7fmoj/IvJH+pMCnm+1L9qWk4IOz9V6wXV6k7gOuPY+oMZC9G14LET/Be+DvcVjl4vYOrNtbPexnmwHbyRbh+NfRB2aUf4o27rHE9EuauuM/rjzt+2oyOvF1q3OzjRm1hdnl1fXp9dW59crrnNMqIp3bOuU3u4T8IltRV3ZOrZnw5D3OOWhrTMela1LMy5O14vIH+lPCni2dUXbclLQYVvXC67Tm8Rltg79IPZT0daxn/qwqA/aOp6X3UY2Kc0nHXSMkG0q8pslnEM/DHJi+TIefId+M5bhmI3BvwL89tvHNX9Wh5cK/tTeJazXneN+uIcFXDZVNj/qrrVTd969dGJt9c61lRNrp6pOs8dV5OrzdMoRXJb4y2Vvpv85fMNrqjYEF/1ymf0iLtV0iJuH3lfDlOc2MmEYpoo4zZ1TYVpLasrJKoRJTXON7zNfADnUwstwTBPVikPxKAuE43YtsuR2l+BVfUqg4vk1OvyO6Sie7f+Q2fB189PQze8ab8Fzvymy/ajIsjK+Q/hlysPlpkoAP4cO3gy6/ykKh6B7YPXY+NAm5MXrF1ONjI/Xgb6yfULXg/uPWkplFyy0LSpLFp4PbZNRuoW6ZDqi2tnK9GsZW9EZ75HOuKCTuu+OEx3fstPbPH3St+x0HeQj/E/CstN3F2hP1WcMLnGfmVJ9Bu1HkT6jljOL9BmU4aSAf12zPQ/blJfsUHfubrbzUEZHubzBpd22Mj+v3GxLys3mpWEMeduVq2p5AZcQOSlfwOqb6ckDJXwBbCt2U7EPGN9qyZG305RdSlf6wrjwCAvafvtEDet9zUPbt2XkkzBG8gc4Vd9QemnwaqukGmPUUjVvlUy0hXjGeH0E+GT5Mn3U0SGAfyQAz9tKGP+jHtkZfJawjXl5Go9GsKyxLIfbfgbnAwdaMmCeuD6qzhyqC205rdAfL6Fk6XSzk75aAsn+jub/13tM3L7DQOMxIQ9eqvkcjckWlqmKuiq5Pi7oYijNZFIj+M9BO/7loXacxtuY02MatwmHZrkvn2i25xv8P4X5wuc9U/gsoQ/za+Oa9qjTesi8Pix4xbHliWZ7vsF/AeT11UOaV+RH8ar6KH6EuGwfvZ14Nfh/GeijIV1SNpe3Bqg+ynyzDSuqFwb/JdCL3yS9UPORDO4PSNa8/SFLIfvA9vRo/n+9x8Rtif1U2Utuy9+heln/rYq6qjZ9TNDFECnbh8eIrrIPRgP73ArQ9elxTfCcJe5zBv97gT6nxn6lB+rIqeqv3Ca7PPBcF4P/o4KxAvS3szQMefH8lIaMFaBNrTXb6306IKcsDXnkhPAqFDzputtk3kaevUNf1a6j5m3kXwM78WdkJ9RcO3E4frFC9Ew2+A7pjxKvkfnZOBKmPoEaattTgn+bMyp4pTvKz8/CBhwnmARcRncPvDtN71T8l+MsOMbgGPG3ZBvUvFkdNWC57HLaJ/cdy/yGxzawHTQZq/nw3a6zHirmwra37OdvVVx9hOoTV0/Lb2u7i/KUn622JlncoCLoqNgA6uNfl4gNqHnahOscSzimeRfx4+unKqbJMuF4vvo1OvyOjyRiu08Sz2VjFqq/p97+P0l01Pb/xHGDwmMD+lbIa6qxQcVcQmsEyp96KAAf8hMQHscG4wl1Bbf6OsJt75Q9ZP+urD1US+JqnY63ratPfme2+/J9mh/0fbCsfRqZ19oegxj8Vfva6x+KI4eO85WVjVqfUXT290hnv6Cj1r96tRmKZ2UDuT5lbSCW75cN3E90fPGVBdLPzR4lfAPo53MD+hnSm9CxpRSx8608Vne21eds7iOviNRHvgX6yCupj6i5dOjY2mblXJTO2dCeD0Wkg7iKHvtcIb3BmF8RvTH4KdCb9QJ6o2Tju/IE6fZL30K4lK9YETwX8V2Vr6viFGo+arqQdpt5o/CxFqM/SrzG5ac1T1Cfxn1EyG6va82Rl9ZONqYWblpbOfHIA6e4MQzhpGsX8qOE0OAd/c/lMqaGCeaUoJElU3BWJJ7c8kSE8RfhqRtst3zVCR/x1NO5Yp0Qy/s6oe9cNp9HM/jHckNU9Fw2Kg9v/gudy/YZkKqow6jThgQXgtQAjjypOhv82wJ1fqhLnW+kOvvuPcL/Ga4q6rDHdeoA4lAyPuDaeS+rT1i+X4P7AaLjG3TfQ4Nut7sWViEf4S+FQfd9NOgWvWuB71MoK2dFJ7Wc+U6dhwL1KXtfnLqfLdROqwDDjojZ6mGBM0u8wd3gfyRvy8R3rMmzGhvnil2nHuJGgk9G0uH9oMOfIh0ObbRSdmSzOlyUjq+vVNzm+0q/6hPCFQqWdrv7ats5tI21ehEbhPS3vUP7h5V2IRd1aLlcyKFlWDaGpki9OrSKJx9sWYcWI1a+HQHOhRVbObS8oznNav9UndsEd0dhZ+KI24NQB+Wo+U46VDz42VDiIT0lO3OOeEXhC+DM/sNLn3pWbXXQw59zxdoKy/frhMRBopNi1SBLOFEqohvXEV8+J/Y3yQFQF3miA4CTOIT/Z5MtnP+aHAAVjd5sxJ510bliKz2hflBUr1lGwwJnlnwXef45OYRpVmBn66GoZNrV6NnCgzLvplC7PkdFXk+Xp8yvN+pzc/PT61NLC2uzczx2Ga/8rshK9UUCPm1Eb0ZenoKOf5aGIe9hyqtBHq5484UCaRymmdUi8kf6kwKed1IVbcuYuOwSAF8wBe1D0Yv3Df6/BwJByqk/JeoTumi1Sv+zLWNblaWj+W+3Fl7vkhzJbbfghU8AGOzXQC6fubS9LmpnhdmOaoCGE+8qzi87pqECgrc12/MeKsCbCtghDt8ulAyHmnRfSHUpG0y5UPCTcuULaXbzX3ZNtMpg//StfL2m2cpH+J8F/2Ukx6l21vkm9RWnfQe2KXgZnQoIsx0w+H05T3jyoiLKVKmezCPiLHoRucEfzHlIvKNNBrSMVr9uRWBcw6510gHt47c022Vl8L+Xyypr52dMlMP5Yg/OWwDnxSVxvsSDcx5wXhrQ+3NcO72yO0qxPN5qwDKPGZAx/Pekwb/xgZBjQhZYJ6Pf6w5apDXqOtsoRTBL1S3UzvgxL+5LCtexkrhGRF6KNr07UG+kPx7gVdWD/QpF5xwhE4O/N8AXwlsfRt23siZD/EhaRBlOhdobP9pm9Dfz0ReT2/kEZ2PpkOuU/T0eXI7+P5/eVZ3+6EtmM1+e+w1qXNrr4dl46DYuYXnW/0G5IQl55FSl/5HvrL3PPdDCy3CIg/XY9yFNZXN9OFTss1u/zxIG762fnjx1/4m1l584dnrp1NrNp9eOnxL6u8e114/17s30/z0EyzeeWB4vzh6j/4/T//cLfjixTDCNCzhf6tY/roTnzfQPLB+KK17SI51LBJ0QrisFrpD9vkTAP13s9+UEZ3O7Xuz35fTOZ7+ZF5w/4UWVHPM2+LtpPpTGJ1mcHnedNs3qYrTvTUS7QvSc036p0R8X/BjfoyKvl3ju1MJ0o7Hw5FLwWn2mvrRaD/UxfMd98j4B/0wBb7I+nkbW8oLY+0CuWRqGvHsprwZ5xqOK56axG4uF5I/0JwU8x0uKtqXCdeMmcVk8F22v9e20fb28/8WnM4vedFX2Niurb6ZPLyvgt6nbrIzvtPPy/skQdZWTkqHVt6wMUddYhmn6cv9kiH2Uk5Kh1TeT4ZtKyBB1jWPYaJv49pZBkW+F8nAd6pZmC45TNxkulpChioNXXaec7hK4eB7ybYIfq+f9rp1/bL8s8boWlr+fcJ3ogos3S2P5IifaENfthCu0f+F0F1yvIFyhkzIPdcF1knCFPi72cBdcpwhX6IagR7rgepBwhW5ne7QLrocIl+82uOzvsS64HiZcWJ5ve3u8C65HCBeWf5xwPdEF16OES126r2Id6OOMi3fW19N+QKBR+sM6ar6QIsat5K78QpPdWwWvkyIPx23MQzpvFXQUrrsj4nowIq77IuK6PyKuExFxnYqI63REXA9FxPVwRFyPRMT1aERcj0XE9XhEXPdExGVxZBUHvZfolI2DYvkicVBlQ/e61prBmbj5jUsPnHzwvjVHCf1Wo4H/H/fQnxTlXQAXlgnVRX1RwODNzvtu9uM9HQb/27Cnw27vGhHlI847ZtShLkuWx+MD5qHfavOO0M1pFUFHzUmsvpksPl3gA5FqbQF14mKqw3Giz+9Y17G8wSk6l/RI5xJBJ4TrYoHL4NWcIrS2oPaRJf74+MbagprjqXnJZtYWTG4XERyvLai5HuNy9P9F9K7b2oLx4jsAzGsLBv+3tLZwP9E8mv9f7yktTIfOLaTdp75QeG2Bb8BS+zvVrWa9rC2sL0zVV6bX1+qz08vLK/XVUB8re5PEEQGfdk/dglxbwDhYloYh7zTl1SAPP+bLawtp7MZCvYj8kf6kgOdxu+xH52PgsrUFtL3Wt9P29cFdW8A9CWXi4jhe8iUEKMPL4RnzjB9+x+1+ueB1XJSreH6NDr9jOornbrf+TUy2yqBe+W79e6zZykf4T8D+5wOBPRs8R2ddRd3IEvcT/GJTkfHQ4M/PeVL7n9XZiseafp6NRtHzWwZ/cc5D2nFR7382Wv26bXHQvtrDe2gxxsB7DzBmcB/lYQyA43o8p8c8jIkepzwVW7M8/HA2n0ltQh7qKCdlM/FSli+VsJnqSzI8J0T5qn1IV8Az5hmv/I71Dcvf4ynHdiTxnqdG4j69sa9YndnCOrGvq+L0RcYXpNWvOLqqW2ivBsYZOI6scD1YEteIyEvRpvcF6q1sguJV1YPjgqqfXSFkYvCnA3whvLpsqN/xACXDWPEAk9u1BGd+x5Dr1MEHPbgc/X8tvfPFA5QdvdvDp9HtZkeLnjFBf/Elk5pm0fP+Bv9d4C++DJ45Joe41l173jrkncyfE++vmlLxDkeyOwm0eQ50StSn6JiNe6iu3uQeKuQNcWL7vQVgfLHnN4I//clLNM6K03MI9ulNJ4qeaTT4pYBPbzDDnnod8+B8CHRx1aPrTuBU9bqX6sU83EM8GPzdUK9PQQCW7S/qUJbe0mzn7T5By3ne8ZhznycvRLdb2ez5AXjmPNYVllf2Z+tTPpmyrhj8WwK6os5yhPaUMg8Mc6+HhwcFD9l4NJbnr9z/wCOe5Sz+QDsfAeSm5Ca4W+DxJRNDVr2HJjUe+z+kfmr7K5a918MjlsU7rlbX7ls75VvvGyJkd3mIDTmd0p6LmltSe/AtqX2EPG5gX16nvDdDHtpeTmpMwfNURdfNTu9+6rlfPkkRXyNLx5qtfIR/J/Q7/hLsPcCHwolfQeSOFYqNGHy3+ZrRN1kqvz9EW+1rNPiYX1lH+srff6gkrzf2mdd7SvKq9jGgrX7SGB07vXbi9vtPrWH3YDYcPY/QO4bhba73eljdS3AcRuYrRnh84GN+bxb8qcQ8K16qrnvi+4o/Bl30Fzxd1Lnwdgq1zRhdy5fQ1EItoYTUsci1HGiaEAdfG2LwnwyYpoe71LvItVIYAuUQsPqYqlrmw5BuloYhL+JUfjWTAX8YEmVQaxavr5KP2gKsrmecJHiUlVpq4TAoDmF4V+4E6V/oQ7Whj4NmifUP7wGvChz3Nlv5CP+PAvqntjmr+2YNXm1lxnA5h4RRvlZW6R8eqcjSMORF1L81pX8oA9a/UH2VfNQ2YVwysPadJHiUlbrqyGgq+4cfararjtQybsXza7zyu9DS9kub7XRSfdzEltnYXipXLnu+Ln82Vx9lH3P5jfsPhiAeF/zwB47/Lwo7vBXko+z6da4d/glBF5eY7iK6TxDdrB/8JfUD9CcwHPividfHADeH3UN1/nMIu/wbspPKzeSrMf898P5PLvWX5zEQfTW+AsB31RrKH+uJusn21uB/H/j8fM6nsnkYPs/SMORF1NX1smOuGhNCY263MYHHVewfPP1RUymUuW/6oz5Sj/jYF/2/RfhNTU8fJt5PlOS9qA/7INSDr9sNtYfi43HApeCx/yL8XwiZME7sC9jGj3pw/g/A+Uslca56cH4t4M+o8Vfdq852F+FxTDZ+1HGqt1Ie8s7j7hNAn2HXiL46/uUEXRfgl8fsbvyyzbW8ffDNhqH8ecR1jjcplkxVW14l6lO0LR8M1J9x4fjK+qr60BNCXiP7Nc5aSZx7czw47ilf6YFmi/Y+oq1sCNortk0PCr7QF1DzG14GNN7OAf4/S+HHvs8BGmt1NR6iHHk8jPHRYZyD8hwA4Y832/NC3wpR4bGi4w1eMfrJAt9iMZrd4hWvbbbDW73RxqPOLEE+wl8hdCYkX7XtI6T7OC/la0OxrXDedaZ8s5WH1yxkaRjyUutryH9T8nm4B/mwvqr5vtJXPi4YS1/fQ/qqbJBqS+4/Rfspy2mXB559IINfAF32+VXIQ+ioQNH4ghrjnnCaNvZNlAl/ANTgXzBI9rzeaKj+gXLl/hGSYZbK+ogct1HHSVX/eJzyVKy2qN0N9R0rix+BDX2wtWx/ZR7VfFnZeoN/WcDWq7E3ZOu79Wk+AoC2w8pu3Vxd6zLKoIitD813erH1PBdWW4G72e5XBPTPF39BXu8O1K3b2gjbxqJrI1vZ9v1cG/H5pSwrlAniUrZBxU3Y3+rF3+Rv6XbzNzk2afDHS/qbIT3c1v7mJvRw0PxNZYMwTrgQsEHs8yn9C/ln3WxQKP78iIcOwmVJHQPN0tH8t95jCq3pJP5O6WyF6Jk88B3SHxVyjMhPI9SuKgaQ9nNO9ZnMTKn1uPuanbLx2R224baWlqVXAB4+iqQ+NZf1p3dRrEn5gVjWaLAf+D6Inb2HcKrjamqvhlqfx+OElxeYO4baPOSvPAp0FDyOTQj/ocD8UNnKUOyp21oMfz5Prc8zbbXfQI2lBv/xgZofTjW2es2fx6zQ3BF1kK8iUmMR9gvuA8rnwv4a+vSi0XyoC82hAjyq4+Jq7OVPz6GuGI+JdWWqbGw4VF8ln6JzFPVpWb4WTF01GfLB1TW7ylcyvJmuvC1vDI7pfw76OK/rhb4PniWOKxn8L5aMA4T0sOhcR/lhjwbKKT8MaR3Nf7t/2K7YZ+/MBux2/rGd7e+vghzts3fKL2nnt7ekYhUVkhPas4h9tvDnRI3+oH3jO+1epcY6+oyov+gz+q4cxZgY2zv0AX+D/DVlA9DOXQv5CP/b4AN+yYPTud7WD35rbzve2DG0UHyD9xNgOV67UPsJ2Efx7Z1YgnyE/12wDaG9ScZX2rWt9S2P3XN8PnR1ptI/1AWOh6v5QGjPhcH/ZzEfKLJ+cLok7+qzttzPue/8BvmOSPPBAjQ3u36QJVtb5nnjf++j37CzftAJv9n1A9SXousHn81tt9r3WeT6dDVfCo1ZqN/nQT7CD+XHPAf5fIfJKbH+TW31Goa1b5HzHaHYsbr2MtO/j+X6l1KO8wv1DZ/W2hCvrcI0DPkIf06uk6NQD/vt6crD+aXG+vTS+tLs0urqzMoSX0OVJWuz7Bhdpg8TB1oyMznFllmWDH8tDf6NfYl4vroq6mT0TZf42LL6dU7PWYzWKOGKXLdGqG7IP5/VGCZ+7NmHa7gkrhFP3tE49d5o02qg3kzfB6/6gL3fFcCP8GbXUYd3kSx2p5HFVKjddgFNo7+Za3bs/4sJjq/dRXnXPLgc/X8xvas6fc0O26Vx11lvK5PYpkwVtQNGf9Ql7Q8bdqBG/Pj6Lh6Xvu/+pdX85gY2edx0KE5Ex9XmptsYFukdqwPfAGGunhpCmc+KwKFEYDgnXDsPWFaZkqqHrnMtdWXz0Q2XPVcDvPhwVAjHeADHTtfZ6Toi7XSdYl0ntjc+tbAwtzi1XJ+ZX11ZX52Z7uaNx6a/sjy3PLO2vDLXmJmbnqmvlpkNsLeBs+6qkF+N4O+EWTevQA0FcGaJb2ow+FcFZvLKK1L1LGIGkJ8J16lXPIPolz7NLy0sL64szizNzNVX6vNzm2lPVW+UvX2gzODNs9zlwrOpGsGvQFvxroldUMZwvabZiZN5xvZBj50vezb4u4CHX4ZoOsuBh0T0piMOQSsVouecHhKN/qhLOkQ3uD2MH5YPr4QlmuEsVwg/8rNbyMfaco/IM1wWCUJbg/C7oY4Ij89WHt89mOvWJOHMkt2+UBF5VfHO5Jvxfj+5btg2Fc+v4eV3PINH2bANQ/uJK4ePeuwHyhPLmv3gvvjuAy2cT+TPyr/g9mObHPITkJ7PXvF4ZfBvA1vBlxPyeIX1ZB6R3rCgmyW2Vwb/dorEJer38nJ6o6XGu4rT8nCuWBRKjY/jgo7Ja8yFIy0hOxGKeFmf2+WBN3w1gn9fYCzbA2Wqgi/2ZQz+AwFfZkTUS/Vrez8q4EdEvSZcp/2zsmpVwmSf+AaMFbUqgTKsNbvLZ3cP8jEdmCR4lJWyobuJTrepJa/iqiga2lz03yYEfa6n6g+7RD1D/UHVj3X30yV9O/yQx24PD0V9O4P/aeDhCwHfDseyv38gzCvbG5z7IPw/hrHsH1D7sM3JkrKDVcrDtjQZoR3cJfCq/sw6ofoKwrOvbbq/ywOP/hTC/2JAJ0ahjPIv2Wcw+H8asJFjrrNeOI9hOewV8GOuUw4TrtMG7HWaNtYH5cwf6DH4XxP1UXYXVxSyNAx5Ee2uvO0P5cp2NyTDLLHMxwU8ytLqN0nwKH/Vd8YoD+nuIR66zW3YJit/A22HCq+iDIzPEVHfeG23UvhD3EZ/1HXqfIq5ZFEdMfmMp5FPPaSD40I+xs++JPzUNz7SOCloG6/5Rqk2u4Lw4yBDhMdnK4/v/oT0dQLKGf5JyssSz2MxryreDW0RrkmBC+VmbZr14/9AsuCbc9Wv4eV3zCO2p+l8yEZslg7iMv9G9afs72j+f72nNL3x0Y19oh5GG/UqXt+ZnS9q64z+qEvalxshHUb58Fx3UvA66Tp1+O80W3Dd9BvpKFwfGVBc74qI6wci4vpgRFwx5fXeiLjeHxHX90XE9UREXDHr+IGIuGLy9Y6IuGL2x5jt+M6IuGL2oQ9HxBWzHWPq6sci4oqpXx+KiOvjEXHF1PtBtTkx6/iJiLi+IyKuH4qIK6a8YvomMfVrUP3CmHo/qL7c2yPiel9EXE8HX25Q9T6mb7IzppXDNai+3KDawpi+XExbGLMdY8prUP2vZkRcg+p/vTsirph9O2YfiimvmONQzD40qLKPab9ixuUGNTYUU79i+r4x9etsHzuyZ16zijF2qLVe3KM4IviIud5r+A8kwm+y2h+QFdLntV/LV7+Gi/OM1ijhily3RqhuoTViXA9HGfhw7S+Ja0TkpWjTyUC9kf54gFdVj/GIMqlFxMV729SeDbWuavAHBLzSkwlB28pa2x6EvIhtOxVqW7QRRn8zp7dNbq8iOPuA9pDr7Bv7Pbgc/f8qelcFfJgmXKeu7fHwaXT5HesKlje4EVHuaP5b7y1NGS3TOdtPs1vwEbKraceYuemidtvo98tuh+xXlnhfRBH7laXvbLbgerE5WfrBiLg+GBHXuyLiekdEXB+JiCtmHd8ZEdcTEXHF1Im3R8QVUye+PyKup4NOvD8irg9ExDWofTum7GPK690RccWs4/si4orZjjH1/vsi4oqp9++JiCumTnwiIq6YOrHjf50dNjrmWPs9EXE9HWzhD0XEFdPmfG9EXB+NiCtmH4opr5hj2qD6hYM6pg3q3Cqm7GP2oZjyimmjd8aOs2PsiDm3imkLPxQR105MYev6UEzZx6zjxyPi+mBEXIMq+/dGxDWo8cKYfs6Ondg6f2LHTmyd7AfVTpj/xWfDDX+WEu83masQPasHvkP6o8RrZH6C+34mhVxNdgcEr5OUlyW+N0LtGzkg6DzdcRk+ky3vh8jSW3LYEYHnaP5b7ylNz1p7H3TtfCHdc+B97P07SM/kie+Q/ijxmqqvnEP8sHy4r5wreJ0UebxvENuzPzKfXt6szBPtuQzKXPWpMjLP0nc1W3CcVxXvhgK43h4R13sj4npfRFzviojrnRFxPRER10ci4vpARFwx6/iOiLhi1vEHIuL6YERcH42IK6Z+xeyPMfUrpi2Mydf7I+KKqfdPB514T0RcMfXrwxFxxaxjTNm/OyKumHr/oYi4duzE2WEnYtbx4xFxxfQnBlX2n4iIa6cPlcP1PRFx7fShrZN9zLl7zDkyx78xplLJf0eoXMVFjecUvlfW6I8Sr5H5aYTkeo6Qq8nuPMHrJOVliWPD5wk65wk6O7ji4TJ81k4qlm6wE66zfTGevBmesPx5hOt8gQu/U3Vr08/X+YTrgi64biRcWP4CwvWMLrhuJ1xY/hlU7kIPHbxz/Rnw/kJBW+E3HCOuk+ej+W+9t7Rxp8CF8XHPmC3Bb+Xgt1Pmz23VM/u7KIdBueE3M4YgH+E/fG4L53PyZ/6OonOdY8AQvI9nc6fqRccAoz9KvKYaA4aIH5YPjwFVwesk5WXpbc0WHOdVxbsQrvdGxPXhiLjeERHXByLi+lhEXO+KiOtDA8rXOyPieiIirrcPKF8fiYgrpt7H5Cum7N8XEVfMdowp+3dHxBWzjp+IiOs7IuL6oYi4Ysrr/RFxDWrfjjl2mD+hvmdq3+lR3+wbI3rqe6JZSvyt6Ibh35MG/8ZdU92+GWn0Q9/N5l/DxXlGq1/ftVZ1U9+1niR4loEP1+6SuBJ/P3ujTUPfvEP64wFeVT34+6HDgk5FyMTe7wnwhfATgraVNRni91sjynAqJEP1HczN3NNlcruU4G5ttuTAOrjbg8vR/5fSuyrgw8RzbrSR6tvMRhe/SXox5PMdXxcDrap4x/0Fy1/swaViDVk61mzlI/wn8viC+n7oJYK/kO4eEvCXAIzxo2RjZccF7TI2FPmaFDxU+0RnuE909vSJzkif6OzqEx2274ci0jkEMDWic2lEOpcCzF6iczgincMAw77fEchDe2N8XCb4sPHpcngfe4xHesYvy8DojxKvkfnZ8LUuJ35YPjy2XCF4nRR5PN5dIehcIegoXEeIhyNQrk/tN7XZ9juShp9g+x0Rci3bfnxf5xVJ6jG1cTbkSteZLO8qoM268EzIw77CqUr/Y52y8eqL8C16hmN+UMeMtwnX2d4Ix+0SaqtJUd7gRlynTCK2xzzL1Yn6Pwve/XCzxQcnJXPjO5P5l0vIHOX6LMrDdr+a8lBvr6G8KyHv2vx5wvl1rkJ5Vkd+x+2I5a8K0LmsRzqXCTrjolyvY2+oPx6JSAfldhnRuSwiHZTbFUTnioh0UBevJDoXQTlcv/0qrd9aOZxTYVlbU68R/HsvaeH86xyn2ZJnAV8Rbcmi1e1q15ks7xqgzTp7LeSxnl0Heawb10MeypyTsk8mi8w+fb2EfcJxiO2M6hMjrlP3tsJfMfr98lcuI358Y6Cy31ZW9SfbWzEh5Ip18vGgfN7N2qG0PlPxtjX6/ZpLXFFQrsqvu4Jkjnm2J2fC+XUixENonqFsv9lOu0f+rly5Mtt5wXntMHa2+voLWjAXEoztGTt8Xgvm4vPaZYE28s3N9rxrIO+llHetyMvw/6vzW/VCm5jFgEwuI1CWxw2Df07Op+n0s10LbzwdmtvwO28Anrg/1RPRLtqfjP644Mf4HhV5wz3wur6yUJ+uz82trs3NLM/OrFcIv/HK7zgO2hDw6m5/k/WUSyLrKRtLq80W/gbINUvDkFenvBrkGY/ZWP2CQ+38NxLxX0T+SH9SwN8OdSjTlilxoT2IgWv3JnEdcO39CW1OWhs0ta5skCXV58+jPNS58ykP+9MFlDcNebh2xEn5qyaLrA8cPNzCy3BcD/SRrU5p7ex0g+XkBF8op2cK/kOyqIMs/uRwCy/DMU3UpynKQz20dkprY6anWBZO8Iw6w3o4A3msh7OQx3o4B3ll9dBkUVYPUdewTohzGN49G3Dc0Xzqt0bwrwc/67XkZ+G80WhncH9IcFOC7xHB51asERj9UZdyrG759dPED8uH/foZweukyONvkc0IOjOCjsLFNixNG03PjAu+HNUf+9gRysM+hu3GSfUxq1PZeDX2MeNtQvCAcNzGoXZX47/BWXtgvSO2x8a8Yd51JstbgHdl49XGd9l4Ncp1gfJQNxcpD3X6OZSHevXc/HnChfUK86yO/I7bEcvPBehM90hnWtAZF+Uqnl+jw++YjpJNyM5vlg7KbZroTEekg3KbITozEemgLs4SHfThMF79fee1ymA5jFdjWY47GPyFEE/5fopBYD/YKluidHYR8ljPngN5rBvPhTyUOSdln0wWZePV6LtinZD3on6Xwf8QtVMiP6l+gOqlZLrjv6X333BuxLanrP9m+jho/hvH+7fCf8O+GvLfEI7buIj/huV3/LdW3o7/puns+G+bozMI/hvGXtF/+1IB/03Fn9l/2w3+22+TX5AobrYt/TeMm319k3N6tk/dYlwVou3z817ZfOqX42tfgfjaH53n5+s6oH33+e1wO/7Z9oqvWVvuxNc6+cH+FvLPEI7buIh/huV3/LNW3o5/puns+GebozPI8bXzaF/PZuNr/+P8Fs5n5M878bX2hLLoZ3yN/S6Dfya101bG154t6p9271Bx/83ojxKvkflpcHsaPywf9t+mBa/K9nB8TfmJ04KOwsXxtUHZu8DxNeyf2G6cus2lyvhvao/HhOCB2+PZxI+v3SdFed7ThPWO2B6z7Ns4UX/0Bcr6b8Z3Wf8N5cp2HnVznvLK+n0TLqxXmGd15Hfcjlh+JkCn0SOdhqCT2g95NtF5dkQ6KLcG0WlEpKPi2P32R6+Dcui/vZb8NyuH/huWZf/N4P8T+G9vIL8A7cxW2RKls/OQx3qGPhLrhvL7itonk0VZ/w3n2myfusW4rB3Q74zYDivGx/NcZ7K85wPt8+CZk5KZ8Z3J7MeOtPAyHNPE/v18ykOdfAHlYX/9JsrD9j5KeWjvX0h5aNO+mfJwfnMj5aH+3kR5qL83Ux7q7y2Uh/p7K+XhvOVF+bPpz/MgL6L+rLKOYLK8FwBt7qvfBHk3UN5RyMN25aT0zuqb6d3I5S28DMe8Yj8zvrO7J2zv611rp1689sirlu47trp06tj9x+9Ye8uDaydPDRNaHur4KErDwy7icQF2szREec+lfDvCM+R0GhfljIapDXb9rZh+Gf1Rl9IMtqZfzyd+WD48/XqB4HVS5PF2yBcIOi8QdBQu05UJgfsg0Sl77OKg4HnQTMhBykMTgvrBqZuZ2Ow2WONtQvDA7f5c4senX2obrMFZe2C947XHTJ3NrxP1fyG8KzvNM77LTvNQrjxEo27yEI02jIdo1CsboidcWK8wz+rI77gdsfw3Beg8r0c6zxN0xkW5iufX6PA7pqNkExpPNksH5fY8ovO8iHRQbuxuPj8iHdRFdl1907x/QtM88y2KTvMM/jdhmvd5ml6kCWuWsyVKZ78Z8ljPboQ81o2bIA9lzqnbMbjNTvPYPuGR7Aea7Xl4bcX1VA6vrcDp4b+iLRB4jJ2vrcHj73ydBF7XcS3g/2p+Tp516EugQ39Aeok+7maPEd8g6qvCpxyCThOmGCz9tbybIa9sWBtDGK8qMC1S7axC1Wh/bm2283ud4BftGoej/hh07C88S5RIG/WOdUwtc+OUnXVMLXMnXsqcU6FzSypcwKEwDBfw9BrDBRwKw3ABhzZx3EWZcOq2zFlUx/7CE8o0GmV0bBrwvpZ0zHj7K9Cx4Qvaac93oc06tiDgsb1M7hOuU4+s7IgoF1HHFsYFr5aUrnCYsqyuKL+c9RbHZZQJJ6VjJqcyOsbtrGwJjkmsY2rrPG6jYB0bgW2r5xfQMaRdVsdsnN3Rsfa8fuvY+QV0DH0i1jF1vBa3UrOOXQw6dk0BHQv5Yzt2rJU3yDp2TSI7xsctba7gu+bpVI63RvC35vyZLuAcJp4utK55uk7Iymhfn4h2heg5p+PXPJ9DfozvUZGX4pqn64lXfsf2QPn5oWue0szB9DVP6OdmaRjyrqe8GuTh/IeveUp0HdlUEfkj/UkBz1czFW1LhetUJFxoD2Lg2r1JXHbNE84B+ApejLGcQ3SuEXSuCfCM5TmeguUqnl+jw++YjuJZxZMwVvgyGhtMDhgrxLJsww3+NXBN4R05zgnXac+RR7bFVYLPko1Fql34SMP1XXDx52Ox/PWE69ldcPHnY1W/NFw3dMH1CsIV2vZX74LrJOHC8ry21OiC6xThUlfMDdqWTu5f6hiR2orB4y5uxeAYCfqqvAUBYyt8ZSP6mb1ccfX9Bfw+FQ/mK8QG5RhV2avW8KhUmavWlB/L+oVtP0jbY5Vuox6ybqMesm6jHrJu43yHdVutU6v5Tlndxm28ZXRbxV55XMFjDmjv+BoRg/8emB9/1wXt9K4GGhgzHH1GO9z1gu+0PmPx/TFGX80hUuyPUeOo8slMdmqbutrCzsdL1Rir4vwKF9vFRFtYp1lvManx6gjlqfGqaB/DecwXN7lVnrebh3yesn49lje4p+vxBJQrx6NQN/l4QuhYftHjCewHlz02gOVDxxN6vb7nBkFH+R0Vz6/R4Xeh4wm+2EwMOig3HndviEhHzQdYf2LQUVerqvgbzkU/R3PRzR5PuBnmor9IscVEPm/U4wmsZ+jLsW6gL4cy59TNj/56j8en2O4X9bsM/tepndKMwfp4Kcs05L8l4quw/8ZX/af235RfFfLf6oLX0BWtFddpe4rsO0ZcfJxxUPy3yyhvx3/b8d92/LfO8jv+W3E6g+y/fSOS/zYF/tvfkl+QJn6yPf23GPuO2T5hjAv3D1uMi8cHn5/H14gY/MQzWjjHn+Hn62qg/X6CC13/MWj+WerrP5R/Frr+o6h/xvG1Xvwza8vtFF/rZZ90Gf8M+xuPt8gDwnEbh9p9UpTfuf6jlddv/6xf139sR/+sX9d/nO3+Gfq16J+9kMZw5Z9hWZ9/din4ZzflOLdTfC10/ccgxNfU/JHtflG/y+DvoHbayvjajv+W3n+LGV/jeE4i/62u7KSj+uMeDo6vYZ375b9hX+X97iomxv3Y+PG1u4ovsP+W5srDcv50lsr6b/gJ1S/3GNNU/pvv2nm0q0qvbKxQ1yiz/1b2GmX1uUdF54Ye6dwg6IyLcr36IUo2O/5bdzpqLyXPCbOE/tt3kf9m5Xx7ddl/M/i94L+9nfyCNOtJ5efmrLNqbq78PtYNdeatqH0yWZT139ScvmiMy9oB/c6I7bBkfDzHdSbLw31+uN+ak5KZ8V32+jbUOz73jn2fz71jf+Vz7+rOHWXvz6Zr3wZNfzgWjvtEuR/juThsV07d9K7M9W2o38b3Jq5v46Wkbte5Gbu9XN92DeUXvb5NHTkxtcHtv1sx/TL6o66zeVJMv55D/LB8ePr1XMGrunqIj6aUvcYLcXE4EXHz9W3qOM11AToHBc+DZkL4+jY0Ib0MT5v9ygp/nSN0JKnsUTEsb3CDdJ1elspO8/DKvDLTPJQrD9+omzx8ow07SnnqSrgJF9YrzLM68rvQUbznBegs9khnUdAZF+Uqnl+jw+9C15316wgjfz1nMSIdlBt/iec5EemgLrJb65vmfcWz1F50mmfw/xOW2v+UphdoZ7bKliidxWsCWc+OQh7rxgshD2XOSdknk0Uv0zy2T1cAPF/fhterXUvl8Ho1nB5+lbZAXARwVxCOyyHvKsq7EvKeBfifc/FTz6xD3wAdGrmwVTb763atF18PEAp1Y33V9kQrm3gb0EDpr+V9M+ShTDh12yJU9LoQbufriQbbHzuirfrF9YD3K3RFoE3B90E46mKira71Qn5Yx9QyN07ZWcfUVy4G7Xgsh8JSH00ue3M6LnMW1TFuZ3UUvaiONQDvd5GOGW9HQMduINqzXWiXvSLQ9PPpcEUg6xiOvaxj/b4i8IaStoR17HrBL26jYB2bAR375gI6ppb7iurY2XYNJYcJt4uOfXMBHdvMNZS2lZp17FbQsW/d0bGnhY59ayId+1yJa3qUD7gH3hW5CgztKfth6spfkwte42U82jVSw5AXMT48n9XtdYdafLAMas3i9VXyKToXUsvS11Geug68QvJCOkX9Krzem6+Jsnml76o/u4aoRvB/J9dlsxs4343Xfq2r/rCu1q9GhNxi0q4QPef0WocvjoZ8q3WQFFf9FY1Th/RqQsCnjTfpq/4wppKlYci7hvKwH2MciK/6S3Ql5VQR+SP9SQHPV/2VXXPAvJORcKE9iIFr9yZx2VV/aNfM5tjYg/G4SaJzlaBzVYBnLM+xNyxX8fwaHX7HdBTPKvaIceV3kB9hcsC4MpZlG27wzUtaON+d45xwnfYceWRbXCX4LNlYpNqFj79c0wUXX/WH5dm3ubYLLr7qT/VLw3VdF1x81Z/6XIfylxAOYdQVhpiv8FeI5+u78MxXCiqaabePTa2ZbqOfZUltBeK+p46jqa1APCbjViCO1aPvz9ev4VagstehmQyzcehFV7TwMpwjmtj3OF4+KFu2y171h9uyy1z1h3rI2yvVFtwR16knEeXUYFk4wTPqGuuvimErXWP9xXk56y/GkVl/cU5dVn9NhmX1V21Z5nEYj72g3bJrZZS9P0K41Dik4r2TojzPW5HOZT3SuUzQ4fnTFyH+86v5M4/7KMszc7eL2uFCc6I0fm7x/V9Gf9R1yjfF/q9u82Pe/6WujFZ7d/j4dNl9WYjL2lL5DKzbqj7XBugcEfVJO2ebWuf+jkmN10coD8cT1A9O3db6y+z/Qpkbb8oGsD9Y1gZgeT42PwhXLGep7P4vvLr4y5vcX+G7ggTHPzWOFDkCpNaCeb6h1ifV53fUcftGgM51PdK5TtBRvkbF82t0+B3TUbIJjSebpaOuH+E2j0FH2Vdll3qlEzpOhPEAnKd/nebpVg7n6ViW938Z/Jthnv43FHdN5OeWvq6ddRZ9WdYztTalfNmyRwfQX/36JscErBPy3s1frRH8WO6rpR2D9TFtlmnIT0zEV2E/kT+Fk9pPVP5byE8MrdeoK64rrtP2VMW7kH3hT5igfvLcpKyfeJmgM2h+Ih8H3/ETd/zEHT+xs/yOn1icziD7iUcvapXBcmX9xNeBn3gj+R9p4kHb0080WZT1E3Edi+0TxuwMDmN2PD74/Em+9sfgX3lRC+cdF/n5ugJo/w7BXSvqN6h+YKL4ZdAPVH5TWT8w5udMrC23UxyP1zcd1R8T1qmsf4b9jf0z5AHhuI2L+MtYnv3lp5t/pubJ/fLP2M8u6zdh+bPNP+P1wGsj0lH7Ds5W/8x3jvN7CvhnoXOcBn8r+GfvIP9sO8TxWM8GLY6n5o9s94v6XQb/4QGK4+34b5v3364XvIau5FM6UhXvQtf7cTwnkf+2Oi74clR/rBfH11TssWhf3az/pq6xVv4bx2XK+m8qVjdIe6myVNZ/w71Um/Xf2M6jbvI5VdRp9vtC11j79ArzrI78LuSH3BCgc12PdLbCDznb/Lfric71EekoW81zwiyh//br5L9ZOd9+afbfDH4G/Lf/k/yCNOtW5fdlss7G2PeKMuek7JPJoqz/hnNttk/dYlzWDuh3RmyHed5P6QT/eEax7H1WxnfZ6xZR7/hTBtj3+Z4K7K98TwW299PlCsdB0x+OheMZV+7HeMaVzwZg6qZ3m71u0fje60pft8hLSTz0Xedhd9CuW8Rt1lsx/TL6/bpucZ74Yfnw9GtB8Dop8vio0YKgsyDoKFwcTkTcfN1i2eNhBwXPg2ZC+LpFNCG9DE9f3OSSmfGmjl9xu5c9Yojl+brFQbj+Mktlp3l4xeVmr1vk4Rt1k4dvtGE8fKNe2fA94cJ6hXlWR35X5NpARWeuRzpzgs64KFfx/Bodfhe6nrBf1y3yFxHmItJBufFXteYj0kFdZLfWN827+uJWGfQtik7zDP4ITPOuy3GaLUE7s1W2ROls6FpPvI2bdQOvwEOZc1L2yWTRyzSP7dNFAM/XLV4O5Z5F5fA6RJwe2nWIygfIm3kj7xLIy28N2NAN4+sVpA+HoExEfdgI6eLxXZNl4pDDapE+i/TVVNT4Vtt6e7n2YmpteWVuaWl9emW9vrK0vsZ93Xjld3zthfIvDgj4xNunlqy/4LUXfLXFMORdTXk1yMNtTXztRZr5wPRSEfkj/UkBf2uzBVemLVWIv8hVBQqXXS+BR6+tbyvbxH0xjR0oPv8z+qPEa2R+NuZ/h1ynXC8SclXzACurfHe0wZiHdELzMsRl40XaNppaULbaUf3VMWblr2O7cVJjsNWp7LwM5cxHoZEHbo+LiB9fu0+K8gaX9sqoqUWWuRP1R/tfdl5mfJedl6Fc2UdD3eTw3hHI4zA96vv1+bO6wgVps65WxTtuRyz/rACdQz3SOSTohHyhIvZR0VGyCdn5zdJBufF4cigiHZTbEaJzJCId1EW+2sI3L/tOmpdZuaLzMoPfB/Oy7+nLvKycLVE6i34j6xmG6lk3cAkGZc4p1byM7dOO77N53+eI4FX1J7xSh/ttVbwL9U3eOn4kiUzK+z689agX38fqVNb3QX0N+T48lpX1fbA8+z6J7FWp9shSWd8HbctmfR+OG6Bust1Rx1WVveIrjlG+7PuUnVNg+asCdI70SCc0tqa6crBfvs8RonMkIh2UG9uXyyLSQV3kT7VcAuXQ9/kC+T5WDn0fLMu+j8F/4+IWzi/2JQZZ3razzirbrvwi1g30i1DmnLrNh7/e43yYea8J2Ispz2B/C9rrrykGjf0iZ3Ej72LIO0x5ai494Tp1AHEgDdQ59GGONdvrYPBfzhFlsvz8pRrnkAen6bGKb1o9RvLfYciLp78rDXX192HgsdZsr9MRyKsKeI4hXybg0RaZjJT9YF/vEoHrUnhnMVIlz8P5u62QJ/JYRJ4IX1aeJiMlz8sJ12GBC2UckqfxuBXyRB6LyBPhy8rzcP6s5Hkl4bpU4ML+zjH8w/n7XQKebRLCfxVszqcuaedPxSUt72KBG21vhXBgPUZFPcYpD8tmeOfPbeffxum/Abs/dkk7bRULQxly+6m1C4xb8fol+sN89GQQYq3KRygaHzlCeRgfYZ8Pt6iiTDh1i+0W/awHt/MVRCNkezAPy6LvyHGwSYiDHSLaV3ehXWQd9GrBj5rv8D6rNOvRU0sqZm9J6RHH4FCPWMdQjzgGh3rE+qeuqC6qY7g9vqiOcTuruSXqHeuY73qK7yQdM94uBx1rEG11BEvNaw0+dFRP6Zi6EqYf6/AZzkHYf2N5+AlKlAknpWO4F6CojjUK2JKiOnY14L2adMz61Rzo2E1Euy5oh/ZzqGP6eOSAdQz7tpVNfBS79NXhfJQHjztwLAyPO/AaofqkodoPijLhpHQMj2kX1TFuZ/W5paI69mzAa0e8+Mj9baBjrybaU11os46pz3Vhe3EsGfXIyo6IchF1bHpc8GpJ6Qofs4pxzXyRz5UW1TGTUxkde3VJW8I6drXgF6+BYB17A+jYPQV0TB1XLqpjHH/e7jrGawHbRcfuKaBj6BOxjl0l+MWr4FjH7gcde2JHx54WOvZEIh37eolPPan54R54x7ql5gY4/w/5+vy5N4zJGY9pY3L1ORWTQxnUmsXrq+RTdC6kjtVfTXlqLl4heSGdon6VlcVPjZk9srjg+8Ae/TDp6TMF7cvh3VABXjE+zmsdVwpeR0S5QV0LO0J56npnFbvgNUeMXaBMOCl7ZHIqY4+4na8kGthWWWIdu0jwm+H9ah5LHSW62W9PZwVWV9caM435xYW1mZnVxVm+YilLpotjCejPzC7NryzNNxqLM421mUZX+llbTBxol+cwlMF2HBfvDK/1hRqVPbrJerBYK0TPOb0vy+iPEq+R+dnYl1Ujflg+vC9rl+B1UuRZG0w4f5tUKA95GBY8TIrywwVwqfrszf+ydPLU/SfWblx64OSD9605SqwrFfp/yEO/Isq7AC4sk6JfrczOLa882bnqa40z+tjvfj27urxQn59aWlxdmVudnl3pN/215ZnF+eXFldn6an2xsThdxq6Mu07dqnh+s1QN4J4UuN7SfOrXbBD2o5g2yPDvJv4i4d+I1dWEnIz2niR1W18val+N/qhLau837Ose4oflw2fmRtLIZ22/a+ke2qxdQjbMx27icTQRj2oOYzxZ3jDkGR8ZzK9f0c7jUCIe0/bR9VXlo+DeuH9L/qS1De5TQr0fgnyE/w8wF/md/HnCtY9LaKfGIH+3yLf/rb2GBCx/xno3yVDJFeFNJ3d56rqL6mrw/zGvX8bbbQc0TpQf8jXkwfnHgPOz1Ca4NyLU5w1+TMBjHzN+Jlxn3xyjcsj7iGtP+E61T4VgeQy2cQrL+f4fEXh8POwReHicZJxMU/l6PJeqCjrYp3DMHxH0I44Ps2qstKR87QrlYd3f2GzBcVLzWKtTVt9fuaSFl+GYH9XXYvpG9r4G75ku++O7CJY/JYA81iLwOCno7CK8uwP8VwjPsCg37nR/VL9F+a0IfkPz4c3SQVxvarbTwXbGMW3kUAsv2/GqKPt4s5WP8PsOtXDuzZ+7jWlsS7AO39ZsvWObzX4s98lbm+3wPHYxDI7jCH8wrweOXWwfEFf27lySp/IRlN/HPsIsyPMCkqfyASZcp2xYh0eIFvrHNr6wDA4DH5cc8tMyuY4H6pi9u+yQhkMeEI5xqLHTcKh+beUmBF/c99h27ArQUOOZolGjvF7bR43b6GsoH0bl43iOdPjdkIDv5n+MenArvLsEHmXn91BeReSxDcP6og1j30TNydA2qn7na7uQ7614L+JX7QrwruSHdih2LKe+UG/UV+Zn19cbq3NLyzPdYjn2fnezvV5nfuFdDeqVpT0IT3kjkDfcbKc/mv8/DHQQl/FRI/gXQVtnaReUsfKTgv4uot/Gt3iHusa4quKdwWdt+sKcxxQxuqnZxYWlxeV6Y2p9amp6Ya5MjM78dfZRNssLJ+XDbMgP6u6Ajzi0pxoVIYeqR/bOtWJbaWIgrdiWirUPibZKu7YyVcfYFsrovmanbBQfWVJ+Ivt8FVFfpZuTnvJZGg/QsRhLlrDvYzwsS2Y/0L4gPMYsEP5N4Ed9O/hAZ2AFvQzu/gBcxfN7Bod4N9xsf6fsDtpjgzfao81OHi1vDPJqRGdv/j/KC3EZHzWCv4/sMdpQKz8p6O8h+m18i3dsj8cE/JiAz9pnjcZYrHvsPn+GJuHHd8zb/TBWqPWU0DpBmvhqo7AtNfr9WidQ/mJonWB3GvnUQz6gmu9YW+4ReYZLxVhVzE/5+Thv4Hnhd+T6NUk4s2TxhYrIq4p3qLePBOaHZW0ejwlqXlah/1XcA/tbjeA/BHb9uz1zf+d0jNTOMbOcfDF2jlMY/DsgTvGpSzROX718ON8D9Xo3tUlN1CGD+4Cn/hUXlmnR+g95eP2BQJymJuqKvHIMFctkcB/xwGUJ42gfobobr1Wn91W8oqn5NBzq1/Dxu1B8lG1XmjXg+gzbG1Vvpp/9jUIdQrGJkE4h/lGCt/LDTscKrQ1Zp34K9P/HCvRrFV8I6XWRPviTol+rNka9/qlAzMLKdIsJ/zTVt5ttZP4N/udBhj8biAnv8vCFbTvmOsc753rvK6FxC2M6qp2tD1vfGgN6EftWnfsK6vKY4KdG8L9E7bmx1u86+xziMfi9gu441JXt8l6im8n4LwNjCOreLxOvo4Bb+Wa+Ov8W6N4XSPfU+pFa32XbExpLs/TyZjsvBv8vQA6fpTU/nF8aX2n3jDfkPQ7YD2rN9nqrNfXQnvpua+rcB7HfcDxU7ZFUtlb5eLh/he0KjvFs7xT/I6Is949dHnjDx/3j3wX8tr1Qhvs62kXG+bug91+mNsZ2PN5swf3pIU0b618V9WF74vPb9hKvBv+HgfqPifojX29ttuM0+D8SfY35xHqpscHe7xPw46JeE65TLlaWZY9wKHuFg+2P0Rt12v6fbrbzirh431iob+8VvIbaeq+gw239/wZ8mT0ePn38oU3g9ZCawIXjSuy4+dzMXGNhYWlhZW5lfXFmZbnfe2tXFufWF6enlxvTi6tri425Qdlbi32rX3Mctf5aoWcV69kVoIPlDS5tHKg1l9oDfIb8boNX/uqeADzH+Ri/b21y2CM7nksZ/GJ+wdGZNVW6ly1UxyyxL8p7dBmG2x5tgOLZ5z/uy/lU+xbVHhn0h9gPNPj9gLPIvsXQ2NTNxwrte+B9iyH/S+HmeU638aYi6mnxxizZuIU4rI+NE56j+f/1HhOPqcOuc4xDftjPupT0eIJkGpJZ9rdP0DUcKJMawV8KOvSXHr9tzHXqumoT3rPLenWi2Z5v8FdCf74c7qzEPp8lnNdde6mmjb7M3gCvY4JX7DNPNNvzDf5qkNdXD2lekR/kVc3RTGe3Yo6GdqtGPCn7oca1svZDzdFC+4TZ/ob24oTGGF+sjHXW4OehnUOxMmxnG5dC+7Yq9D/aOzWOdJtrPv9SjdcXU7i32V5fg/9x6INHPTjND8jSQ80WzMY+E9fZD1LErUxOKgaL/LCdeRHVS8WW1X4Cg1exX4xzmUw4XvMiYWPVvBb9WbV26iLKssi6baJ2XKwQPZMHvkP6/Vq3VXH40LptorWPBdwDg+t7uAcG20at13aLyd9JfQH7jLIbNzZb+Qj/BrAbryL7p+LuE073LcVLxXX2E+fCc6oq1R/zeB8hwneLySubznNT1p8smb1leWC7qfNeWfLZk+WA36/25obOK6lxXs2J1H5j9qkUbawPr2OpuRS2Pe9fNvhjYmxmnDVXzEYb/H0BmSrfJiRTFe9Uc6IJ1ynHvYSrm0ytXzKvRWVq8CcDMlWx05BMDf50QKZKRiGZqljrXlEvFffkOV83mdrd7cxrUZka/BMBmSp7G5KpwTe3UKZY53Eq51vnwvkrntdWdeZ4szp3yDhDa0mMw9eWyqZxW74z0JaqXqMF6zUWqV5jJetl8N+fqF5VT72qJes12qVe7Osb/IcK1EudE86Sb931o6LvqTk9xnWzNNxs5/do/r7eUyq/7qrsXmjdtZtvwPN27qOYF9qzo3Si6PkaK4s+rVqXZ1+t27lEX8z10wV1YCvX3kNxnW7ngXw+KsKrM/VF9r+UXXtXcaCi8ZDod87MTC+vN9YX55en1+vTC42+37mzVJ9am2ksL8821pYWF9f7fudOo9FYn5tZXphbmaqvr/b9zp+Z9fmlufX5+uzU6sza1OpSv+kvza8tzsxNT61Mry8uLdQX+k1/eXVupb443VhdWpqvz88tlFmXrbj2/pQlHJMtWf9T/l6Ru7mGArgqAVzd7MKNhEvtrS1ypitR/GimQvSsHo7qvXFG0Olx7GgcfhpF5TpEslPxarUPimM3ZdfAY66nq3hMt9iP2rMQ0hv2ZY/m/9d7S4X1xt71S2+6+WOsN+o+QHU32kubLTifDQndFZgal7J77A8p2YRik8pXLXJ3Zaq7aorqHJ8/TdQHgudPlVzVvqxhkjnaPdYTZRNVjGS74EI7p/ZfvbnZnqdsYmheFbrDjG1pmXmXGsORX553ucNP/aReY2S/Cmkl9iPm1PzNktpjwO2O82puWxWbUXtJ+c5TTFX6H2WR0f69K1p4Gc6S0pEK5e0S9VDnT3isqQi+Qvckhu5eUePEA812nnFMVL5KyAfu5o+oc4r92CeI9Kxezun+MOo62yvF2FA0ZqH6Abcnx57wuei5UoWrSNykKC6fH+tcpy4k8gUL33Ft9Eddp0xT6ILqcxUhV+WbhnxAuw9p6+4G2bxvlno+UPRuEDVGsW+GfRnvoPT1892CznbElXpvvM8/zhLu+1g43CqD5Xzn4fh77Ab/24dbOJ+bP4f8v1DsJqRnoTmcojMiyh3Nf+vl0gy/SHtncn3Z2g73G1iyvL2izhUBr3w1vGP5yyW+DY/j+17Kw74+Tnk4pvH5JfRHbZ+y0hGOFZXVERUfUnR290hH2bzUfZ7XRHZFpKPugVN7snulo/axpTyXjbrXbY/cmw63ymA535ohn/0w+F893MK5lD+nvSO+vqTOaDqqtzr/qewM6xnup2Hd2Ad5KHNOyj6ZLLJyXy9hn3Ac4LMoKjaJZUMxuETzmukiOoz0+xWDU7H3UAwudGequieiV3+qmw2v0HNZG14RdLZTzEfZQaw/JqxThuOLJfqbGjeLrPOxvvO70FjHfTNRDGRBjT1cf9xH88PNFh+clMyN77I+GMqVxy9s91HKU7Yx5NeF7qbdbP/F8rsDdKo90lFxvNQ+C/fHSkQ6WK7I2tFm6SAMr6enOmNd9JzCjx5ulcFyPh+M56sG/3OHWzh/PH9OHM8pZUuUzvL+eszjfaOYh74bypyTsk/4PYkyPhjGoNg+ob5g3Jvb6OcPP/Wb/f8rh1tlWIahsbxCPCC8iteqNQcrm/icz6IaTywpHWD94DPAmLeXeMY89N+5v6P/zmfPMCndMTllv0W/qcntHDrfmSVbU1F6h2cxf/RwO97Y3/Fh/VF7ugc1XqT0gO0x6gHr3QTk8Zx9EvJQJpy6xaeK6E+orxfVGfyWh833Q+fXQr6JukcmxGNo3223vddGq8y5LN9+d1/c4ncPP/Xbba+z8Z52r3N9Vu11brtTttle75AMnSvf53ktUd2tFPrWlfLJ8Xy6xeZxPdgRvhrwa8n2ktQI9s8Ot3D/l8PtPGD/uKPZnsd+uOH4kSNPPY9Qnj0fzf+v95Tml5RfFg//1GrIt00b+5lZqRA954rFflKffVbjrhofy8R+svTdzRacz24WXUv7QERcH4mI610RcT0REdd7IuJ6e0RcH46IK6a8YtYxFl9WPhZfMXX1QxFxxezbMXXi/RFx7divHfuVso4xZf+OiLhi6v1HI+KK2bcHtT/GtNGDOtbGbMd3RsT1dBiHng51jMlXTLs6iON29lwkVrYV+hVTXj8YEdd7I+KK6ZsM6pi20x+3ro6DOm4/HeZpMXXieyPiGlS9/2BEXIMa6/hYRFwpbXQlf6/OpmbJztbx+sYnjjz1m3avxszq1p27m1mtED3n9JqA0Q/F4Eed9seObpLX5cb69Fp9eXlmanl1dm5urqxuGLzavxG6WzXNvuiZZbV+iWvYWRqGvN2UV4M83K/8gkPt/KfZMzKzXET+SF/1Tb6XqWhbHnDtuob9Ua0r2jeB1J41W7PEdcXQfqHQGXXfGVqkx3050Z6vtaJ9eVDvV8j2i+Sq7O5aO/XyB5fvO7by4rVHTr7w+OrLl06cOrZ03wtXV0+snTyJtWFN4NqiNBQMwzG85dW61MJ2XRQ5bdZtt/uNhEvtXgz1IMR1O+FSp2us3B4PHYRRPR3zFX5uj263oPLNx0VuafThOkm4fDd7Zn9jXXCdIlzqqxhWzvcFCITBXRzqBlXfVzeQ5/EuPD/YbOcZ+RonXPu64HqIcGH5fYRroguuhwkXlucvkEx66CAM7gybFLQVfpbl/i48P9Js5xn52k+4DnTB9SjhwvIHCNfBLrgeI1xY/iCVO8dDB2EOwvtzBG2Fn2V5bheeX9Ns5xn5srJFRtNz4X3E0auwZ2z0+zWadpMrey3nCV4nRR5HTs8TdM4TdBSuWkRcuyPi2hMR10hEXGMRce2NiGs8Iq6JiLgmI+LaHxGX2UKetWfpaP5b7ylNz6id12wTUdZbMcMw+qOuU79T2ETla6B8eIZ/MA0/q6Hx+qCQj7XluSKP9RF3UCP8Qagj6yPqbY3e/f9HnvqdFDjZ5qoxB9+ZfDPf/6+OtNcN+0DF82t4+V1opY9PFOLsH09xVS5rr4v6ogSWNV+Kb6v/2mUtnMP5s7q10Xjs1ynDiLZmlV8Y7vOoDpvET6kxb213vutMlneBqHNFwFfpf+S77IlXtFcXUB72z2dQHvbxCykP+9dF+bPSEfYFyuqI+rqdojPRI50JQafffX4sIh2UG9vniYh0UG4Hic7BiHRQF3k+5bOVzyRbaeV8ttLmcDWC/1Owldfkz2nna405nu9gYjujdBbtDOvZMyCPdeNCyOO5MCZln0wWZU+8YvufT3mq7424Th2P6PcUvlXE6KuVohR+oYrnKZumbLuVVf2Wx3Hlf04IOgqXxT34xm8XTx7rWzhnKHyb46DOGdTYbmWVra32Ra6NaTVmOOIZY2ps03z+Pidlt6xOZW9vwXY33vrtJ59DdI7m/9d7So1ZlqsT9cexqeztLcZ3WV8W5Xoe5WEf43EE9ZZ9YNR3GxtVHJfnkSqWjO9Cvt85ATpjPdIZE3TGRbmK59fo8Dumo2Sz4zN3pxPymX2+7HHyZa1c0dtbDP7fgC/7FvJlB2VezDqL/irrGfqrrBsXQR6vkWHqNtcu48viOHQB4Gf9Qjh1mwDrtnPaNqhxz/6f8NDP0uubT/2OiLyj+S815NTKemN6dm1+tj63NDO7Ojc9tTo1X1+dmV1vNBYaU4szC9PT6yszC6sLU9PrU/NTKyGbk3i9q/AN7LzelWY8Da93KVteZr0rS3zT8iCs32SJv5oR8tkT6cL0ZnUhtc+udCHksxdd+4y5xsjjYGg+nmjOVbgv85wr9XxczblUX+6HfvvaObRudH4afqaMnwsEP2qek61Z7nKdOoTyQp1EvnGMtXe+tkHatzaf+lVfueZY8jldcPH+NhUPCfV5xMX729Q+khrl/Qr4dD9xWTuM7bn6HMB8On9Wfhn3afTLtqJPG/1Rl1RnGyGdRfmgzu52Yd3BtvPt+RsVdS2iy8hTr7qMuMrocjdZhXSZ5+ChOZ5aT1ZjouHPdPzzl/UXP+6m5jkKtievXWDs4TzA/2sB/HsC+EcC+EcFfuaZT40g7RrB/oscR8bPOVf6efLdro88qVsaJykPefJ9GUDJB/veOOWhXH03tiq5Yh/mLzJg/9tPeaiH/AUI3OtkexLxdk9ry38HtvwrnjWuLIX204V8BuwPBj/h/Po6aGthHD9Qa+4qtsB2AWMLbBcwttDLOlnR2z2/4on/GA1sqyzZmKD0/CDg5biS0oeQ/pwv4NFmsv6gjljZQd2XkUJHLO9iyEOZcOoWmypzu6eyDUV1xsriurryN3juOVGQ5lbaL6aN8Tjk37c/4H/BOBi63RNvs83SMOTF3NeobvdEudaa7fUOyTBLZfs8ryeibT5Ieagvvn0diBP3wOFJNeODb3d0hBPfWR9J/JWSwnOds+UrJRV63uzpZ9aBXnGZbux8+cL/5abseTt/+aJXfQnN41KtaVaITiUiHSzH/XkoIp0i86gYdEJfvsCTubh2OnN5qwyWw3Eey/q+fHHj5S2c8/nz2fLlC9aNrfjyRSiOgfpicOrLFzdDG91J7a7O94Z8y25fvuAvaJ3NX75g/RiHvK3+8sWdnv5tNLh/8zxHfQkS7Qb6maqtrR5qPOJziFY/9eWvLNl6aY3g30j2JtHXDut8hpZpIb/DriVflDnbT4N/CPrmt1/eLjO+BwDz1PiuztJzOyDf3A7WJ3AM2BOog8HfBToRmutZfRLP9WbUXA/vEKg12+sd+jJDltgGqnP8oa81+MYN/B9xocw5FoB9Udlfw8djwAloo09d0s4f6vUo8a58P7UHs0Z56gsVGS/vpT6baH45r/xTSyoGznYe+wnbef7iDuapr55WBA/KzpssMr5+74oWXoazFNNO8P0qg9Jv+/UFliyZf6z2PrJ+q7GgTJ/J0q1ET63XYJ/x3USEdTa+En8dar5C9JzT8RujP+qSjtGNsjqh+ivbPuUHhnRJ7StRuIroZVFc1Yi4hiPiqkXEFfqaI+t7ovjgQlF9t3ejrrOtU+h7Vch1SMhV+fVVknnMrx3v4BosXP2OoykfNuvHv0DzUtxHofxfu4+rRvCLV7Rw/hLNm9gmGl9n6tVs5RlcYr9mQfk12H61Zju/ak4Q+hppt69rmQwnCT57Zv8E25RjOSqv4jr1qire9aqjie37YpE+oOx7JQ0/Qfuu5KrWJdi+o07w3nilc+oG1R1cZz+u0LpwkX6i6PhsMtr0LOEaxR/TWGHlfOe77B5E3q/3TBgr/jONFeyfYR7yzDZX9ctqoP6KTsTz4Av8YtBi7EpHUH6YkO+y67k4rvS6ZqvW+I0HpSM8ppXVEeWbKzq1HumoMSJ1n/ftTY1BR93D2+911l0R6Sj/TPlGaCtHrmiVwXJoK7Gs3fPK6xHng63cmz+bLUk0ly0dq2WdVWsaygaxbqgYQ1H7ZLIou56LOmF1GoM8tR6r5vMG32091uipePCgrscWiamH1uTVemyRL9BvZmwqs9dU7btBOF6DrQgesa+reRn7WcofDO01VTyG5p5KX0NrDtjPWE+VzUL+fTbrhlwe3dYfTU6J5/uLar6Pcq0RTyEZZqlsn+e1CrSPvEcR9YXHGrV/Cf1y5UNX6FnFrkJrNKHYB9Yz5Beptjc6Z3OsB+WjfAmOB2Bbse86JOiomJ4an60sxvvUvmS1/og4lY+YeK9H4XUtoz/qOuWXIg6k+rzSEzWe8vqk2v9WoTyko/ZCKFxDEXFVI+LaExFXLSIu9klQ51jfE/nehde1jH6/4p7K/lSEXNU+Sd88NEscLys7d97BNVi4Uu/bNjjlx+H8+yTNv62cuscoS7yuZfCfhfn3afLzlY6H4pihvjQUqL+iMyLKHc1/6+XSPL8YtPknypJTt/ngIMcqsV5F/L2QjmD5kC7WeqRTE3RS9/mdWGVxOpuJVX60ZKyS13UM/ifBVn6cYpXI+1bGKllntyJWae/6EatU47fBn42xSm7fnVhle6zyo4FYZZE1VXU/lcF3O9NSJFap7Jf6JiPrqTovh/yzzTL4Xx6sWKWMV6Fca8RTSIZZKtvnOSaF9pHjmIib+8hugRP98o0zCM12uKP5+3pvaeMOdJNXFfgYzt8hfWvzPZBncBu2Lg2vdeN1NMdvOow0sS5DBM/PNXr3uzC+Yx3bxiIoz/72GOQZfBXeGY8b9x9A3lizHK49hGt3D7iMr0kBv3uTfClcuwjXiMCF7zAe+xt52/jOEqAPij7bH5LPpuwflvWdF/4r8Nn+iMYGnitgHtppnm+ovt/tjAvbJrS3PMZH7HuzFaLnnI63DcK5CWXXE39nZMb4UWfs1LpRdpfYPtfZZuq7u+gb8PeH1TnlkJ+hZFNkvQ3bODS+ccxerdOFzg2NufC5XPbzVD/msj5ZYL83H43nat+Afn/gyqeeQ3diqP7L/Z77BOahLnCsQ+kW+jXsw4wLeOXLq7ufxgvgCq31qu81jwdoI19Ylmn7+ojyRU02iX3RWeWL4hkh9kVD53CzVESWqh0nCR5lF7p7RfVj/sYQ9j/u4yoeiP1FxQbxPLCN0fwtcsN9NP+/XjLNT63MLk3PLtZX1mbnl+bm+Ty8gzpn9c3Z2KhforWrxoioZyz8C/WZBY4BROZ/OvE9KRv4a2nw103vb2q28Kv4pun8Lc2WLG9ptvOkYoaGV8V7b6Y8nHsb7syemP+cPZveWl/meEKWUq63PqlT84njk42DHv6tblm6sZmGts0pchPeEZPhdoq4/72Dl1BMPfHdA4W/h8Z32yXqp42ivpvpTDYm2rh18tT9J5buWrtjbWkVWWfx8S9WHfN4KaVC//OSDsNXBZ5Qqgi8qup8xXdF8JSJJKULNL/QCs2Y+4WhGUzDkI/wl+f/x3YB1ueXGuvTS+tLs0urqzMrS91cgOfkz9vbBZif7pcLkGg4mErsYkgXAOtidKsEp8ps1gXIhhy7cjh7tiuGbZhHV6NCeegCDFHei4g/zLsN8vjqlG+BPA5pqWWVUJglxTLXk27IctptlFMLahqJy8NZGoa8PZSHUz3jMYO5muST4rrSJ+Uzl3aZcWr1oOAfQzfZ8wzIBPMNHuWQqB0LH4vm7bCJlmeD22FVCCdzZezq+7vWTr38weX7jq3ctHRq6dXHTh1fO3mSt0JU6X/2P9id5PIcyjI+n5X/Iny3ZPywTUR87C/5/KkhgdeSWsKtUh62uW/bCvdxpM92ksck3xYV7hfGIy7TqOUTsx9qma1KebhUMtxs0c2SLWnZtX6My/jgJbDp/H+1RMVLO0ifl3ba+BbveOmszFLQdfnzdvBrF/P/t9qvtc8ebPPQ1vyOXxtORf3aXnxWCy+fWYYFfFlSPmvi0NTcVoamzOfBT7hg/i7nn5eHxq/tYNvwc27Gn/3207blOwN3bFs4TSc+ktNI3A+lbVN9MmTb2H7hZ8mydDPg5jn3LYJuyjo/qROziceLqYPOP0Zw2N0Vp9voRtjspvklVcEH9jN1dQ7PB5wHh7K9TKMq8Fm9xwO8jbvu9t03bgy6fbflkK2270fy5x37Hkw7vqvb8V0pFfJdLe7McuYjfoinRrD4udODHnxFfOGqpxzOXxmHiyivkK1HPra77344/3+rbbvFR7a5bV/a5ltu5gZty43BcZlu622J7fVsYjnNpFwfejJNm9y6XcfC8fDNHiVFWv26cqTo8Sp1FJTXPctuoVa4trJN1aeJQtcMqTXOXZRXa3bWMfMjDgMc90H23XCssjXpDMe1gM/i/GrMj227U9mMLB10fr/H3g36utA1+f+DvC50ef485lq+7TTg8/URnCvYszrag5+TSdifp4xXdQWZOvaZrRXb53azbW9rtx2/+eG1lQdPHbv/+I1LK3evOUq8WFyByvsGZqyowlGF8iptB6d4If9/q53iN+bP29wpXumXU5xoP+xs4o6+4RTf3GzhVx3cdNgCFPhsPBnMiwDmRR6Y2wAGN4RlSTnXxp8KrtxCedjfbqU8NGgvojy0M+gQmGHLni8AHrOEG9YqlPdiyOtTsH5pkIL1sWkb/pvS4N/Yg/9N0I48YFdcezumdKiRnnN6YmP0R11SO7QxsSm6CTNzCCwIt7J0330vP3Hs9NKptVsePL6S+QRYBUQ7JKrIwznG/5wHjk0EmwU2Bdj9Ea+vPL8z2moPPB8D5Sbld6H5XMhEVjy/Rsd1oaN4VuZ2s3RSr80W+VxEIrM4q4YQRzIMtaPvk/OclA5anTLTdTPgZTjmB9thF+DHeqj2UvN6dRWvGiLsfeIY1pwy3Vx/dXSa9wtvpj0wHlGmPXxxEu6bvMdAxTi2w1Tnpvz/rZ7q4JAf+gzahOtspyGCwzFExf3MNVLTBufiDdc14ucl+W9W11cTzyoeURWyKuICYH1V/GJ3Adoor5uamvYup+0QXq2C8Hfmv2eOyefPatyrUt6QwK36pNUx06fY+rwyO7e8MjO7VF87s6Vlqps+x6b/JOn5laX5RmNxprE205jtRt/WYbd56GC2X6GDShr89dQxZbWehnUxulmf2wvPNhaOB8onXkObGYQ9DxarzmRje0LuWjt1x9Lx1fvffMuxtftWsYexdENpO4z+FlTZ6tF/Kn/e5tZqdZsHOhf7Fei8qdnCHwp0vqTZkuVLmu08bXb3V+Lg31xiGc4WCYglOr04p2yfCogZ/X4FxIpe6qlWvKuUN9zsrIda8bb2zWAuBjjWLfZY0bO24LSKXJi+Z/ifCbTs5GTi1fDVndXwFrxvNfyq/P9BXg23UzG4Gn4d4PPNANXsM/OS9ufPx+8/dWz9kRtPrD0ZUV69/f5THavLRUPDzASXKxMiVrR8sFbJ7eCoNfL/t9pRq+YZ2/xalOXtvU1zqm83o9nKLdeFt2kaHJdBQ+JbkUYY34o0wnwLwHyLB+bFAPNiD4zPuUSYlwLMSz0wtwPM7R6YlwHMyzwwLweYl3tgXgEwr/DA3AEwd3hg7gSYOz0wrwSYV3pgvhVgvtUD8yqAeZUH5tUA82oPzGsA5jUemNcCzGs9MK8DmNd5YF4PMK/3wLwBYN7ggXkjwLzRA/MmgHmTB+bbAObbPDDfDjDf7oFZApglD8wywCx7YFYAZsUDswowqx6YNYBZ88CsA8y6B+YugLnLA3M3wNwNMFWAOQYwxwgmscM9n9amTzVCW7jTBhamNn2j4KBsEVcTxwrlDTc769Ftq/RNAMe6xVulMZhh+qt2W5neZvhfBrRe6dp5xzJVou9c55aBFG2xUJ9bSqv3jXrZST9fh1ak7bL0KMD1Z6fZXOKdZo1GaKeZ6cqgT9Jvz/8f5En6rfkzzkVT3XKbdgdfo274b07D/4zhvyUJ/pmNKwl+19rMpbRP9frW7XBsNIqOy4O6wzFtwLtRrxB+5GePkI+15YjIM1wWw8HtKQi/B+qI8Phs5fHdav4b+hJVhfKc4MFoZymT+Zuobtg2Fc+v4eV3vN0RZeP7Uke3Kz/4Cz2PAe/3EM5uX/xDm4Iy2SXgEV+N4I/nv1n+f3Iap69ePpwngZe35M/KdlgdsnePOF3/igvLtGj9hzy8PuRa9f+Kh1fkB3lVW/HwKxFPBOBqAq5CvFad9vVtvArZ483qufr6U9qrT1tfIhoN1JvpZ39jUIeq67RBDK90CvGPEfxGrN1pW4rxfYR/T/6byfJ7PTw416nXWUJfyqfXRfrgu/Nf7NeqjVGvjW/1RSA+SphqK2Lia3Y38KOeVOLxv7GNaiwN/gW1jRdtyQeJrm2lKmrDDf4HAedH8md1XKHINbRjrvPrq871bqvGAYb9hn1QRvUzs6HWXpNQPqbPbPzYnA5tyaTgp0bwP0H1OgDyqVJdEY/B7xd0ce2Mx8X9RDfTjz/Nn60N1ZecMj35NPE6AbirVDZU518EnH8vf1Zf3eKvyKqvSFXof9UPsnRTs50Xg/+5/DeTw3/Nn1WcxvhKuT6bzYMyPv4c+OA+VWu213sC8qoCnte2JwX8BMBwH8R+s49wqa+GqbFO+di47ZPtiuFV9k7xv0+U5f6xywNv+Lh//HL+q/zm/VCG+zraRcb5a8DLF1x7/bEN8ItlX/LQxvpXRX3Ynvj85v3Eq8H/S+ev/6So/36AGSGcBv9/AM7/6uET66XGBnt/UMAfEPWacJ1ysbJK9gaHslc42P4YvVGndWKMeMU8pI91V317v+A11Nb7BR1u63+f/ypfctzDp48/tAl8XeVegQvHlUHf+/If8/+3eu/LVh/piE1/amFhbnFq+cmVx9WV9dWZ6X7Tn5uZaywsLC2szK2sL86sLPebftkjPWr9AH2VLNkaBK5RIDz6hQj/Fwb75N//lz/z+hPSy+CGKn64iuf3DA7xbrjZ/k6tXeCajsEb7VHBo+Xhl7/Rj8rS3vx/lBfiMj5qBP+/8v+tTXAdxsqrL4/jl9yZlqLPazrqq+djAj5rn782fPkv1j12zPwMTcKP75g3051Mrw3B9t7TN9e3W2YSrbVO9WtPH+6ZC+3p8+2zqwKMb58dwoQOcRiMb58dwvj22SGMb58dwvj22SGMb58dwvj22SGMb58dwvj22SGMb58dwvj22SGMb58dwvj22SGMb58dwvj22SGMb59dlt+v6/5S7jvBPuagLmn3WxVf13267beaAjjWrdB+K9Nftd/K9DbD/3ygdbNr5x3xhebaafcMza4kHsfqZa8VrVIeth1eqzJF8knhp6B8Usg/k0/oWDLPI5zT/rfJaKv2VD0v/3+Q91TN5s992FOV/Fa0xHuqptPuqWrtCbs1Df8be8JelAb/muG/LQX+RuszOLtgTu/zHYqM7VniNQW09ziW4hgZgw76U5ZnsVx1/VbINwhdsa38mMSHrzf2VOwBPtX6r+8zqrhuuicAz34h4x/pT3079r/heqc6uK/2GTgX1w5mOBPtM1ioUX3flf9mdX0t0cS1BW6jLKGty/72UhsxDPeNcaCt+oOV5bVV26935sqXSjtOtaduDHDeQjgNfglwTlQ0n86F/Vp7v0/A43qH8aNsxj4qF1qDVLgRvurBw2tMXM8heDcqcKu9DxF1VO59qAiaxg/vA7if+MK9DxUXlln2t1/Qxdj5KNHdT3QzHTpAOmS8jTltXzZ8Waf7ytH8/3pvaYblWHOdesv9COFP579Z/qn8WV1niFeo8T5FnJOrvQIsi31JZDHVoWcoC6UfrGe2D/fM7c0Vvyx8ezuzpOb//dgLcgHxi3a3Rjwp+6f8lrL2b9J1tu8eylN7ZCuCB+VDsL3EPYsKnnXe4N+R/2b/P7vSzp/6bEL2a+OqsvG85wzj0qFxsNsevvd68Pr2Ltlcgq9x/Brg/IH8OXHsfoHbFP1Ipon8jKXhJ+gXjgl+WGd+0LW3xUZ/d9r+Vwl+r6Cr9i369l/iGFQVNFC/1BkTF1GWRc7/JGrHxQrRM3ngO6Tfr/M/Y8SPz6aafPam4Wch810mXbt+ZAnjANg2yAdeHsV2Ccf/n4D33GeUXbIYVo3gfxZw/lT+PCFo89Ww3LcULxXX2U+cC8/JMa7Lebivgmn59habnTe+d4s6sV1ygBdjQzwmWxvWnLYHbE8M/h/nv2pepPZphvwC5UeoOeOE69Q7nrMo2thuNzU1bd9+RdzvjvCfz39x7GecNU99ah6cuAeUZap8p5BM1V45NWeccJ1y5H133WTKZ0yMTlGZGvw/d636P9tT/6IyNfhfB5wsUyWjkEy77WVmmap9v0VlenNT81pUpgb/Jag/y1TZ25BMDf63AWe/ZYp1nqRyyDv7DWzvRj3lRgM4xz04lf3yjY2+tlQ2jdvy9/Nf1ZaqXuMF67UvUr32layXwf9xonpVPfWqlqzXeJd6sa9v8P+lQL2w7+HYzfFIg/8zwGl9T8UMMC6dpeFmO79H8/f1npKOGaAPW2u211vZPYQv6xtwXID7KOaFzmYqnVDneZRPa2XRp1WfH2BfLXTOO0u+mPQ38t9uOmC0By1upM6shsYINSdSn0iZdJ1ty+tLNYFLtXMozlQ03jLo5wvGcgRn2/mCrd7fv9WfzNjy8wWLc+uL09PLjenF1bXFxtxWni+4OEeQ9ctDZCtrgl4Gd30AruL5PYNDvBtutr8b9PMF1+QIBvl8weVkt7DusWNyZ2gSfnzHvJnuDMK5qb+bP2/v8w2zfbuzuJIGf98+hXNzs4Uf62J0z8T+4flc1w6PflCV8DjXr326M7OJ9+nOpdqne4Lkk2afbks+KeSfySe0T3db39EH+w2fCLRVJV596mrffIVoJ9Lz+SI+CtIfdSn1qrXGNUz8sHzYziQ6pzIXmhOqeTvPbbntcL6Jc3q1xj/kOueneL9cjd5dmf+G7tWqUJ5z4fl19u5Sqluqfbe8JlaNQIf1I0tH8996T2mqzmufSKfIunWafalTO/dWhuWzre6tfE7+q+6t5D5d5t7KGaob+nW99mm1Lyrtmb6W/5zoLtg51knn4voz3LYx9V3tC4/Jv9rDgPvZboL3mId9RdkljmnfBjjtTmh1PxzeAaf20PG4Muahh/ac11heCry8Pn8u/plMvsnQlxLv4FlVt3lZsrx9BfnmqDLynfWa7wS8DMc0MTpv9FVL8gpN2VMyWH4X5Q0JOmrEx52hrw/wyjuLkPYQ5akVSrWyyXAmB7UTAsvxbVgGv5z/ZnV6H8BXnF61D63KdVu1H6c6q50QahaOI0qWhiEv5swok8EHgA+ub63ZXt/QSriST+iWPINxrqVzKDve1a70HvsV33qnVjl9/4dWUquiXJnRIEsWhXdOR7tNzlt1mvfx/P9BPs37YP68Hb7W97b8/61eUVQRHvZuj26SF04hLztthKf4bJAjPKlWAipEz/hh+fQnwjNVx13MKKObmp2yUXxkSXmhbO8ror5KNyc95bPUbbfw2XwLnN0Indm7j7mWPM7ANjvp4U7vp+Mq7U/k/w/yKu0PG778F+u+1au0pjtnzyrp3MzOKmk47aySlkmN9Z1V0rB8dlZJz4ZV0qn6Zn3op8kq6XqF8CM/O6uk5X3NnVXSnVVS48enczurpDurpGVT4lXS9Z1VUj//O6ukT6WdVVJH9dxZJW3B7aySbqdV0qn6zippp47trJLurJIafzurpMXTzirpRtpZJXU7q6TO7aySYt7OKulTCes+SKuk0zmC7b1KOrPar1XSRKsDU2nHSv2tLKwLR/nRPlgZNdbbN7Iyn8N89+z5PMCXJfxOFvsHiVYKE3/3pN4YpJVCFw93fXt/m6P17YxbAX8K+ST6NkddfZsjIv8NmyOs5fiyebCthD0Z3bvt+Oraw2urr1y6665jx++6c23lxNqpF568c+3J1yfYzecFM1zg42RiYhwV+n8ogMM5HVjFRbBx8Y5NTqJg/UwRlwvpj7qUU4DwZ8pQPkMku92CV/X5dd8CMNLZLegoXEMRcXF7Y3sczX/r5dI0v0i7mFdf5MU5TJY3KupcEfAqhG18Z7/3Al6GY5rYTqOUp8JvauPAXsrDtuPwqZoSVly8qWdooWWzdEKfJmJ7p36NjutCR8km9cInu4qpNk3wtWy7ItJBXeTFcOwrNsRn8DdCGSynrljOkrlPvJnlDtfCeUv+nDYUVJ/nfobJ8vZQ/TBPLc4rG8S6oZahiton/MzluwEvw3E91BKWCi9tTOFdZxu9Mv/NeF6GMojT+EZes1Rk88IewYe6Bpw/izVoY41qZ9YPXGZh/cBlIe7vuBSEMuHUbWz7FOBlOEuqnZX/gbRsaqf0Dq/DN7sx6MsX9+T/D8LyhU1NiiwvJJreF/blN0KHrnOsTOHLV4kflg/3P7URkcfbLN3UbMFxXlW8G+ozLnVVONtaJZtqgI4K3WzdpuX6bFGdG9RNyzz3xrL8CaUs3dRswXFeaGzdLrisfJZCS1xqbhXSR/NLlQ9uYS+2pWWurlbLgoibN5TxZ6NSfb6Txw6kldiHnlPzEEtqHsvtrq62Vv41t7vyryuCh24+9B8CXoazpHSkQnlq873yXXmsqQi+Qhtr1Vac3ZSHeo/hUsTpnN4yZ/5bKM7g60Nq02WZz/gMizplifuXwf90/pt2Q63uXyNUh91QByXXm5vtdTD4f57/ZrA/69pltotoYJ6KEU64zj7F7YB8czuoTe17AnUw+M/kvxns+TmjW7eVrz6T8XEh8IG8nuG/2V5vdeU+wrM/FfqsA8pskuCVDVFjKMqcPzeEW+vUvJk3MBv8P8t/M1ibFCkbNEq8Y93ZzlQFXRWzGgGe/yB/Trzm0LfYDo9LqAdlxyWTRdlxKYadGCZ6g9JvMfbC/Rb7aFXAc7/t1s/Nf1TbxVm/1VhQps9kKbRNF7eZW5/xxQFqog5ZuT8CfNiOaN+xLNt3g/+fwMuf5M8pfKJuesnta/TUgZetmH8a/VHnUvojjZD+hw7YJfq86ExoXFT9MduCuc91tpn6LBX6srY1QukX+2Nlj4Zgefa1sY1DPjrbgSI+Oup7twNMFcKl+rEaD7qtc/OnRg3/3+a/WXn7tLfqv9zv1ZxO+Z/c731zOp9uoZ/Etl4dz1B+WJHPbCpcuwO0u336m2mrz9MxL875+4gas002icfsWTVmx/wkmpKlakf1GfVxysN+zP0R6YaOf3EfRz01/cX+omJ/6MPbGH02b+W2TxFl9T0McjkDK+hlcDcE4Cqe3zM4xLvhZvu7Qd/KfR3Y2iwN4lbuK/NCg7iV23RnED5LdH7+vM23ks/tbCUPJxtPbmq243dOz2NQX6yMWte9Oc/b4+BIpGuNc7yXL0W78/gYU24HBf8cZ96f/5+N+1flz8eOr5xYe/Pa8VMvfOCBtk25Zzbq2s5cR4lXzCv0f7ddttvhwKUdMhiEHQsO5JVodj41AjQT4K+rCCLOvMcoz2QwLMpVPP8rvfPB8nt8Ny7yDOfB/Bf5tXqM0C9eA5hilDonDX7ZVufC8zlUT5T30Ug8GD7rszXXmdhTNljuM5X4/DUcJeUxWzKdOQfemTz3E6+JVpjruHqQAP+GTiZanZ9WOsnXujmn24FHde6nkXld2pjpAQ9Vosk8IoyyeTyWDtP7agFYpZu4g4b543K825Tf4S5LTtwu1kdrHlwYnUP43QSbqg0PCp6M9/8NHpfBk4bkIwA=","debug_symbols":"","names":["address_to_custody"],"brillig_names":["discover_new_messages","storage_read","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","call_private_function_internal","random","notify_created_note_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"sync_notes","hash":"18189845109258462025","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"custody_to_address","hash":"16463606642016114520","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"custody_id","type":{"kind":"field"},"visibility":"private"},{"name":"parties","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},"visibility":"private"},{"name":"receiver_idx","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2429784973622283587":{"error_kind":"string","string":"Can only emit a note log for an existing note."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["custody_to_address"],"brillig_names":["discover_new_messages","get_notes_internal","get_collapse_hints","random","notify_created_note_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","get_notes_internal","get_collapse_hints","storage_read","get_public_data_witness","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"constructor","hash":"7953868430954845454","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"token","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["constructor"],"brillig_names":["constructor"]},{"name":"custody_balance","hash":"9112392205417292692","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"custody_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["custody_balance"],"brillig_names":["discover_new_messages","get_notes_internal","get_collapse_hints","store_in_execution_cache_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_config","hash":"9606276841424599560","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5276036973553878575":{"error_kind":"string","string":"Function get_config can only be called statically"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_config"],"brillig_names":["discover_new_messages","storage_read","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"custody_balance_from","hash":"11278862551574300326","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"custody_id","type":{"kind":"field"},"visibility":"private"},{"name":"party","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["custody_balance_from"],"brillig_names":["discover_new_messages","get_notes_internal","get_collapse_hints","store_in_execution_cache_oracle_wrapper","directive_invert","directive_integer_quotient"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"pSymm::approve_withdrawal_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"pSymm::approve_withdrawal_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"custody_id","type":{"kind":"field"}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"pSymm::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"pSymm::constructor_parameters","fields":[{"name":"token","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"pSymm::custody_balance_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"pSymm::custody_balance_parameters","fields":[{"name":"custody_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"pSymm::get_config_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"pSymm::get_config_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"config::Config","fields":[{"name":"token","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"pSymm::address_to_custody_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"pSymm::address_to_custody_parameters","fields":[{"name":"custody_id","type":{"kind":"field"}},{"name":"parties","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}},{"name":"sender_idx","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"pSymm::custody_balance_from_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"pSymm::custody_balance_from_parameters","fields":[{"name":"custody_id","type":{"kind":"field"}},{"name":"party","type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"pSymm::custody_to_address_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"pSymm::custody_to_address_parameters","fields":[{"name":"custody_id","type":{"kind":"field"}},{"name":"parties","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}},{"name":"receiver_idx","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"},{"kind":"string","value":"DepositNote"},{"kind":"struct","fields":[{"name":"party","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"deposit_amount","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"is_deposit","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"},{"kind":"string","value":"WithdrawConfirmNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"custody_id","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"amount","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"nonce","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"party","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"pSymm"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"config","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"custody_map","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}}]}}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n","path":"std/array/mod.nr"},"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"51":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    messages::logs::note::encode_and_encrypt_note,\n    note::{\n        retrieved_note::RetrievedNote,\n        note_getter_options::NoteGetterOptions,\n        note_interface::{NoteType, NoteHash}\n    },\n    state_vars::{PrivateSet, storage::Storage},\n    macros::notes::note,\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n        utils::field::full_field_less_than,\n    },\n};\n\n\n\n#[note]\n#[derive(Eq)]\npub struct WithdrawConfirmNote {\n    owner: AztecAddress,      // The address that can withdraw (recipient)\n    custody_id: Field,\n    amount: Field,\n    nonce: Field,\n    party: AztecAddress,      // The address giving confirmation\n    randomness: Field,\n}\n\nimpl WithdrawConfirmNote {\n    pub fn new(owner: AztecAddress, custody_id: Field, amount: Field, nonce: Field, party: AztecAddress) -> Self {\n        let randomness = unsafe { random() };\n        WithdrawConfirmNote { owner, custody_id, amount, nonce, party, randomness }\n    }\n}\n\n#[note]\n#[derive(Eq)]\npub struct DepositNote {\n    party: AztecAddress,\n    deposit_amount: Field,\n    owner: AztecAddress, // view-only for decryption\n    is_deposit: bool,    // true for deposits, false for withdrawals\n    randomness: Field,   // prevent brute-forcing note\n}\n\nimpl DepositNote {\n    pub fn new(party: AztecAddress, deposit_amount: Field, owner: AztecAddress, is_deposit: bool) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n\n        let randomness = unsafe { random() };\n\n        DepositNote { party, deposit_amount, owner, is_deposit, randomness }\n    }\n\n    pub fn party(self) -> AztecAddress {\n        self.party\n    }\n    pub fn owner(self) -> AztecAddress {\n        self.owner\n    }\n    pub fn deposit_amount(self) -> Field {\n        self.deposit_amount\n    }\n    pub fn is_deposit(self) -> bool {\n        self.is_deposit\n    }\n}\n\n\npub struct Custody<Context> {\n    context: Context,\n    set: PrivateSet<DepositNote, Context>,\n    withdraw_confirms: PrivateSet<WithdrawConfirmNote, Context>,\n}\n\n// TODO(#13824): remove this impl once we allow structs to hold state variables.\nimpl<Context> Storage<2> for Custody<Context> {\n    fn get_storage_slot(self) -> Field {\n        self.set.get_storage_slot() + self.withdraw_confirms.get_storage_slot()\n    }\n}\n\nimpl<Context> Custody<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        Custody { \n            context, \n            set: PrivateSet::new(context, storage_slot),\n            withdraw_confirms: PrivateSet::new(context, storage_slot + 1)\n        }\n    }\n}\n\n\nimpl Custody<&mut PrivateContext> {\n    pub fn add_deposit(self, amount: u128, party: AztecAddress, owner: AztecAddress) {\n        let note = DepositNote::new(party, amount as Field, owner, true);\n        self.set.insert(note).emit(encode_and_encrypt_note(self.context, owner, owner));\n    }\n\n    pub fn add_withdrawal(self, amount: u128, party: AztecAddress, owner: AztecAddress) {\n        let note = DepositNote::new(party, amount as Field, owner, false);\n        self.set.insert(note).emit(encode_and_encrypt_note(self.context, owner, owner));\n    }\n\n    pub fn get_balance(self, from: AztecAddress) -> Field {\n        let mut balance = 0;\n        let notes = self.set.get_notes(NoteGetterOptions::new());\n\n        for i in 0..notes.max_len() {\n            if i < notes.len() {\n            let note = notes.get_unchecked(i).note;\n                if note.owner().eq(from) {\n                    if note.is_deposit() {\n                        balance += note.deposit_amount();\n                    } else {\n                        balance -= note.deposit_amount();\n                    }\n                }\n            }\n        }\n\n        balance\n    }\n\n    pub fn get_balance_from(self, from: AztecAddress, party: AztecAddress) -> Field {\n        // TODO: fix overflow after withdrawal (it's a view-only function so no security issue)\n        let mut balance = 0;\n        let notes = self.set.get_notes(NoteGetterOptions::new());\n\n        for i in 0..notes.max_len() {\n            if i < notes.len() {\n            let note = notes.get_unchecked(i).note;\n                if note.owner().eq(from) & note.party().eq(party) {\n                    if note.is_deposit() {\n                        balance += note.deposit_amount();\n                    } else {\n                        balance -= note.deposit_amount();\n                    }\n                }\n            }\n        }\n\n        balance\n    }\n\n    pub fn add_withdraw_confirm(self, owner: AztecAddress, custody_id: Field, amount: Field, nonce: Field, party: AztecAddress) {\n        let note = WithdrawConfirmNote::new(owner, custody_id, amount, nonce, party);\n        self.withdraw_confirms.insert(note).emit(encode_and_encrypt_note(self.context, owner, owner));\n    }\n\n    pub fn has_withdraw_confirm(self, owner: AztecAddress, custody_id: Field, amount: Field, nonce: Field, party: AztecAddress) -> bool {\n        let notes = self.withdraw_confirms.get_notes(NoteGetterOptions::new());\n        let mut matches = 0;\n\n        for i in 0..notes.max_len() {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i).note;\n                matches += if (note.custody_id == custody_id) &\n                             (note.amount == amount) &\n                             (note.nonce == nonce) &\n                             note.party.eq(party) { 1 } else { 0 };\n            }\n        }\n        matches > 0\n    }\n}\n\n","path":"/home/qbit/Desktop/work/otc-noirhack/contracts/psymm/src/custody.nr"},"52":{"source":"mod config;\nmod custody;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract pSymm {\n    use dep::aztec::{\n        context::UtilityContext,\n        macros::{\n            functions::{initializer, private, public, view, utility, internal},\n            storage::storage,\n        },\n        prelude::{AztecAddress, Map, PrivateSet, PublicImmutable},\n        note::note_viewer_options::NoteViewerOptions,\n        protocol_types::traits::{FromField, ToField}\n    };\n\n    use dep::token::Token;\n\n    use crate::config::Config;\n    use crate::custody::{Custody, DepositNote};\n\n    use std::hash::poseidon2::Poseidon2::hash;\n\n    global MAX_PARTIES: u32 = 2;\n\n    #[storage]\n    struct Storage<Context> {\n        /// L2 token address for custody operations\n        config: PublicImmutable<Config, Context>,\n        /// custody_id -> N*N of notes (N deposit notes with N owners)\n        custody_map: Map<Field, Custody<Context>, Context>,\n    }\n\n    /// Initialize with the L2 token address\n    #[public]\n    #[initializer]\n    fn constructor(token: AztecAddress) {\n        storage.config.initialize(Config { token });\n    }\n\n\n    /// Read-only view of the contract config\n    #[private]\n    #[view]\n    fn get_config() -> Config {\n        storage.config.read()\n    }\n\n    #[private]\n    fn custody_balance(custody_id: Field) -> Field {\n        storage.custody_map.at(custody_id).get_balance(context.msg_sender())\n    }\n\n    #[private]\n    fn custody_balance_from(custody_id: Field, party: AztecAddress) -> Field {\n        storage.custody_map.at(custody_id).get_balance_from(context.msg_sender(), party)\n    }\n\n\n    #[private]\n    fn address_to_custody(\n        custody_id: Field,\n        parties: [AztecAddress; MAX_PARTIES],\n        sender_idx: u32,\n        amount: u128, \n        nonce: Field\n    ) {\n        let mut fields = [0; MAX_PARTIES];\n        for i in 0..MAX_PARTIES {\n            fields[i] = parties[i].to_field();\n        }\n        let computed_id = hash(fields, MAX_PARTIES);\n        assert(custody_id == computed_id);\n\n        assert(parties[sender_idx].eq(context.msg_sender()));\n        let cfg = storage.config.read();\n        Token::at(cfg.token)\n            .transfer_to_public(parties[sender_idx], context.this_address(), amount as u128, nonce)\n            .call(&mut context);\n\n        for i in 0..MAX_PARTIES {\n            storage.custody_map.at(custody_id).add_deposit(amount, parties[sender_idx], parties[i]);\n        }\n    }\n\n    #[private]\n    fn approve_withdrawal(\n        to: AztecAddress,\n        custody_id: Field,\n        amount: u128,\n        nonce: Field\n    ) {\n        storage.custody_map.at(custody_id).add_withdraw_confirm(\n            to,\n            custody_id,\n            amount as Field,\n            nonce,\n            context.msg_sender()\n        );\n    }\n\n    #[private]\n    fn custody_to_address(\n        custody_id: Field,\n        parties: [AztecAddress; MAX_PARTIES],\n        receiver_idx: u32,\n        amount: u128,\n        nonce: Field\n    ) {\n        // Check total custody balance is positive before withdrawal\n        let receiver = parties[receiver_idx];\n        let total_balance = storage.custody_map.at(custody_id).get_balance(receiver);\n        assert(total_balance as u128 > 0);\n\n        let mut fields = [0; MAX_PARTIES];\n        for i in 0..MAX_PARTIES {\n            fields[i] = parties[i].to_field();\n        }\n        let computed_id = hash(fields, MAX_PARTIES);\n        assert(custody_id == computed_id);\n        let receiver = parties[receiver_idx];\n        storage.custody_map.at(custody_id).add_withdrawal(amount, receiver, receiver);\n        \n        for i in 0..MAX_PARTIES {\n            if i != receiver_idx {\n                assert(\n                    storage.custody_map.at(custody_id).has_withdraw_confirm(\n                        receiver,\n                        custody_id,\n                        amount as Field,\n                        nonce,\n                        parties[i]\n                    )\n                );\n                storage.custody_map.at(custody_id).add_withdrawal(amount, receiver, parties[i]);\n            }\n        }\n\n        let cfg = storage.config.read();\n        Token::at(cfg.token)\n            .transfer_in_public(context.this_address(), receiver, amount as u128, 0)\n            .enqueue(&mut context);\n\n    }\n}\n","path":"/home/qbit/Desktop/work/otc-noirhack/contracts/psymm/src/main.nr"},"62":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"63":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"70":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"71":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"72":{"source":"use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr"},"73":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"77":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"89":{"source":"use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"92":{"source":"use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr"},"93":{"source":"use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr"},"94":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"98":{"source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"99":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"102":{"source":"use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr"},"103":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"106":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"108":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"109":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"111":{"source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"112":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"113":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"115":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr"},"116":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"117":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"118":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"125":{"source":"use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr"},"126":{"source":"use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr"},"131":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"133":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"136":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"139":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"142":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"145":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"146":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"147":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"148":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"149":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"150":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"154":{"source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"155":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"156":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"157":{"source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"158":{"source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"160":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"161":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"162":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"163":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"165":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"171":{"source":"use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"173":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"188":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"189":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"191":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"192":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"194":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"195":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"197":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"199":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"200":{"source":"use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/random.nr"},"203":{"source":"use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr"},"227":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"229":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"272":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"287":{"source":"use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"289":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"290":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"291":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"300":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"304":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"306":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"307":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"316":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"327":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"341":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"345":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"346":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"362":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"363":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"365":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"371":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/home/qbit/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"392":{"source":"use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr"}}}