{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "pSymm",
  "functions": [
    {
      "name": "get_config",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5276036973553878575": {
            "error_kind": "string",
            "string": "Function get_config can only be called statically"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "deposit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "custody_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "random",
        "notify_created_note_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "withdraw",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "custody_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13107192312614724151": {
            "error_kind": "string",
            "string": "Return notes not sorted in descending order."
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "pSymm"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "config",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "custody_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "custody_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::withdraw_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::withdraw_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "pSymm::get_config_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "config::Config"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::get_config_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "custody_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::deposit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::deposit_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "101": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "103": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "104": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "105": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "107": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "108": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "109": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "110": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "123": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "128": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "131": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "134": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "137": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "138": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "140": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "141": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "142": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "146": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "147": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "148": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "149": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "150": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "152": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "153": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "154": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "155": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "157": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "163": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "165": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "180": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "181": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "183": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "184": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "186": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "187": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "189": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "191": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "195": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "219": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "221": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "264": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "279": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "281": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "282": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "292": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "296": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "298": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "299": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "308": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "319": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "333": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "337": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "338": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "354": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "355": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "357": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "363": {
      "path": "/home/qbit/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "39": {
      "path": "std/ops/arith.nr",
      "source": "// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n"
    },
    "392": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "51": {
      "path": "/home/qbit/Desktop/work/otc-noirhack/contracts/psymm/src/main.nr",
      "source": "mod config;\nmod types;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract pSymm {\n    // Corrected imports based on usage\n    use std::ops::{Add, Sub}; // Keep Add/Sub if BalanceSet methods return values needing them, otherwise remove. Re-evaluating: BalanceSet add/sub handle ops internally. Remove.\n\n    use dep::aztec::{\n        context::PrivateContext, // Keep PrivateContext as it's used in function signatures implicitly via #[private]\n        macros::{\n            functions::{initializer, private, public, view}, // Removed internal, utility\n            storage::storage,\n        },\n        // Removed unused log imports\n        prelude::{AztecAddress, Map, PublicImmutable}, // Removed PublicContext, PublicMutable\n        // Removed unused Serialize import\n    };\n\n    // Removed unused uint_note imports\n    use dep::token::Token;\n    // Removed unused ToField import\n\n    use crate::types::balance_set::BalanceSet;\n    use crate::config::Config;\n\n    #[storage]\n    struct Storage<Context> {\n        /// L2 token address for custody operations\n        config: PublicImmutable<Config, Context>,\n        /// Mapping of custody_id to private balance sets\n        custody_balances: Map<Field, BalanceSet<Context>, Context>,\n    }\n\n    /// Initialize with the L2 token address\n    #[public]\n    #[initializer]\n    fn constructor(token: AztecAddress) {\n        storage.config.initialize(Config { token });\n    }\n\n    /// Read-only view of the contract config\n    #[private]\n    #[view]\n    fn get_config() -> Config {\n        storage.config.read()\n    }\n\n    // docs:start:deposit\n    /// Deposit `amount` of L2 token into private custody under `custody_id`\n    #[private]\n    fn deposit(custody_id: Field, amount: u128, nonce: Field) {\n        let caller = context.msg_sender();\n        let cfg = storage.config.read();\n\n        Token::at(cfg.token)\n            .transfer_in_private(caller, context.this_address(), amount, nonce)\n            .call(&mut context);\n\n        // 2) Update custody balance by adding a new note owned by the caller\n        storage.custody_balances.at(custody_id).add(caller, amount);\n\n        // 3) Emit an unconstrained note for off-chain indexing (Optional)\n        // encode_and_encrypt_note_unconstrained(\n        //     &mut context,\n        //     caller, // Or perhaps context.this_address() depending on indexing needs\n        //     custody_id, // Include custody_id in the note? Need a custom note type.\n        // );\n    }\n    // docs:end:deposit\n\n    // docs:start:withdraw\n    /// Withdraw `amount` of L2 token from private custody under `custody_id`\n    #[private]\n    fn withdraw(custody_id: Field, amount: u128) {\n        let caller = context.msg_sender();\n\n        // 1) Update custody balance by subtracting notes owned by the caller\n        // This implicitly checks for sufficient balance and handles note nullification.\n        // It might return change note(s) if the subtracted notes' sum exceeds `amount`.\n        storage.custody_balances.at(custody_id).sub(caller, amount);\n\n        // 2) Transfer `amount` of L2 token back to caller (private)\n        let cfg = storage.config.read();\n        Token::at(cfg.token)\n            .transfer(caller, amount)\n            .call(&mut context);\n\n        // 3) Emit an unconstrained note for off-chain indexing (Optional)\n        // encode_and_encrypt_note_unconstrained(\n        //     &mut context,\n        //     caller, // Or perhaps context.this_address()\n        //     custody_id, // Include custody_id?\n        // );\n    }\n    // docs:end:withdraw\n}\n"
    },
    "52": {
      "path": "/home/qbit/Desktop/work/otc-noirhack/contracts/psymm/src/types/balance_set.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, UtilityContext},\n    note::{\n        note_emission::OuterNoteEmission, note_getter_options::SortOrder,\n        note_interface::NoteProperties, retrieved_note::RetrievedNote,\n    },\n    protocol_types::{address::AztecAddress, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n};\nuse dep::aztec::prelude::{NoteGetterOptions, NoteViewerOptions, PrivateSet};\nuse dep::uint_note::uint_note::UintNote;\nuse std::ops::Add;\n\npub struct BalanceSet<Context> {\n    pub set: PrivateSet<UintNote, Context>,\n}\n\nimpl<Context> BalanceSet<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { set: PrivateSet::new(context, storage_slot) }\n    }\n}\n\nimpl BalanceSet<UtilityContext> {\n    pub unconstrained fn balance_of(self: Self) -> u128 {\n        self.balance_of_with_offset(0)\n    }\n\n    pub unconstrained fn balance_of_with_offset(self: Self, offset: u32) -> u128 {\n        let mut balance = 0 as u128;\n        // docs:start:view_notes\n        let mut options = NoteViewerOptions::new();\n        let notes = self.set.view_notes(options.set_offset(offset));\n        // docs:end:view_notes\n        for i in 0..options.limit {\n            if i < notes.len() {\n                balance = balance + notes.get_unchecked(i).get_value();\n            }\n        }\n        if (notes.len() == options.limit) {\n            balance = balance + self.balance_of_with_offset(offset + options.limit);\n        }\n\n        balance\n    }\n}\n\nimpl BalanceSet<&mut PrivateContext> {\n    pub fn add(self: Self, owner: AztecAddress, addend: u128) -> OuterNoteEmission<UintNote> {\n        if addend == 0 as u128 {\n            OuterNoteEmission::new(Option::none())\n        } else {\n            // We fetch the nullifier public key hash from the registry / from our PXE\n            let mut addend_note = UintNote::new(addend, owner);\n\n            // docs:start:insert\n            OuterNoteEmission::new(Option::some(self.set.insert(addend_note)))\n            // docs:end:insert\n        }\n    }\n\n    pub fn sub(self: Self, owner: AztecAddress, amount: u128) -> OuterNoteEmission<UintNote> {\n        let subtracted = self.try_sub(amount, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL);\n\n        // try_sub may have substracted more or less than amount. We must ensure that we subtracted at least as much as\n        // we needed, and then create a new note for the owner for the change (if any).\n        assert(subtracted >= amount, \"Balance too low\");\n        self.add(owner, subtracted - amount)\n    }\n\n    // Attempts to remove 'target_amount' from the owner's balance. try_sub returns how much was actually subtracted\n    // (i.e. the sum of the value of nullified notes), but this subtracted amount may be more or less than the target\n    // amount.\n    // This may seem odd, but is unfortunately unavoidable due to the number of notes available and their amounts being\n    // unknown. What try_sub does is a best-effort attempt to consume as few notes as possible that add up to more than\n    // `target_amount`.\n    // The `max_notes` parameter is used to fine-tune the number of constraints created by this function. The gate count\n    // scales relatively linearly with `max_notes`, but a lower `max_notes` parameter increases the likelihood of\n    // `try_sub` subtracting an amount smaller than `target_amount`.\n    pub fn try_sub(self: Self, target_amount: u128, max_notes: u32) -> u128 {\n        // We are using a preprocessor here (filter applied in an unconstrained context) instead of a filter because\n        // we do not need to prove correct execution of the preprocessor.\n        // Because the `min_sum` notes is not constrained, users could choose to e.g. not call it. However, all this\n        // might result in is simply higher DA costs due to more nullifiers being emitted. Since we don't care\n        // about proving optimal note usage, we can save these constraints and make the circuit smaller.\n        let options = NoteGetterOptions::with_preprocessor(preprocess_notes_min_sum, target_amount)\n            .sort(UintNote::properties().value, SortOrder.DESC)\n            .set_limit(max_notes);\n        let notes = self.set.pop_notes(options);\n\n        let mut subtracted = 0 as u128;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                subtracted = subtracted + note.get_value();\n            }\n        }\n\n        subtracted\n    }\n}\n\n// Computes the partial sum of the notes array, stopping once 'min_sum' is reached. This can be used to minimize the\n// number of notes read that add to some value, e.g. when transferring some amount of tokens.\n// The preprocessor (a filter applied in an unconstrained context) does not check if total sum is larger or equal to\n// 'min_sum' - all it does is remove extra notes if it does reach that value.\n// Note that proper usage of this preprocessor requires for notes to be sorted in descending order.\npub fn preprocess_notes_min_sum(\n    notes: [Option<RetrievedNote<UintNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: u128,\n) -> [Option<RetrievedNote<UintNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let mut sum = 0 as u128;\n    for i in 0..notes.len() {\n        // Because we process notes in retrieved order, notes need to be sorted in descending amount order for this\n        // filter to be useful. Consider a 'min_sum' of 4, and a set of notes with amounts [3, 2, 1, 1, 1, 1, 1]. If\n        // sorted in descending order, the filter will only choose the notes with values 3 and 2, but if sorted in\n        // ascending order it will choose 4 notes of value 1.\n        if notes[i].is_some() & sum < min_sum {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum = sum.add(retrieved_note.note.get_value());\n        }\n    }\n    selected\n}\n\n"
    },
    "54": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "55": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "62": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "63": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "64": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "65": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "69": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "81": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "86": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "90": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "91": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "94": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n"
    },
    "95": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "98": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    }
  }
}
