{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "pSymm",
  "functions": [
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "get_config",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5276036973553878575": {
            "error_kind": "string",
            "string": "Function get_config can only be called statically"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token",
            "type": {
              "kind": "struct",
              "path": "types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "custody_balance_from",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "custody_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "deposit_owner",
            "type": {
              "kind": "struct",
              "path": "types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_notes_internal",
        "get_collapse_hints",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "custody_to_address",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "counterparties",
            "type": {
              "kind": "array",
              "length": 1,
              "type": {
                "kind": "struct",
                "path": "types::address::aztec_address::AztecAddress",
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            "visibility": "private"
          },
          {
            "name": "custody_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "notify_created_note_oracle_wrapper",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "storage_read",
        "get_public_data_witness",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "custody_balance",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "custody_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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/y2O/+L33+L4L37/LY3/4tvTlcd/8ftvcfwXv/8Wx3/x+29x/JXffy++PV15/JXffy++Pd2Ux+Fx8TLnwkvbsk729VGmnN/mevF7tXSuF7+vK+d68S3ytHO9eF6QzvXi2UI614vnEOlcraO5XjzfSOd68Sz0rbne2l2Piy1vzLWl3FSaa0u5qTTXlnJTYa4X39pQO9eWclNpri3lptJcW8pNpblaR3NtKTdN05qb8kZuuvgWj9q5NpWbCnNtKjcV5tpUbvp0rtPFt6TUzrWp3FSYa1O5qTDXpnJTYa7W0Vz7yU3Txbfm/Gyu9/HXm4Xu468339zHf+3MMg/DYyDzOIeP47/41pzl8V87W5THf+28UB7/tTNAefzXvq+Xx3/te3V5/Ne+/5bHf+37b3n8177/lsdf+f334ltzlsdf+f334ltzlsdf+f334ltzlsdf+f334ltzlsdf+f334ltzlsdf+f334ltzlsdf+f334ltzlsdf+f334ltzlsdf+f334ltdlsdf+f334jtHlsdf+f334vswlsdf+f334rsalsdf+f334jsKlsdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334nv/lcdf+f334vv5lcdf+f334vvulcdf+f334vvjlcdf+f334vvYlcdf+f334vvNlcdf+f334vvClcdf+f334vu3lcdf+f334vuslcdf+f334vuhlcdf+f334vuWlcdf+f334vuLlcdf9/13vvg+YOXx133/nS++X1d5/HXff+eh7vvvfPG9ssrjr/v+O198/6vy+Ou+/86V7381V77/1Vz5/ldz5ftfzZXvfzVXvv/VXPn+V3Pl+1/Nle9/NVe+/9Vc+f5Xc+X7X82V7381V77/1Vz5/ldz5ftfzZXvfzVXvv/VXPn+V3Pl+1/Nle9/NV99/yvLj4vnKcSN8V/8/jumlf/tPyy8dB7s7eI8Ps9Zjn/OXP5w7ZIfL7ws76+9c7n4ff00LhfPC6dxMbhscrl4vjmNy8Vz02lcLp7HTuNy8Zx3GpeL58ezuFx9X7jT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Hs484aHHM8dDj2eOhx7PHA89nrnB/HDmeOjxzPHQ45njocczx0OPZ46HHs4846HHM8dDj2eOhx7PHA89nrnB/HDmeOjxzPHQ45njocczx0OPZ46HHs58wUOPZ46HHs8cDz2eOR56PHOD+eHM8dDjmeOhxzPHQ49njocezxwPPZj5OAx46PHM8dDjmeOhxzPHQ49nbjA/nDkeejxzPPR45njo8czx0OOZ46GHMw946PHM8dDjmeOhxzPHQ49nbjA/nDkeejxzPPR45njo8czx0OOZ46GHM4946PHM8dDjmeOhxzPHQ49nbjA/nDkeejxzPPR45njo8czx0OOZ46GHMx/x0OOZ46HHM8dDj2eOhx7P3GB+OHM89HjmeOjxzPHQ45njocczx0MPZ2546PHM8dDjmeOhxzPHQ49nbjA/nDkeejxzPPR45njo8czx0OOZ46GHM5/w0OOZ46HHM8dDj2eOhx7P3GB+OHM89HjmeOjxzPHQ45njocczx0MPZz7jocczx0OPZ46HHs8cDz2eucH8cOZ46PHM8dDjmeOhxzPHQ49njocezjzhocczx0OPZ46HHs8cDz2eucH8cOZ46PHM8dDjmeOhxzPHQ49njocezjzjocczx0OPZ46HHs8cDz2eucH8cOZ46PHM8dDjmeOhxzPHQ49njoceznzBQ49njocezxwPPZ45Hno8c4P54czx0OOZ46HHM8dDj2eOhx7PHA89mnkY8NDjmeOhxzPHQ49njocez9xgfjhzPPR45njo8czx0OOZ46HHM8dDD2ce8NDjmeOhxzPHQ49njocez9xgfjhzPPR45njo8czx0OOZ46HHM8dDD2ce8dDjmeOhxzPHQ49njocez9xgfjhzPPR45njo8czx0OOZ46HHM8dDD2c+4qHHM8dDj2eOhx7PHA89nrnB/HDmeOjxzPHQ45njocczx0OPZ46HHs7c8NDjmeOhxzPHQ49njocez9xgfjhzPPR45njo8czx0OOZ46HHM8dDD2c+4aHHM8dDj2eOhx7PHA89nrnB/HDmeOjxzPHQ45njocczx0OPZ46HHs58xkOPZ46HHs8cDz2eOR56PHOD+eHM8dDjmeOhxzPHQ49njocezxwPPZx5wkOPZ46HHs8cDz2eOR56PHOD+eHM8dDjmeOhxzPHQ49njocez7xbD03Lk3n6nHnM4UFjCK+X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",
      "brillig_names": [
        "discover_new_messages",
        "get_notes_internal",
        "get_collapse_hints",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "address_to_custody",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "counterparties",
            "type": {
              "kind": "array",
              "length": 1,
              "type": {
                "kind": "struct",
                "path": "types::address::aztec_address::AztecAddress",
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            "visibility": "private"
          },
          {
            "name": "custody_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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x018j5uky59kxJGnvP2WLvrt+luY629hr7+Fu/4WdP0t/PW34MhT3n4oFn28/hbp+lvky/OUsF1/C3P9Lez1t7g+Zwx0/S389bcI198iXn6Lk9XbLR7Nvv7O/53yT5Zkt5iPlHpLJrw0c23NqK2Zb2tWduyWnHs0e9p1fW8W25qltma5qVk68Vt+7D+/5WBemp2QzGnfh96YbXshmUJbs9jWLDf1rbxaV292MnBydk9G+pdmtq2Za2tGbc3K7r5dmh/N7LMD/q+fu6u8FsZ9k9jjJunvN6ms65U3DOS8RSrvjcd7C/PpLe7NbFsz19aMWp4+afNtzUJbs9jWLLU1y03NzNbWzLQ1s23NXFuzk/f//fFgjfH5k89Sambjdrytc1tgeLlFuv4W+fJbnCz/sN7CXH8Le/0t3PW3oOtv4a+/Rbj+FtePbnv96LbXj253/eh2149ud/3odtePbnf96HbXj253/eh2H4/ue7PU1iw3NaOtrZlpa2bbmrm2ZtTWzLc1C23N2qKE2qKE2qLEt0WJb4sS3xYlvi1KfFuU+LYo8W1R4tuixLdFiW+LktAWJaEtSkJblIS2KAltURLaoiS0RUloi5LQFiWhLUpiW5TEtiiJbVES26IktkVJbIuS2BYlsS1KYluUxLYoSW1RktqiJLVFSWqLktQWJaktSlJblKS2KEltUZLaoiS3RUlui5LcFiW5LUpyW5TktijJbVGS26Ikt0VJboqSvG1tzUxbM9vWzLU1o7Zmvq1ZaGsW25qltmZtUWLaosS0RYlpixLTFiWmLUpMW5SYtigxbVFi2qLEtEWJbYsS2xYlti1KbFuU2LYosW1RYtuixLZFiW2LEtsWJa4tSlxblLi2KHFtUeLaosS1RYlri5K22mtuq73mttprbqu95rbaa26rvea22mtuq73mttprbqu95rbaa26rvea22mtuq73mttprbqu95rbaa26rvea22mtuq73mttprbqu95rbaa26rvea22mtuq73mttprbqu95rbaa26rvea22mtuq73mttprbqu95rbaa26rvea22mtuq73mttprbqu95rbaa26rvea22mtuq73mttprbqu95rbaa26rvea22mtuq73mttprbqu95rbaa26rvea22mtuq73mttprbqu95rbaa26rvea22mtuq73mptqr35pqr7dmpq2ZbWvm2ppRWzPf1iy0NYttzVJbs7YoMW1RYtqixLRFiWmLEtMWJaYtSkxblJi2KDFtUWLaosS2RclJ7TUfL++ZW0ml0OwkSmI8mmX7o1lpx1mm8yxu5ri5zKG5zPFzmRPmMifOZU6ay5w8lTlnawejzDFzmTPXU9nN9VR2cz2V3VxPZTfXU9nN9VR2cz2V3VxPZer9VH57FNPNHjOZPXYye9xk9tBk9vjJ7Pn42XxvFtuapbZmxWeSNWnfwsNa4yvQTIjuON03xPDYWKd4IEJy+yYybnvehMeUtwLdjg2wbrPdcXVOd/vLS8kT2e+33QHBO/dqvxFuvxVuvxNuPwm33wu3Pwi3Pwq3Pwm3f/b5t2J/ED7/BuHzbxA+/wbh828QPv8G4fNvED7/BuHzbxA+/wbh828UPv9G4fNvFD7/RuHzbxQ+/0bh828UPv9G4fNvFD7/RuHzbxI+/ybh828SPv8m4fNvEj7/JuHzbxI+/ybh828SPv8m4fNvFj7/ZuHzbxY+/2bh828WPv9m4fNvFj7/ZuHzbxY+/2bZ86/ZZM+/ZpM9/5pN9vxrNtnzr9lkz79mkz3/mk32/Gs22fOv2WTPv2YTPv8a4fOvET7/GuHzrxE+/xrh868RPv8a4fOvET7/GuHzrxE+/1rh868VPv9a4fOvFT7/WuHzrxU+/1rh868VPv9a4fOvFT7/OuHzrxM+/zrh868TPv864fOvEz7/OuHzrxM+/zrh868TPv+S8PmXhM+/JHz+JeHzLwmff0n4/EvC518SPv+S8Pl3+v2vKvYL3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygjf/8oI3//KCN//ygrf/8oK3//KCt//ygrf/8pusudfK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kyt8/ysrfP8rK3z/Kzv9/lePnw4xm2f7Cxdvab/WhscP35rd+zr7XM3Z19nndc6+kqK+zp4vcPZ19tyCs6+z5yGcfZ09Z+Hs6+z5DWNfp9+LjLOvivKm6fc44+yrorxp+r3TOPuqKG+afk+2bdstCZsLL5p09j3ZfPY7/5hMfu8rH2gX4D7Fp5/eSlcnE/P31bdfjsfVNm/fbCbPnYaymTzXGslm9n3qhrKZPJcbymby3G8om8lzxaFsCGxO2UyVi95NmiplvJs0VRZ4N2mq5Otu0lQ5zz+T5tqS727SVDP83aSpJta7SVPNZ3eTpppG7ibN9/SeaxO6u0nzPb3n2irubtJ8T++5NnS7mzTf03uubdfuJs339J5rc7S7SfM9vefawuxu0nxP77k2GrubNN3T2821HdjdpOme3m6uTbvuJk339HbbdE9vN9duWXeTpnt6u7n2tLqbNN3T282189Q/k+baTOpu0nxP77m2fLqbNN/Te66Nme4mzff0nmv7pLtJ8z2959rk6G7SfE/vubYiups039N7rg2D7ibN9/Sea1ufu0nzPb3n2nznbtJ8T++5tsi5mzTf03uujWzuJs339J5ru5m7SfM9vefaFOZu0nxP77m2brmbNN/Te64NVu4mzff0nmsblLtJ8z2959qs5G7SfE/vubYUuZs039N7ro0/7ibN9/Sea3uOu0nzPb3n2kTjbtJ8T++5tq+4mzTf03uuzSDuJs339J5ra4W7SfM9vefaqOBu0nxP77k++7+bNN/Te66P6O8mzff0nuuT9LtJ8z295/rA+27SfE/vuT6Vvps039N7rg+D7ybN9/Se6zPYu0nzPb3n+ujzbtJ8T+/5vrV0831r6eb71tLN962lm+9bSzfft5Zuvm8t3XzfWrr5vrV0831r6eb71tLN962lm+9bSzfft5Zuvm8t3XzfWrr5vrV0831r6eb71tLN962lm+tby9ern376F9sAxt3qkMLjh7+3AXRzfcR5cV+X2lK40telthR+21ea63vWi/u61JbClb7K2Vbu1lf7vq8U824HJZeOi91GRbNNPKx29Lia/DcbOdvK9WdD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",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "7b3Rruw6d535Lr72hUROUWS/SqMROLETGDDswHEaaAR+965zaklV61+q4t46LM1Jzi8Xwf6PpSXyG1PSHEMq6v/83T/+03/93//jv/zzv/73f/tff/d//d//5+/+5d/+2z/8xz//27/e/tf/+c+//7v/+u///C//8s//4788/+e/m/74/+Yw/bnD//qf//Cvf/zv//Uf//Dv//F3/9c8yZz//u/+6V//8c9/r+vtj/z3f/6Xf/rjf6X//Psf2685fW2dJ9m3XePBpktYvjZdlunxZyX/5//z97fhzC2Gk+O6DWcp74cjsXxtKin/HE5oMpws23BKfj+cNG10Ukg/hxNbDKeE8LV1iUtlOHn62nSdDsSSw+HEPG8HmGNZ58pwQpnmr83jlJ4mPX0dZbnkKOmSo6yXHCVfcpRyxVHidMlR5kuOEi45SrzkKJec+/GScz9ecu7HS879eMm5Hy859+WSc18uOfflknNfLjn35ZJzXy459+WSc18uOfflknNfLjn3l0vO/eWSc3+55NxfLjn3l0vO/eWSc3+55NxfLjn3l0vO/eWScz9dcu6nS879dMm5ny4599Ml53665NxPl5z76ZJzP11y7qdLzv31knN/veTcXy8599dLzv31knN/veTcXy8599dLzv31knN/veTcz5ec+/mScz9fcu7nS879fMm5ny8593OTcz9OS9qPUp4euMzz/SjrJUfJlxylXHGUMl1ylPmSozQ59+PtWd52lBDKt6P83PpmZrcx3ZxNeNp6OXrqmePXxkt8OkeW+zlSosL48/7k83aFzpXxL2ndnyKnHPetU7hPQHqfwNL7BFLvE1h7n0DufQKl7wmEaep9AnPvEwi9T6DzO3GY7N+JV9kap2Vd5HkCB+5imbfGKSxPwz7cOC/bMPL61GTJoW2Z91fWwu2p1L61HI4iPyzOt03/JG6/dRiNuP1eZzTi9puz0Yjb7yZHI26//R2M+Gy/Xx+NuH2DMRpx+45oNOL2LdxoxAXiFxPHc15NHM95NXE859XE8ZxXE8dzXkw84DmvJo7nvJo4nvNq4njOq4kLxC8mjue8mjie82rieM6rieM5ryaO57yYeMRzXk0cz3k18R485/wgnt9DnPP+i5O5hFj507OUbVG7eVnD85/+k00P7lCLjcDmJZseHJcWmx68kRabHlyMFpse/IYWmx6cgRIb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xw/x4vFP00PMnz/E58/u8vmzu3z+7C6fP7vL58/u8vmzu3z+7C4fP7vnafr8IebPH+K3z+77bvHcbnJut+Xcbuncbuu53fK53cqp3ebp3G7zud3OVcl8rkrmc1Uyn6uS+VyVzOeqZD5XJfO5KgnnqiScq5JwrkrCuSoJ56oknKuScK5KwrkqCeeqJJyrkniuSuK5KonnqiSeq5J4rkriuSqJ56oknquSeK5K4rkqkXNVIueqRM5ViZyrEjlXJXKuSuRclci5KpFzVSLnqmQ5VyXLuSpZzlXJcq5KlnNVspyrkuVclSznqmQ5VyXLuSpJ56oknauSdK5K0rkqSeeqJJ2rknSuStK5KknnqiSdq5L1XJWs56pkPVcl67kqWc9VyXquStZzVbKeq5L1XJWs56okn6uSfK5K8rkqyeeqJJ+rknyuSvK5KsnnqiSfq5J8rkrKuSop56qknKuScq5KyrkqKeeqpJyrknKuSsq5KimnqiRM07nd5nO7hXO7xXO7ybndlnO7pXO7red2y+d2O1cl57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew3nstdwLnsN57LXcC57Deey13Auew0vsteyv7x3S/nmg91eVMm67ruV8G23oxVnG33P4jacbGs4xdRwXmXQWsOZbQ0n2BpOtDUcsTWcxdZwkq3h2LoqF1tX5WLqqhwnU1flOJm6KsfJ1FU5TqauynEydVWO09VX5befYrqNJxkbz2psPNnYeIqt8cyTsfH89rX5vls4t1s8t9vhNen28HNbwuP2iHGpQJvTGvev+6Y1PRbWOfwgQo7bIjK321es/O00TfsCWFN8/Ji85K/xL8bHv0ybAGmJ8ef4U+fjXzsff+58/KXv8R+/99DR+OfOxx86H3/sfPzW77+18Xd+/w2d339D5/ff0Pn9N3R+/42d339j5/ff2Pn9N3Z+/42d339j5/ff2Pn9N3Z+/42d339j5/df6fz+K53ff6Xz+690fv+Vzu+/0vn9Vzq//0rn91/p/P4rnd9/l87vv0vn99+l8/vv0vn9d+n8/rt0fv9dOr//Lp3ff5fO779L5/ff1Pn9N3V+/02d339T5/ff1Pn9N3V+/02d339T5/ff1Pn9N3V+/107v/+und9/187vv2vn99+18/vv2vn9d+38/rt2fv9dO7//rp3ff3Pn99/c+f03d37/zZ3ff3Pn99/c+f03d37/zZ3ff3Pn99/c+f23dH7/LZ3ff0vn99/S+f23dH7/LZ3ff0vn99/S+f23dH7/LX3ff2Xq+/4rU9/3X5n6vv/K1Pf9V6a+778y9X3/lanv+69Mfd9/Zer7/itT5/ffufP779z5/Xfu/P47d37/Nb/+VW38nd9/O1//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9KOl//Sjpf/0o6X/9q6Xz9q6Xz9a+Wzte/Wjpf/2qZ+r7/Lp2vf7V0vv7V0vn6V0vn618tna9/tXS+/tXS+fpXS+frXy2dr3+1dL7+1dL5+leL+fWvHn86rWV+Hv/BxlPetg3p8Ydvu93nav1e3XKu1u/rLedqvQdoOFfz63W1nKv13qLlXK33IS3nar1naTlXcTRX671Qy7k66pvMr3HWcq6O+ibza6c1nKv5ddZaztV63zRN20jSFNMPT2p9TbalLBv/Nc/lvVZLks2AL3l9+tPT0dZ5XsvX1re/vO5bhzJ9sTHe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",
      "brillig_names": [
        "sync_notes"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000001"
            },
            {
              "kind": "string",
              "value": "DepositNote"
            },
            {
              "fields": [
                {
                  "name": "deposit_owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "deposit_amount",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "is_deposit",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000003"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000004"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "pSymm"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "config",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "custody_map",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "counterparties",
                    "type": {
                      "kind": "array",
                      "length": 1,
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress"
                      }
                    }
                  },
                  {
                    "name": "custody_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::address_to_custody_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::address_to_custody_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "counterparties",
                    "type": {
                      "kind": "array",
                      "length": 1,
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "types::address::aztec_address::AztecAddress"
                      }
                    }
                  },
                  {
                    "name": "custody_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::custody_to_address_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::custody_to_address_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "custody_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::custody_balance_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::custody_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "custody_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "deposit_owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::custody_balance_from_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::custody_balance_from_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "pSymm::get_config_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "config::Config"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::get_config_abi"
        }
      ]
    }
  },
  "file_map": {
    "102": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n"
    },
    "103": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "106": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "108": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "109": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "111": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "112": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "113": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "115": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "116": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "117": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "118": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "125": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n"
    },
    "126": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
      "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "131": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "133": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "136": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "139": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "142": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "145": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "146": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "147": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "148": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "149": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "150": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "154": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "155": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "156": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "157": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "158": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "161": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "162": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "163": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "165": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "171": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "173": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "188": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "189": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "191": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "192": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "194": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "195": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "197": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "199": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "200": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "203": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "227": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "229": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "272": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "287": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "289": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "290": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "291": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "300": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "304": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "306": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "307": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "316": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "327": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "341": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "345": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "346": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "362": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "363": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "365": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "371": {
      "path": "/home/qbit/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "392": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "51": {
      "path": "/home/qbit/Desktop/work/otc-noirhack/contracts/psymm/src/custody.nr",
      "source": "use dep::aztec::{\n    context::PrivateContext,\n    messages::logs::note::encode_and_encrypt_note,\n    note::{\n        retrieved_note::RetrievedNote,\n        note_getter_options::NoteGetterOptions,\n    },\n    state_vars::{PrivateSet, storage::Storage},\n    macros::notes::note,\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n        utils::field::full_field_less_than,\n    },\n};\n\n\n\n#[note]\n#[derive(Eq)]\npub struct DepositNote {\n    deposit_owner: AztecAddress,\n    deposit_amount: Field,\n    owner: AztecAddress, // view-only for decryption\n    is_deposit: bool,    // true for deposits, false for withdrawals\n    randomness: Field,   // prevent brute-forcing note\n}\n\nimpl DepositNote {\n    pub fn new(deposit_owner: AztecAddress, deposit_amount: Field, owner: AztecAddress, is_deposit: bool) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n\n        let randomness = unsafe { random() };\n\n        DepositNote { deposit_owner, deposit_amount, owner, is_deposit, randomness }\n    }\n\n    pub fn deposit_owner(self) -> AztecAddress {\n        self.deposit_owner\n    }\n    pub fn owner(self) -> AztecAddress {\n        self.owner\n    }\n    pub fn deposit_amount(self) -> Field {\n        self.deposit_amount\n    }\n    pub fn is_deposit(self) -> bool {\n        self.is_deposit\n    }\n}\n\n\npub struct Custody<Context> {\n    context: Context,\n    set: PrivateSet<DepositNote, Context>,\n}\n\n// TODO(#13824): remove this impl once we allow structs to hold state variables.\nimpl<Context> Storage<1> for Custody<Context> {\n    fn get_storage_slot(self) -> Field {\n        self.set.get_storage_slot()\n    }\n}\n\nimpl<Context> Custody<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        Custody { context, set: PrivateSet::new(context, storage_slot) }\n    }\n}\n\npub struct BalanceArgs {\n    from: AztecAddress,\n}\n\npub fn filter_notes_by_owner(\n    notes: [Option<RetrievedNote<DepositNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    args: BalanceArgs,\n) -> [Option<RetrievedNote<DepositNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    for i in 0..notes.len() {\n        if notes[i].is_some() {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            if retrieved_note.note.owner().eq(args.from) {\n                selected[i] = Option::some(retrieved_note);\n            }\n        }\n    }\n\n    selected\n}\n\nimpl Custody<&mut PrivateContext> {\n    pub fn add_deposit(self, amount: u64, deposit_owner: AztecAddress, owner: AztecAddress) {\n        let note = DepositNote::new(deposit_owner, amount as Field, owner, true);\n        self.set.insert(note).emit(encode_and_encrypt_note(self.context, owner, owner));\n    }\n\n    pub fn add_withdrawal(self, amount: u64, deposit_owner: AztecAddress, owner: AztecAddress) {\n        let note = DepositNote::new(deposit_owner, amount as Field, owner, false);\n        self.set.insert(note).emit(encode_and_encrypt_note(self.context, owner, owner));\n    }\n\n    pub fn get_balance(self, from: AztecAddress) -> Field {\n        let mut balance = 0;\n        let mut options = NoteGetterOptions::with_filter(filter_notes_by_owner, BalanceArgs { from });\n        let notes = self.set.get_notes(options);\n        \n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i).note;\n                if note.is_deposit() {\n                    balance += note.deposit_amount();\n                } else {\n                    balance -= note.deposit_amount();\n                }\n            }\n        }\n        \n        balance\n    }\n\n    pub fn get_balance_from(self, from: AztecAddress, deposit_owner: AztecAddress) -> Field {\n        let mut balance = 0;\n        let mut options = NoteGetterOptions::with_filter(filter_notes_by_owner, BalanceArgs { from });\n        let notes = self.set.get_notes(options);\n        \n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i).note;\n                if note.deposit_owner().eq(deposit_owner) {\n                    if note.is_deposit() {\n                        balance += note.deposit_amount();\n                    } else {\n                        balance -= note.deposit_amount();\n                    }\n                }\n            }\n        }\n        \n        balance\n    }\n}\n\n"
    },
    "52": {
      "path": "/home/qbit/Desktop/work/otc-noirhack/contracts/psymm/src/main.nr",
      "source": "mod config;\nmod custody;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract pSymm {\n    use dep::aztec::{\n        context::UtilityContext,\n        macros::{\n            functions::{initializer, private, public, view, utility, internal},\n            storage::storage,\n        },\n        prelude::{AztecAddress, Map, PrivateSet, PublicImmutable},\n        note::note_viewer_options::NoteViewerOptions,\n    };\n\n    use dep::token::Token;\n    use dep::types::traits::FromField;\n    use dep::authwit::auth::assert_inner_hash_valid_authwit;\n\n    use crate::config::Config;\n    use crate::custody::{Custody, DepositNote};\n\n    global MAX_COUNTERPARTIES: u32 = 1;\n\n    #[storage]\n    struct Storage<Context> {\n        /// L2 token address for custody operations\n        config: PublicImmutable<Config, Context>,\n        /// custody_id -> N*N of notes (N deposit notes with N owners)\n        custody_map: Map<Field, Custody<Context>, Context>,\n    }\n\n    /// Initialize with the L2 token address\n    #[public]\n    #[initializer]\n    fn constructor(token: AztecAddress) {\n        storage.config.initialize(Config { token });\n    }\n\n    /// Read-only view of the contract config\n    #[private]\n    #[view]\n    fn get_config() -> Config {\n        storage.config.read()\n    }\n\n    #[private]\n    fn custody_balance(custody_id: Field) -> Field {\n        storage.custody_map.at(custody_id).get_balance(context.msg_sender())\n    }\n\n    #[private]\n    fn custody_balance_from(custody_id: Field, deposit_owner: AztecAddress) -> Field {\n        storage.custody_map.at(custody_id).get_balance_from(context.msg_sender(), deposit_owner)\n    }\n\n\n    #[private]\n    fn address_to_custody(\n        from: AztecAddress,\n        // counterparties used to share note ownership\n        counterparties: [AztecAddress; MAX_COUNTERPARTIES],\n        custody_id: Field,\n        amount: u64, nonce: Field\n    ) {\n        assert(from.eq(context.msg_sender()));\n        // assert from is sender\n        let cfg = storage.config.read();\n        Token::at(cfg.token)\n            .transfer_to_public(from, context.this_address(), amount as u128, nonce)\n            .call(&mut context);\n\n        storage.custody_map.at(custody_id).add_deposit(amount, from, from);\n        for i in 0..MAX_COUNTERPARTIES {\n            if !counterparties[i].eq(AztecAddress::from_field(0)) {\n                storage.custody_map.at(custody_id).add_deposit(amount, from, counterparties[i]);\n            }\n        }\n    }\n\n    #[private]\n    fn custody_to_address(\n        to: AztecAddress, counterparties: [AztecAddress; MAX_COUNTERPARTIES],\n        custody_id: Field, amount: u64, nonce: Field\n    ) {\n        storage.custody_map.at(custody_id).add_withdrawal(amount, to, to);\n        for i in 0..MAX_COUNTERPARTIES {\n            if !counterparties[i].eq(AztecAddress::from_field(0)) {\n                storage.custody_map.at(custody_id).add_withdrawal(amount, to, counterparties[i]);\n            }\n        }\n\n        assert_inner_hash_valid_authwit(&mut context, to, 0);\n\n        for i in 0..MAX_COUNTERPARTIES {\n            if !counterparties[i].eq(AztecAddress::from_field(0)) {\n                assert_inner_hash_valid_authwit(&mut context, counterparties[i], 0);\n            }\n        }\n\n        let cfg = storage.config.read();\n        Token::at(cfg.token)\n            .transfer_in_public(context.this_address(), to, amount as u128, 0)\n            .enqueue(&mut context);\n\n    }\n}\n"
    },
    "54": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "62": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "63": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "70": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "71": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "72": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "73": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "77": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "89": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "92": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "93": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "94": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "98": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "99": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    }
  }
}
