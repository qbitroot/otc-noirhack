{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "pSymm",
  "functions": [
    {
      "name": "deposit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "custody_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_config",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5276036973553878575": {
            "error_kind": "string",
            "string": "Function get_config can only be called statically"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "get_custody_balance",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "custody_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12133945852524408359": {
            "error_kind": "string",
            "string": "Function get_custody_balance can only be called statically"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_notes_internal",
        "get_collapse_hints",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "withdraw",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "custody_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "14721978132355969467": {
            "error_kind": "string",
            "string": "Insufficient balance in custody"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "notify_created_nullifier_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "storage_read",
        "get_public_data_witness",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000001"
            },
            {
              "kind": "string",
              "value": "CustodyNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "custody_id",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "amount",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000003"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "pSymm"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "config",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "custody_notes",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "pSymm::get_config_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "config::Config"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::get_config_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "custody_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::deposit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::deposit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "custody_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::withdraw_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::withdraw_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "custody_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "pSymm::get_custody_balance_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "pSymm::get_custody_balance_abi"
        }
      ]
    }
  },
  "file_map": {
    "101": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "102": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "104": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "105": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "106": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "108": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "109": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "110": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "111": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "118": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n"
    },
    "119": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
      "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "124": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "126": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "129": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "132": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "135": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "138": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "139": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "141": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "142": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "143": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "147": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "148": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "149": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "150": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "151": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "153": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "154": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "155": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "156": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "158": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "164": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "166": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "181": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "182": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "184": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "185": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "186": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr",
      "source": "struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"
    },
    "187": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "188": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "190": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "192": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "193": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "196": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "220": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "222": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "265": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "280": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "282": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "283": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "284": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "293": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "297": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "299": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "300": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "309": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "320": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "334": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "338": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "339": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "355": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "356": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "358": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "364": {
      "path": "/home/qbit/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "393": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "51": {
      "path": "/home/qbit/Desktop/work/otc-noirhack/contracts/psymm/src/main.nr",
      "source": "mod config;\nmod types;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract pSymm {\n    use dep::aztec::{\n        context::PrivateContext,\n        macros::{\n            functions::{initializer, private, public, view},\n            storage::storage,\n        },\n        prelude::{AztecAddress, Map, PrivateSet, PublicImmutable},\n        note::note_interface::{NoteHash, NoteProperties},\n        utils::comparison::Comparator,\n    };\n\n    use dep::token::Token;\n\n    use crate::types::custody_note::CustodyNote;\n    use crate::config::Config;\n\n    #[storage]\n    struct Storage<Context> {\n        /// L2 token address for custody operations\n        config: PublicImmutable<Config, Context>,\n        /// Mapping of owner address to private note sets\n        custody_notes: Map<AztecAddress, PrivateSet<CustodyNote, Context>, Context>,\n    }\n\n    global MAX_NOTES: u32 = 8;\n\n    /// Initialize with the L2 token address\n    #[public]\n    #[initializer]\n    fn constructor(token: AztecAddress) {\n        storage.config.initialize(Config { token });\n    }\n\n    /// Read-only view of the contract config\n    #[private]\n    #[view]\n    fn get_config() -> Config {\n        storage.config.read()\n    }\n    #[private]\n    #[view]\n    fn get_custody_balance(custody_id: Field) -> u128 {\n        let cfg = storage.config.read();\n        let caller = context.msg_sender();\n        // Get notes without popping them\n        let notes = storage.custody_notes.at(caller).get_notes(\n            dep::aztec::prelude::NoteGetterOptions::new()\n                .set_limit(MAX_NOTES)\n                .select(CustodyNote::properties().custody_id, Comparator.EQ, custody_id)\n        );\n\n        let mut total_amount = 0 as u128;\n        for i in 0..MAX_NOTES {\n            if i < notes.len() {\n                total_amount += notes.get_unchecked(i).note.amount;\n            }\n        }\n        total_amount\n    }\n\n    /// Deposit `amount` of L2 token into private custody under `custody_id`\n    #[private]\n    fn deposit(custody_id: Field, amount: u128, nonce: Field) {\n        let caller = context.msg_sender();\n        let cfg = storage.config.read();\n\n        Token::at(cfg.token)\n            .transfer_in_private(caller, context.this_address(), amount, nonce)\n            .call(&mut context);\n\n        // Update custody balance by adding a new note owned by the caller\n        let new_note = CustodyNote::new(custody_id, amount, caller);\n        storage.custody_notes.at(caller).insert(new_note).emit(\n            dep::aztec::messages::logs::note::encode_and_encrypt_note(&mut context, caller, caller)\n        );\n    }\n\n    /// Withdraw `amount` of L2 token from private custody under `custody_id`\n    #[private]\n    fn withdraw(custody_id: Field, amount: u128) {\n        let caller = context.msg_sender();\n\n        // Pop notes to cover the withdrawal amount\n        let notes = storage.custody_notes.at(caller).pop_notes(\n            dep::aztec::prelude::NoteGetterOptions::new()\n                .set_limit(MAX_NOTES)\n                .select(CustodyNote::properties().custody_id, Comparator.EQ, custody_id)\n        );\n\n        let mut total_amount = 0 as u128;\n        for i in 0..MAX_NOTES {\n            if i < notes.len() {\n                total_amount += notes.get_unchecked(i).get_amount();\n                // Compute and push nullifier for each popped note to prevent double-spending\n                let note = notes.get_unchecked(i);\n                let note_hash = note.compute_note_hash(storage.custody_notes.at(caller).storage_slot);\n                let nullifier = note.compute_nullifier(&mut context, note_hash);\n                context.push_nullifier(nullifier);\n            }\n        }\n\n        assert(total_amount >= amount, \"Insufficient balance in custody\");\n\n        // If there's change, create a new note for the remaining amount\n        if total_amount > amount {\n            let change_note = CustodyNote::new(custody_id, total_amount - amount, caller);\n            storage.custody_notes.at(caller).insert(change_note).emit(\n                dep::aztec::messages::logs::note::encode_and_encrypt_note(&mut context, caller, caller)\n            );\n        }\n\n        // Transfer `amount` of L2 token back to caller (private)\n        let cfg = storage.config.read();\n        Token::at(cfg.token)\n            .transfer_in_private(context.this_address(), caller, amount, 0)\n            .call(&mut context);\n    }\n}\n"
    },
    "53": {
      "path": "/home/qbit/Desktop/work/otc-noirhack/contracts/psymm/src/types/custody_note.nr",
      "source": "use dep::aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize},\n        utils::arrays::array_concat,\n    },\n};\n\n/// A private note representing a custody balance associated with an account and custody ID.\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct CustodyNote {\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The ID of the custody under which this balance is held.\n    custody_id: Field,\n    /// The amount of tokens held in custody.\n    amount: u128,\n}\n\nimpl NoteHash for CustodyNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl CustodyNote {\n    pub fn new(custody_id: Field, amount: u128, owner: AztecAddress) -> Self {\n        let randomness = unsafe { random() };\n        Self { owner, randomness, custody_id, amount }\n    }\n\n    pub fn get_custody_id(self) -> Field {\n        self.custody_id\n    }\n\n    pub fn get_amount(self) -> u128 {\n        self.amount\n    }\n}\n"
    },
    "55": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "56": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "63": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "64": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "65": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "66": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "70": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "82": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "85": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "86": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "87": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "91": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "92": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "95": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n"
    },
    "96": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "99": {
      "path": "/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    }
  }
}
