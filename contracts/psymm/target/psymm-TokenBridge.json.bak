{"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"TokenBridge","functions":[{"name":"claim_public","hash":"15734065827288979688","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7043145299448266897":{"error_kind":"string","string":"L1-to-L2 message is already nullified"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13293000217372736598":{"error_kind":"string","string":"Tried to consume nonexistent L1-to-L2 message"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["claim_public"],"brillig_names":["claim_public"]},{"name":"get_config_public","hash":"14526353295382746076","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"config::Config","fields":[{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"15520311074722577191":{"error_kind":"string","string":"Function get_config_public can only be called statically"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71W0U6DMBTtxsjEOWPUJcZH44smJoUy2N4wugdfNHFfUKA1JJiZgcZHPl2IbdYV2GCDnaTpbdqde8+5tFkH/KPDRoYeWEcX5NEBJeiWHOIxYrMmnc/2lXQ4bA33g65JeZvkn0DT0kDekAbrRxpYb0rD/JDzt+Q/7DOe52TFL2rheY/SMRTiUxYPN/ye782SPJ8maGlaV9p3k/P3WuBPYVwU1M9zDZhHt2x9ko4zFuOfz7cvb+GTR99fkiiS757o/SbU4ezW4LySOV+/wzCgAVnOfoMoznErBdw8lt+YsrqKHq4MRXcrg8NmuB90VdIwYnPWu3vBk5HsyUs0j3EceE84DHdtoHyxmxQGJGEqKL/YsgnXggkPggmXsgnzeLHEH+SdYL+qB1U/zBa9MepqUfbUooDiB1zW2quhlVYEz6cyvn5BLTyvKp29YXP2HUAWDzdoGYDVn4Vesr7vbNFTBfYEQu6tkqxqFr0EUn5VOn/H1sdC/aIPzo51UhvrFGGKx9j3TQ+fS/xA8GzQQn6X6ASl/UYEm9SiB8/v2xZCE1dHnmXZrmEfOv8YQ4OYuuuOdYKnU7ot/x8nE7qyTgsAAA==","debug_symbols":"7VjbisIwEP2XPPchmcnk4q8sy1K1SqFUqXVhEf99k6VpajfYRXTpQ1/ElDOZk3MyUzoXti3W5/1HWe8OJ7Z6u7DqsMnb8lC71eWasXVTVlW5/xg+Ztz/CPrBn4557ZenNm9athIIxDNW1Fv/Hw25PXZlVbCVVdfsN5wDBDSXEMGYAEulRAeWSvMerEQCbIhTBzYEYgh+z5hQTyFvbUALYf+PvH4KeTK98mZCeUFaB7BCvE/ekg0ntQrlmLx5MnkBN+R9CvvyFMBfn0IkU4C7DyEISOL9FNrd0Q6tHXzCOFChGC0YGhkH8Bc+N0f2UfhQlHwoih6KSrcCjjw2pljblBIOFYRyRWVMD3a1krIddN82wMatRbL0NBkZHFR8wkGNBgNYDm5UEiwEatXfP8nt2HC9CJMWxizCpIWxMxdGR2Fg4hUstQ1HlQYjEbAy1To19UfkcWdIstZgI40JrJMZe8WVmUCTDmAaqmG8OcgXc+ZrjljMma85sJgzX3NwMWem5lzd6jNvynxdFd04YXeuN4PpQvt1LEaDhmNz2BTbc1P4kcNg2uDfXqgyKfwHnu+W0mTEXQ6X5xs=","names":["get_config_public"],"brillig_names":["get_config_public"]},{"name":"get_config","hash":"15154932495784653629","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5276036973553878575":{"error_kind":"string","string":"Function get_config can only be called statically"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_config"],"brillig_names":["discover_new_messages","storage_read","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"public_dispatch","hash":"7499165541399975720","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7043145299448266897":{"error_kind":"string","string":"L1-to-L2 message is already nullified"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13293000217372736598":{"error_kind":"string","string":"Tried to consume nonexistent L1-to-L2 message"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15520311074722577191":{"error_kind":"string","string":"Function get_config_public can only be called statically"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"claim_private","hash":"11428726043287715500","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17288131482828810359":{"error_kind":"string","string":"Message not in state"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"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","names":["claim_private"],"brillig_names":["discover_new_messages","storage_read","get_public_data_witness","field_less_than","decompose_hint","lte_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","get_l1_to_l2_membership_witness","notify_created_nullifier_oracle_wrapper","store_in_execution_cache_oracle_wrapper","call_private_function_internal","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"constructor","hash":"2899706907891111573","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"portal","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["constructor"],"brillig_names":["constructor"]},{"name":"sync_notes","hash":"4768365433912542244","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"exit_to_l1_public","hash":"16153543370881623022","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"caller_on_l1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["exit_to_l1_public"],"brillig_names":["exit_to_l1_public"]},{"name":"exit_to_l1_private","hash":"1451436773991798131","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"caller_on_l1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"1186437190978851533":{"error_kind":"string","string":"Non-zero hint for zero hash"},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17456365777023668047":{"error_kind":"string","string":"Token address is not the same as seen in storage"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["exit_to_l1_private"],"brillig_names":["discover_new_messages","storage_read","get_public_data_witness","field_less_than","decompose_hint","lte_hint","build_msg_block","attach_len_to_msg_block","store_in_execution_cache_oracle_wrapper","call_private_function_internal","directive_integer_quotient","directive_invert","directive_to_radix"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"TokenBridge::exit_to_l1_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::exit_to_l1_public_parameters","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"caller_on_l1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"TokenBridge::get_config_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::get_config_public_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"config::Config","fields":[{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"TokenBridge::get_config_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::get_config_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"config::Config","fields":[{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"TokenBridge::exit_to_l1_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::exit_to_l1_private_parameters","fields":[{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"caller_on_l1","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"TokenBridge::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::constructor_parameters","fields":[{"name":"token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"TokenBridge::claim_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::claim_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"secret","type":{"kind":"field"}},{"name":"message_leaf_index","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"TokenBridge::claim_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"TokenBridge::claim_private_parameters","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"}},{"name":"message_leaf_index","type":{"kind":"field"}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"TokenBridge"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"config","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]}]}},"file_map":{"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"46":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n","path":"std/slice.nr"},"51":{"source":"mod config;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract TokenBridge {\n    use crate::config::Config;\n\n    use dep::aztec::prelude::{AztecAddress, EthAddress, PublicImmutable};\n\n    use dep::token_portal_content_hash_lib::{\n        get_mint_to_private_content_hash, get_mint_to_public_content_hash,\n        get_withdraw_content_hash,\n    };\n\n    use dep::token::Token;\n\n    use dep::aztec::macros::{functions::{initializer, private, public, view}, storage::storage};\n\n    // Storage structure, containing all storage, and specifying what slots they use.\n    #[storage]\n    struct Storage<Context> {\n        config: PublicImmutable<Config, Context>,\n    }\n\n    // Constructs the contract.\n    #[public]\n    #[initializer]\n    fn constructor(token: AztecAddress, portal: EthAddress) {\n        storage.config.initialize(Config { token, portal });\n    }\n\n    #[private]\n    #[view]\n    fn get_config() -> Config {\n        storage.config.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_config_public() -> Config {\n        storage.config.read()\n    }\n\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount publicly\n    #[public]\n    fn claim_public(to: AztecAddress, amount: u128, secret: Field, message_leaf_index: Field) {\n        let content_hash = get_mint_to_public_content_hash(to, amount);\n\n        let config = storage.config.read();\n\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content_hash, secret, config.portal, message_leaf_index);\n\n        // Mint tokens\n        Token::at(config.token).mint_to_public(to, amount).call(&mut context);\n    }\n\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message publicly\n    // Requires `msg.sender` to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[public]\n    fn exit_to_l1_public(\n        recipient: EthAddress, // ethereum address to withdraw to\n        amount: u128,\n        caller_on_l1: EthAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field, // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        let config = storage.config.read();\n\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient, amount, caller_on_l1);\n        context.message_portal(config.portal, content);\n\n        // Burn tokens\n        Token::at(config.token).burn_public(context.msg_sender(), amount, nonce).call(&mut context);\n    }\n\n    /// Claims the bridged tokens and makes them accessible in private. Note that recipient's address is not revealed\n    /// but the amount is. Hence it's most likely possible to determine to which L1 deposit this claim corresponds to\n    /// (unless there are multiple pending deposits of the same amount).\n    #[private]\n    fn claim_private(\n        recipient: AztecAddress, // recipient of the bridged tokens\n        amount: u128,\n        secret_for_L1_to_L2_message_consumption: Field, // secret used to consume the L1 to L2 message\n        message_leaf_index: Field,\n    ) {\n        let config = storage.config.read();\n\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_to_private_content_hash(amount);\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret_for_L1_to_L2_message_consumption,\n            config.portal,\n            message_leaf_index,\n        );\n\n        // At last we mint the tokens\n        Token::at(config.token).mint_to_private(context.msg_sender(), recipient, amount).call(\n            &mut context,\n        );\n    }\n\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message privately\n    // Requires `msg.sender` (caller of the method) to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[private]\n    fn exit_to_l1_private(\n        token: AztecAddress,\n        recipient: EthAddress, // ethereum address to withdraw to\n        amount: u128,\n        caller_on_l1: EthAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field, // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) {\n        let config = storage.config.read();\n\n        // Assert that user provided token address is same as seen in storage.\n        assert_eq(config.token, token, \"Token address is not the same as seen in storage\");\n\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient, amount, caller_on_l1);\n        context.message_portal(config.portal, content);\n\n        // Burn tokens\n        Token::at(token).burn_private(context.msg_sender(), amount, nonce).call(&mut context);\n    }\n}\n","path":"/home/qbit/Desktop/work/otc-noirhack/contracts/psymm/src/main.nr"},"52":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"53":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"60":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"61":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"62":{"source":"use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr"},"63":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"67":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"79":{"source":"use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"84":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"88":{"source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"89":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"92":{"source":"use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr"},"93":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"96":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"98":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"100":{"source":"use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/utils.nr"},"101":{"source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"102":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"103":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"105":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr"},"106":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"107":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"108":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"119":{"source":"use crate::{\n    hash::{compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness,\n};\n\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    merkle_tree::root::root_from_sibling_path,\n};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    leaf_index: Field,\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_l1_to_l2_message_hash(\n        portal_contract_address,\n        chain_id,\n        contract_address,\n        version,\n        content,\n        secret_hash,\n        leaf_index,\n    );\n\n    // We prove that `message_hash` is in the tree by showing the derivation of the tree root, using a merkle path we\n    // get from an oracle.\n    // Safety: The witness is only used as a \"magical value\" that makes the merkle proof below pass. Hence it's safe.\n    let (_leaf_index, sibling_path) =\n        unsafe { get_l1_to_l2_membership_witness(contract_address, message_hash, secret) };\n\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\n    assert_eq(root, l1_to_l2_root, \"Message not in state\");\n\n    compute_l1_to_l2_message_nullifier(message_hash, secret)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messaging.nr"},"129":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"132":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"135":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"136":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"138":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"139":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"140":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"141":{"source":"use dep::protocol_types::{address::AztecAddress, constants::L1_TO_L2_MSG_TREE_HEIGHT};\n\n/// Returns the leaf index and sibling path of an entry in the L1 to L2 messaging tree, which can then be used to prove\n/// its existence.\npub unconstrained fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr"},"144":{"source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"145":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"146":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"147":{"source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"148":{"source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"150":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"152":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"153":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"163":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"178":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"181":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"182":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"184":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"185":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"187":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"189":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"193":{"source":"use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr"},"217":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"219":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"262":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"263":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"277":{"source":"use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"279":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"280":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"290":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"294":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"296":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"297":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"306":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"331":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"335":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"336":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"352":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"353":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"355":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"361":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/home/qbit/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"390":{"source":"use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr"},"391":{"source":"// docs:start:mint_to_public_content_hash_nr\nuse dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::{hash::sha256_to_field, traits::ToField};\n\n// Computes a content hash of a deposit/mint_to_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_to_public_content_hash(owner: AztecAddress, amount: u128) -> Field {\n    let mut hash_bytes = [0; 68];\n    let recipient_bytes: [u8; 32] = owner.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = (amount as Field).to_be_bytes();\n\n    // The purpose of including the following selector is to make the message unique to that specific call. Note that\n    // it has nothing to do with calling the function.\n    let selector =\n        comptime { keccak256::keccak256(\"mint_to_public(bytes32,uint256)\".as_bytes(), 31) };\n\n    for i in 0..4 {\n        hash_bytes[i] = selector[i];\n    }\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_to_public_content_hash_nr\n\n// docs:start:get_mint_to_private_content_hash\n// Computes a content hash of a deposit/mint_to_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_to_private_content_hash(amount: u128) -> Field {\n    let mut hash_bytes = [0; 36];\n    let amount_bytes: [u8; 32] = (amount as Field).to_be_bytes();\n\n    // The purpose of including the following selector is to make the message unique to that specific call. Note that\n    // it has nothing to do with calling the function.\n    let selector = comptime { keccak256::keccak256(\"mint_to_private(uint256)\".as_bytes(), 24) };\n\n    for i in 0..4 {\n        hash_bytes[i] = selector[i];\n    }\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = amount_bytes[i];\n    }\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_to_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(\n    recipient: EthAddress,\n    amount: u128,\n    caller_on_l1: EthAddress,\n) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = (amount as Field).to_be_bytes();\n    let caller_on_l1_bytes: [u8; 32] = caller_on_l1.to_field().to_be_bytes();\n\n    // The purpose of including the following selector is to make the message unique to that specific call. Note that\n    // it has nothing to do with calling the function.\n    let selector =\n        comptime { keccak256::keccak256(\"withdraw(address,uint256,address)\".as_bytes(), 33) };\n\n    for i in 0..4 {\n        hash_bytes[i] = selector[i];\n    }\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = caller_on_l1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n","path":"/home/qbit/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-contracts/contracts/libs/token_portal_content_hash_lib/src/lib.nr"}}}