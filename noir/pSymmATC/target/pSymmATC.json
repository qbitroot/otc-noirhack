{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":15757424888067373846,"abi":{"parameters":[{"name":"nullifier","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"secret_nonce","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"custody_id","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"amount","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"token","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"commitment","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/+1dB5gURRZ+vQsssGRYcsYcpzfArpFozjmQdmGXnDPmnHPOnnfmnHNAT/RET/RET/RET/RET/RET/RE772j+yyL58hM/9VsfzP1ff907d/jo15V1/v/CfZ4tLbN94ie89b25VAYHKU1tjhP4QoUrlDhGihcQ4VrpHBFCtdY4ZooXFOFK1a4ZgrXXOFaKFxLhWulcK0Vro3CtVW4dgpXonDtFa6DwnVUuE4K11nhuihcV4XrpnDdFa6HwvVUuF4K11vh+ijcRgq3scJtonCbKtxmCre5wm2hcFsq3FYKt7XCbaNw2ypcSuF8hStVuDKFK1e4CoXrq3D9FK5S4aoUbjuF217hdlC4HRVuJ4XbWeH6K9wAhRuocIMUbrDCDVG4XRRuV4XbTeF2V7g9FG5PhdtL4fZWuH0Ubl+F20/h9le4AxTuQIU7SOEOVrhDFO5QhTtM4Q5XuCMU7kiFG6pwwxRuuMKNULiRCletcDUKN0rhRitcrcLVKdwYhRurcOMUbrzCTVC4iQo3SeEmK9wUhZuqcNMUbrrCzVC4mQo3S+FmK9wchZurcPMUbr7CHaVwRyvcMQp3rMIdp3DHK9wJCneiwp2kcCcr3CkKd6rCnaZwpyvcGQp3psKdpXBnK9w5Cneuwp2ncOcr3AUKd6HCXaRwFyvcJQp3qcJdpnCXK9wVCnelwl2lcFcr3DUKd63CXadw1yvc7xTuBoX7vcL9QeFuVLibFO5mhbtF4W5VuNsU7naFu0Ph7lS4uxTuboW7R+HuVbj7FO5+hXtA4R5UuIcU7mGFe0ThHlW4xxTucYV7QuGeVLinFO7pgJPXqNIKaN3WODj2D46paM2HxfJTKQ8Ty5eHAkQsf+2hMHosP+w0iBrL/7nbMFos3/yjUZRY/i//LMJdXylSWpaxfZsw98czwXGBPJibSk48ZXELjEGErWm0wa0zWFis/MbKMFIyNlZZqm95eW2/0lq/zK9OlVbVVFakyitq+lb6lX5FZcXo0sqystrK8sp+VTVV/VJVqfKyWr+uoqqsLoj8TPaxfCtWagHBrvv/raMXwG6etceijvuZNOPONLY53mddDliCF1hxow7+WdwC+s8B83U1h88pcaPO4XOEVT103guCvH/r2vmtZsdFrvcfgXNoCrbEHUDxOuPGhBPwJoQT8KaEE/Biwgl4M8IJeHPCCXgLwgl4S8LWCLtlGTutM34+OC6UB3NTyQnbGS8k9844v7EyiZR7GyuqM36ecIK2kGDXfazO+Hly44xfcDlgCY52xi/gFtB/EZivqzl8kfDO+EXCqh4674VB3mhnjFzvPwHn0BRsiRu3M25FOAFvTTgBb0M4AW9LOAFvRzgBLyGcgLcnnIB3IGyNsFuWsdM645eC4yJ5MDeVnLCd8SJy74zzGyuTSLm3saI645cIJ2iLCHbdx+qMXyI3zvhllwOW4Ghn/DJuAf1XgPm6msNXCO+MXyGs6qHzXhTkjXbGyPX+M3AOTcGWuHE7446EE/BOhBPwzoQT8C6EE/CuhBPwboQT8O6EE/AehK0Rdssydlpn/GpwXCwP5qaSE7YzXkzunXF+Y2USKfc2VlRn/CrhBG0xwa77WJ3xq+TGGb/mcsASHO2MX8MtoP86MF9Xc/g64Z3x64RVPXTei4O80c4Yud5/Ac6hKdgSN25nPJJwAl5NOAGvIZyAjyKcgI8mnIDXEk7A6wgn4GMIWyPslmXstM74jeC4RB7MTSUnbGe8hNw745GU31jrHyn3NlZUZ/wG4QRtCcGu+1id8Rvkxhm/6XLAEhztjN/ELaD/FjBfV3P4FuGd8VuEVT103kuCvNHOGLnefwXOoSnYEjduZzyWcAI+jnACPp5wAj6BcAI+kXACPolwAj6ZcAI+hbA1wm5Zxk7rjN8OjkvlwdxUcsJ2xkvJvTPOb6xMIuXexorqjN8mnKAtJdh1H6szfpvcOON3XA5YgqOd8Tu4BfTfBebrag7fJbwzfpewqofOe2mQN9oZI9f7b8A5NAVb4sbtjKcSTsCnEU7ApxNOwGcQTsBnEk7AZxFOwGcTTsDnELZG2C3L2Gmd8XvBcZk8mJtKTtjOeBm5d8b5jZVJpNzbWFGd8XuEE7RlBLvuY3XG75EbZ/y+ywFLcLQzfh+3gP4HwHxdzeEHhHfGHxBW9dB5LwvyRjtj5Hr/HTiHpmBL3Lid8VzCCfg8wgn4fMIJ+FGEE/CjCSfgxxBOwI8lnIAfR9gaYbcsY6d1xh8Gx+XyYG4qOWE74+Xk3hnnN1YmkXJvY0V1xh8STtCWE+y6j9UZf0hunPFHLgcswdHO+CPcAvofA/N1NYcfE94Zf0xY1UPnvTzIG+2Mkev9D+AcmoItceN2xscTTsBPIJyAn0g4AT+JcAJ+MuEE/BTCCfiphBPw0whbI+yWZey0zviT4LhCHsxNJSdsZ7yC3Dvj4ym/sdY/Uu5trKjO+BPCCdoKgl33sTrjT8iNM/7U5YAlONoZf4pbQP8zYL6u5vAzwjvjzwireui8VwR5o50xcr3/CZxDU7AlbtzO+HTCCfgZhBPwMwkn4GcRTsDPJpyAn0M4AT+XcAJ+HmFrhN2yjJ3WGX8eHFfKg7mp5ITtjFeSe2ec31iZRMq9jRXVGX9OOEFbSbDrPlZn/Dm5ccZfuBywBEc74y9wC+h/CczX1Rx+SXhn/CVhVQ+d98ogb7QzRq73v4BzaAq2xI3bGZ9POAG/gHACfiHhBPwiwgn4xYQT8EsIJ+CXEk7ALyNsjbBblrHTOuOvguMqeTA3lZywnfEqcu+M8xsrk0i5t7GiOuOvCCdoqwh23cfqjL8iN874a5cDluBoZ/w1bgH9b4D5uprDbwjvjL8hrOqh814V5I12xsj1/jdwDk3BlrhxO+PLCSfgVxBOwK8knIBfRTgBv5pwAn4N4QT8WsIJ+HWErRF2yzJ2Wmf8bXBcLQ/mppITtjNeTe6dcX5jZRIp9zZWVGf8LeEEbTXBrvtYnfG35MYZf+dywBIc7Yy/wy2g/z0wX1dz+D3hnfH3hFU9dN6rg7zRzhi53v8BzqEp2BI3bmfcn3ACPoBwAj6QcAI+iHACPphwAj6EcAK+C+EEfFfC1gi7ZRk7rTP+ITiukQdzU8kJ2xmvIffOuD/lN9b6R8q9jRXVGf9AOEFbQ7DrPlZn/AO5ccY/uhywBEc74x9xC+j/BMzX1Rz+RHhn/BNhVQ+d95ogb7Qzhq6358YZy0Pczng3wgn47oQT8D0IJ+B7Ek7A9yKcgO9NOAHfh3ACvi9ha4Tdsoyd1hl7QSEqCFU53FRywnbGBZ57Z5zfWJlEyr2NFdUZex5O0AqAghanM/Y8N8640HM4YAmOdsaFuAX0GwAvLFdzKGNEO+MGHlb10HkXBHmjnTFyvRs6csYNN4Az3o9wAr4/4QT8AMIJ+IGEE/CDCCfgBxNOwA8hnIAfStgaYbcsY6d1xo2CQlRkO+NGijMuisEZ5zdWJpFyb2NFdcaNgIJWlFBn3MiRM27sORxwYwfOuDHQGTep585Y5rCJA2fcpJ4746Igb7QzRq53U0fOuOkGcMaHEU7ADyecgB9BOAE/knACPpRwAj6McAI+nHACPoKwNcJuWcZO64yLg0LUzHbGxYozbhaDM85vrEwi5d7GiuqMi4GC1iyhzrjYkTNu7jkccHMHzrg50Bm3qOfOWOawhQNn3KKeO+NmQd5oZ4xc75aOnHHLDeCMexJOwHsRTsB7E07A+xBOwDcinIBvTDgB34RwAr4pYWuE3bKMndYZtwoKUWvbGbdSnHHrGJxxT8pvrPWPlHsbK6ozbgUUtNYJdcatHDnjNp7DAbdx4IzbAJ1x23rujGUO2zpwxm3ruTNuHeSNdsbI9W7nyBm32wDOeDPCCfjmhBPwLQgn4FsSTsC3IpyAb004Ad+GcAK+LWFrhN2yjJ3WGZcEhai97YxLFGfcPgZnnN9YmUTKvY0V1RmXAAWtfUKdcYkjZ9zBczjgDg6ccQegM+5Yz52xzGFHB864Yz13xu2DvNHOGLnenRw5404bwBmnCCfgPuEEvJRwAl5GOAEvJ5yAVxBOwPsSTsD7EbZG2C3L2GmdceegEHWxnXFnxRl3icEZ5zdWJpFyb2NFdcadgYLWJaHOuLMjZ9zVczjgrg6ccVegM+5Wz52xzGE3B864Wz13xl2CvNHOGLne3R054+4bwBlXEk7Aqwgn4NsRTsC3J5yA70A4Ad+RcAK+E+EEfGfC1gi7ZRk7rTPuERSinrYz7qE4454xOOP8xsokUu5trKjOuAdQ0Hom1Bn3cOSMe3kOB9zLgTPuBXTGveu5M5Y57O3AGfeu5864Z5A32hkj17uPI2fcJ3DG0m8aHBcEcyD9hUZ/kdFfbPSXGP2lRn+Z0V9u9FcY/ZVGf5XRX2301xj98GY/0i8y+s2MvvkVNtSc5ePl42UabyO+DjdmbMLYlLEZY3PGFowtGVsxtmZsw9iWIRtT1LKUUcYoZ1Qw+jL6MSoZVYztGNszdghqdUFw3W9k7IHww+odredsbDwnfNtuJ+s5mxjPCQ3MztZzNsXvsbW3Y7b+nXLAv1OZWndtBni/rHk7GjnvZPR3Nvr9jf5mRn9zo7+F0d/S6G9l9Lc2+tsY/W2Nfsro+0a/1OiXGf0BRr/C6Pc1+v2MfqXRrzL62xn97Y3+DkF/IB8HMQYzhjB2YezK2I2xO2MPxp6MvRh7M/Zh7MvYj7E/4wDGgYyDGAczDmEcyjiMcTjjCG/tuzSy/oW0bvMiXgv2NTfQq5evyO1W6Sy2v9YPhHMbvgt2JP8xlDGMMZwxgjGSUc2o8eiXr/rlyY0tbqjCDVO44Qo3QuFGKly1wtV4PycRtibICbMumqjG7khArNo6aSl/KCiW5DgMEmvtfA2PHqs0fHU+Imqs8p9f6Y+MFitlvmtQHSVW6S/fgagBFqU4i+mgfDFVi+ko/mM0o5ZRxxjDGMsYxxhvF9NRSlEbrXC1ClencGMUbqzCjVO48TEU00HAYjoKWExHA4tpLbCY1gGL6RhgMR0LLKbjgMV0fEKL6eB8MVWL6QT+YyJjEmMyYwpjKmMaY7pdTCcoRW2iwk1SuMkKN0XhpircNIWbHkMxHQwsphOAxXQisJhOAhbTycBiOgVYTKcCi+k0YDGdntBiOiRfTNViOoP/mMmYxZjNmMOYy5jHmG8X0xlKUZupcLMUbrbCzVG4uQo3T+Hmx1BMhwCL6QxgMZ0JLKazgMV0NrCYzgEW07nAYjoPWEznOypKBeB9cD25ebsrFbG5zPl3wJyHJiTnG4A5D0tIzr8H5jw8ITn/AZjziITkfCMw55EJyfkmYM7VCcn5ZmDONQnJ+RZgzqMSkvOtwJxHJyTn24A51yYk59uBOdclJOc7gDmPSUjOdwJzHpuQnO8C5jwuITnfDcx5fEJyvgeY84SE5HwvMOeJCcn5PmDOkxKS8/3AnCcnJOcHgDlPSUjODwJznpqQnB8C5jwtITk/DMx5ekJyfgSY84yE5PwoMOeZCcn5MWDOsxKS8+PAnGcnJOcngDnPSUjOTwJznpuQnJ8C5jwvITk/DcwZ+fmzfCcjvLvKSCN/j37+ko+cb8hoxCiitd/fkO9syP+DVcxoxmjOaMFoyWjFaM1ow2jLaMcoYbRndGB0ZHRidGZ0YXRldGN0Z/Rg9GT0YvRm9GHIz0rIz0HIzzjIzy/IzYflpsFys1+5Sa/cXFduiis3s5Wb0MpCyq3T5JZncqsyucWY3BpMbuklt+KSb+vIDSTkxg9ywwa50YLcIEFubBDekGAAYyBjEGMwYwhjF8aujN0YuzP2YOzJ2IuxN2Mfxr6M/RjyE9Hy087yk8zyU8ryE8jy08Xyk8Pyg3vyQ3nyA3fyw3Tyg3LyQ3DyA24jjHWQYzWjhjGKMZpRy6hjjGGMZYxjjGdMYExkTGJMZkxhTGVMY0xnzGDMZMxizGbMYcxlzGPMZxzFOJpxDONYxnGM4xknME5knMQ4mXEK41TGaYzTGWcwzmScxTibcQ7jXMZ5jPMZFzAuZFzEuJhxCeNSxmWMyxlXMK5kXMW4mnEN41rGdYzrGfJ5/g0M+bxXPv+UzwPl8zH5vEg+P5HPE+T9dXm/Wd5/lfcj5f05eb9K3r+R9zPk9b283pXXf/J6SF4fiF8W/yh+SvyF6K3oj9RjqU9P07ot/MJb+P2l8HtL4Y1Swu859Q/+TkVrpWH8YjfxU0VKjk2NfrF1LqyJDZT/zvuVvwusY7rn2rzJNVfOhTHbBkdzvGEeTaxjiREXOJd+GL+dm/jqWpUY/XZWnuZ89weNIYwX7oOGtG4rsM792p7x8OPz7bEUKv9W2MJrpp3BhfPZ2hprQyMOck3D+I3cxP//NVnkJn6Zdk2anH0NmOvgWWOy9yl4rNWeMr5C69+0x2g+R6t5Bdbf9l3qCtfjudq1GZ5rpYzP/u+aKGM1ufDa0uqnvS7hHm34K7GKjPPm84us57paw7bKmMKx/xfl1LTHJDIBAA==","debug_symbols":"5ZzdSptREEXfJddenDN7zp+vUkqJGksgJBJjoYjv3lhMFQyFcxMXzOWXzIQZhiw26Mrz4m518/Tzx3p7v3tcXH97Xmx2t8vDerc9Pj0v8rC/Lz4+LLevz4+H5f6wuK5tXC1W27vFdcvl5Wpxv96sjq/ay9WnUvVW3mo1rP4rtnymOPfc34pzV34vTi/fr47DiDSMk4YppGEqaZhGGqaThhmcYSwl0jCZNAyIwJZABLYEIrAlEIEtgQhsCURgSyACWyIROJMInEkEziQCZxKBM4nAmUTgTCJwJhE4kwicSQQ2EoGNRGAjEdhIBDYSgY1EYCMR2EgENhKBjURgkQgsEoFFIrBIBBaJwCIRWCQCi0RgkQgsEoGdRGAnEdhJBHYSgZ1EYCcR2EkEdhKBnURgJxG4kAhcSAQuJAIXEoELicCFROBCInAhEbiQCFxIBK4kAlcSgSuJwJVE4EoicCURuJIIXEkEriQCVxKBG4nAjUTgRiJwIxG4kQjcSARuJAI3EoEbicCNROBOInAnEbiTCNxJBO4kAncSgTuJwJ1E4E4icCcReJAIPEgEJjlxRnLijOTEGcmJM5ITZyQnzkhOnJGcOJGcOJGcOJGcOJGcOCUQgUVy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4kRy4nRZJ856qW/F1pt/GuaiBFYynYpTs0/DOGmYQhqmkoZppGEuSmDlfPo2Kevzt+miBD7+eSudivWxOJ0pLq5TcXF/L87jTHEb+d/IQ+1j8eual7Xtvm7NHGNNi7GmYqzpMdYsMdasMdZsMdbsMdaMkYJGjBQ0YqSgESMFjRgp6LJm8detGSMFjRgpaMRIQSNGChohUpCnECnIU4gU5ClECvIUIgV58hhrhkhBnkKkIE8hUpCnECnIU4wUlGOkoBwjBeUYKSjHSEGX/YWNr1szRgrKMVJQjpGCcowUdP43Upqd/k2w1fxxzdeW879k8v+WPN9i8y2ab/H5ljLfUudb2nxLn2+Zv77mr6/562v++pq/vuavr/nra/76mr++5q+v+ev7/PV9/vo+f32fv77PX9/nr+/z1/f56/v89X3++mXy+seHm/16s1n//LHZ3S4P69328dh4fPnXcr9e3mxWb4/3T9vbD+8efj+c3jn1P+x3t6u7p/3q9ZP+vnf8+D8=","file_map":{"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\nfn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n","path":"std/hash/keccak.nr"},"21":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"62":{"source":"// ATC\n// note amount and token check\nfn main(\n    nullifier: [u8; 32],\n    secret_nonce: [u8; 32],\n    custody_id: [u8; 32],\n    amount: pub [u8; 32],\n    token: pub [u8; 32],\n    commitment: pub [u8; 32]\n) {\n    // Verify note commitment\n\t// we use pub values, therefore it also checks that commitment includes valid amount and token\n\n\t// Concatenate\n    let mut acc: [u8; 160] = [0; 160]; // 32 * 5 = 160 bytes\n    for i in 0..32 {\n        acc[i] = nullifier[i];\n        acc[i + 32] = amount[i];\n        acc[i + 64] = token[i];\n        acc[i + 96] = custody_id[i];\n        acc[i + 128] = secret_nonce[i];\n    }\n    // Hash the concatenated array\n    let computed_commitment = std::hash::keccak256(acc, acc.len());\n    assert(commitment == computed_commitment);\n}\n\n","path":"/home/qbit/Desktop/work/mono-contracts-repo/noir/pSymmATC/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert","directive_to_radix"]}